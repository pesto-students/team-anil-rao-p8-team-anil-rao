{"ast":null,"code":"import _objectSpread from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { createTransport } from '@sentry/core';\nimport { rejectedSyncPromise } from '@sentry/utils';\nimport { getNativeFetchImplementation, clearCachedFetchImplementation } from './utils.js';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nfunction makeFetchTransport(options) {\n  var nativeFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getNativeFetchImplementation();\n  var pendingBodySize = 0;\n  var pendingCount = 0;\n  function makeRequest(request) {\n    var requestSize = request.body.length;\n    pendingBodySize += requestSize;\n    pendingCount++;\n    var requestOptions = _objectSpread({\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n      // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).\n      // Gotchas:\n      // - `keepalive` isn't supported by Firefox\n      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):\n      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.\n      //   We will therefore only activate the flag when we're below that limit.\n      // There is also a limit of requests that can be open at the same time, so we also limit this to 15\n      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details\n      keepalive: pendingBodySize <= 60000 && pendingCount < 15\n    }, options.fetchOptions);\n    try {\n      return nativeFetch(options.url, requestOptions).then(function (response) {\n        pendingBodySize -= requestSize;\n        pendingCount--;\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After')\n          }\n        };\n      });\n    } catch (e) {\n      clearCachedFetchImplementation();\n      pendingBodySize -= requestSize;\n      pendingCount--;\n      return rejectedSyncPromise(e);\n    }\n  }\n  return createTransport(options, makeRequest);\n}\nexport { makeFetchTransport };","map":{"version":3,"names":["makeFetchTransport","options","nativeFetch","arguments","length","undefined","getNativeFetchImplementation","pendingBodySize","pendingCount","makeRequest","request","requestSize","body","requestOptions","_objectSpread","method","referrerPolicy","headers","keepalive","fetchOptions","url","then","response","statusCode","status","get","e","clearCachedFetchImplementation","rejectedSyncPromise","createTransport"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/src/transports/fetch.ts"],"sourcesContent":["import { createTransport } from '@sentry/core';\nimport type { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { rejectedSyncPromise } from '@sentry/utils';\n\nimport type { BrowserTransportOptions } from './types';\nimport type { FetchImpl } from './utils';\nimport { clearCachedFetchImplementation, getNativeFetchImplementation } from './utils';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeFetchTransport(\n  options: BrowserTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): Transport {\n  let pendingBodySize = 0;\n  let pendingCount = 0;\n\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestSize = request.body.length;\n    pendingBodySize += requestSize;\n    pendingCount++;\n\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n      // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).\n      // Gotchas:\n      // - `keepalive` isn't supported by Firefox\n      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):\n      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.\n      //   We will therefore only activate the flag when we're below that limit.\n      // There is also a limit of requests that can be open at the same time, so we also limit this to 15\n      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details\n      keepalive: pendingBodySize <= 60_000 && pendingCount < 15,\n      ...options.fetchOptions,\n    };\n\n    try {\n      return nativeFetch(options.url, requestOptions).then(response => {\n        pendingBodySize -= requestSize;\n        pendingCount--;\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After'),\n          },\n        };\n      });\n    } catch (e) {\n      clearCachedFetchImplementation();\n      pendingBodySize -= requestSize;\n      pendingCount--;\n      return rejectedSyncPromise(e);\n    }\n  }\n\n  return createTransport(options, makeRequest);\n}\n"],"mappings":";;;;;AAQA;AACA;AACA;AACA,SAAAA,mBACAC,OAAA,EAEA;EAAA,IADAC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAAG,4BAAA;EAEA,IAAAC,eAAA;EACA,IAAAC,YAAA;EAEA,SAAAC,YAAAC,OAAA;IACA,IAAAC,WAAA,GAAAD,OAAA,CAAAE,IAAA,CAAAR,MAAA;IACAG,eAAA,IAAAI,WAAA;IACAH,YAAA;IAEA,IAAAK,cAAA,GAAAC,aAAA;MACAF,IAAA,EAAAF,OAAA,CAAAE,IAAA;MACAG,MAAA;MACAC,cAAA;MACAC,OAAA,EAAAhB,OAAA,CAAAgB,OAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAC,SAAA,EAAAX,eAAA,aAAAC,YAAA;IAAA,GACAP,OAAA,CAAAkB,YAAA,CACA;IAEA;MACA,OAAAjB,WAAA,CAAAD,OAAA,CAAAmB,GAAA,EAAAP,cAAA,EAAAQ,IAAA,WAAAC,QAAA;QACAf,eAAA,IAAAI,WAAA;QACAH,YAAA;QACA;UACAe,UAAA,EAAAD,QAAA,CAAAE,MAAA;UACAP,OAAA;YACA,wBAAAK,QAAA,CAAAL,OAAA,CAAAQ,GAAA;YACA,eAAAH,QAAA,CAAAL,OAAA,CAAAQ,GAAA;UACA;QACA;MACA;IACA,SAAAC,CAAA;MACAC,8BAAA;MACApB,eAAA,IAAAI,WAAA;MACAH,YAAA;MACA,OAAAoB,mBAAA,CAAAF,CAAA;IACA;EACA;EAEA,OAAAG,eAAA,CAAA5B,OAAA,EAAAQ,WAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}