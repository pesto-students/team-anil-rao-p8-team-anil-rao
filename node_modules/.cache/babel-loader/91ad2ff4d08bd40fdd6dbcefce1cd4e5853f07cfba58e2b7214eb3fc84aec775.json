{"ast":null,"code":"import { logger } from '@sentry/utils';\nimport { getCurrentHub } from './hub.js';\n\n/** A class object that can instantiate Client objects. */\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nfunction initAndBind(clientClass, options) {\n  if (options.debug === true) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n    }\n  }\n  var hub = getCurrentHub();\n  var scope = hub.getScope();\n  scope.update(options.initialScope);\n  var client = new clientClass(options);\n  hub.bindClient(client);\n}\nexport { initAndBind };","map":{"version":3,"names":["initAndBind","clientClass","options","debug","__SENTRY_DEBUG__","logger","enable","console","warn","hub","getCurrentHub","scope","getScope","update","initialScope","client","bindClient"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/sdk.ts"],"sourcesContent":["import type { Client, ClientOptions } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { getCurrentHub } from './hub';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends ClientOptions> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends ClientOptions>(\n  clientClass: ClientClass<F, O>,\n  options: O,\n): void {\n  if (options.debug === true) {\n    if (__DEBUG_BUILD__) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n    }\n  }\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  scope.update(options.initialScope);\n\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n"],"mappings":";;;AAKA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAA,YACAC,WAAA,EACAC,OAAA,EACA;EACA,IAAAA,OAAA,CAAAC,KAAA;IACA,WAAAC,gBAAA,oBAAAA,gBAAA;MACAC,MAAA,CAAAC,MAAA;IACA;MACA;MACA;MACAC,OAAA,CAAAC,IAAA;IACA;EACA;EACA,IAAAC,GAAA,GAAAC,aAAA;EACA,IAAAC,KAAA,GAAAF,GAAA,CAAAG,QAAA;EACAD,KAAA,CAAAE,MAAA,CAAAX,OAAA,CAAAY,YAAA;EAEA,IAAAC,MAAA,OAAAd,WAAA,CAAAC,OAAA;EACAO,GAAA,CAAAO,UAAA,CAAAD,MAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}