{"ast":null,"code":"import _objectSpread from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { makeDsn, dsnToString, urlEncode } from '@sentry/utils';\nvar SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn) {\n  var protocol = dsn.protocol ? \"\".concat(dsn.protocol, \":\") : '';\n  var port = dsn.port ? \":\".concat(dsn.port) : '';\n  return \"\".concat(protocol, \"//\").concat(dsn.host).concat(port).concat(dsn.path ? \"/\".concat(dsn.path) : '', \"/api/\");\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn) {\n  return \"\".concat(getBaseApiEndpoint(dsn)).concat(dsn.projectId, \"/envelope/\");\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn, sdkInfo) {\n  return urlEncode(_objectSpread({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION\n  }, sdkInfo && {\n    sentry_client: \"\".concat(sdkInfo.name, \"/\").concat(sdkInfo.version)\n  }));\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nfunction getEnvelopeEndpointWithUrlEncodedAuth(dsn) {\n  var tunnelOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n\n  var tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  var sdkInfo = typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n  return tunnel ? tunnel : \"\".concat(_getIngestEndpoint(dsn), \"?\").concat(_encodedAuth(dsn, sdkInfo));\n}\n\n/** Returns the url to the report dialog endpoint. */\nfunction getReportDialogEndpoint(dsnLike, dialogOptions) {\n  var dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n  var endpoint = \"\".concat(getBaseApiEndpoint(dsn), \"embed/error-page/\");\n  var encodedOptions = \"dsn=\".concat(dsnToString(dsn));\n  for (var key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n    if (key === 'user') {\n      var user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += \"&name=\".concat(encodeURIComponent(user.name));\n      }\n      if (user.email) {\n        encodedOptions += \"&email=\".concat(encodeURIComponent(user.email));\n      }\n    } else {\n      encodedOptions += \"&\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(dialogOptions[key]));\n    }\n  }\n  return \"\".concat(endpoint, \"?\").concat(encodedOptions);\n}\nexport { getEnvelopeEndpointWithUrlEncodedAuth, getReportDialogEndpoint };","map":{"version":3,"names":["SENTRY_API_VERSION","getBaseApiEndpoint","dsn","protocol","concat","port","host","path","_getIngestEndpoint","projectId","_encodedAuth","sdkInfo","urlEncode","_objectSpread","sentry_key","publicKey","sentry_version","sentry_client","name","version","getEnvelopeEndpointWithUrlEncodedAuth","tunnelOrOptions","arguments","length","undefined","tunnel","_metadata","sdk","getReportDialogEndpoint","dsnLike","dialogOptions","makeDsn","endpoint","encodedOptions","dsnToString","key","user","encodeURIComponent","email"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/api.ts"],"sourcesContent":["import type { ClientOptions, DsnComponents, DsnLike, SdkInfo } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n    ...(sdkInfo && { sentry_client: `${sdkInfo.name}/${sdkInfo.version}` }),\n  });\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(\n  dsn: DsnComponents,\n  // TODO (v8): Remove `tunnelOrOptions` in favor of `options`, and use the substitute code below\n  // options: ClientOptions = {} as ClientOptions,\n  tunnelOrOptions: string | ClientOptions = {} as ClientOptions,\n): string {\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n\n  const tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  const sdkInfo =\n    typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n"],"mappings":";;AAGA,IAAAA,kBAAA;;AAEA;AACA,SAAAC,mBAAAC,GAAA;EACA,IAAAC,QAAA,GAAAD,GAAA,CAAAC,QAAA,MAAAC,MAAA,CAAAF,GAAA,CAAAC,QAAA;EACA,IAAAE,IAAA,GAAAH,GAAA,CAAAG,IAAA,OAAAD,MAAA,CAAAF,GAAA,CAAAG,IAAA;EACA,UAAAD,MAAA,CAAAD,QAAA,QAAAC,MAAA,CAAAF,GAAA,CAAAI,IAAA,EAAAF,MAAA,CAAAC,IAAA,EAAAD,MAAA,CAAAF,GAAA,CAAAK,IAAA,OAAAH,MAAA,CAAAF,GAAA,CAAAK,IAAA;AACA;;AAEA;AACA,SAAAC,mBAAAN,GAAA;EACA,UAAAE,MAAA,CAAAH,kBAAA,CAAAC,GAAA,GAAAE,MAAA,CAAAF,GAAA,CAAAO,SAAA;AACA;;AAEA;AACA,SAAAC,aAAAR,GAAA,EAAAS,OAAA;EACA,OAAAC,SAAA,CAAAC,aAAA;IACA;IACA;IACAC,UAAA,EAAAZ,GAAA,CAAAa,SAAA;IACAC,cAAA,EAAAhB;EAAA,GACAW,OAAA;IAAAM,aAAA,KAAAb,MAAA,CAAAO,OAAA,CAAAO,IAAA,OAAAd,MAAA,CAAAO,OAAA,CAAAQ,OAAA;EAAA,EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAAC,sCACAlB,GAAA,EAIA;EAAA,IADAmB,eAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;EAEA;EACA;EACA;;EAEA,IAAAG,MAAA,UAAAJ,eAAA,gBAAAA,eAAA,GAAAA,eAAA,CAAAI,MAAA;EACA,IAAAd,OAAA,GACA,OAAAU,eAAA,kBAAAA,eAAA,CAAAK,SAAA,GAAAF,SAAA,GAAAH,eAAA,CAAAK,SAAA,CAAAC,GAAA;EAEA,OAAAF,MAAA,GAAAA,MAAA,MAAArB,MAAA,CAAAI,kBAAA,CAAAN,GAAA,QAAAE,MAAA,CAAAM,YAAA,CAAAR,GAAA,EAAAS,OAAA;AACA;;AAEA;AACA,SAAAiB,wBACAC,OAAA,EACAC,aAAA,EAKA;EACA,IAAA5B,GAAA,GAAA6B,OAAA,CAAAF,OAAA;EACA,KAAA3B,GAAA;IACA;EACA;EAEA,IAAA8B,QAAA,MAAA5B,MAAA,CAAAH,kBAAA,CAAAC,GAAA;EAEA,IAAA+B,cAAA,UAAA7B,MAAA,CAAA8B,WAAA,CAAAhC,GAAA;EACA,SAAAiC,GAAA,IAAAL,aAAA;IACA,IAAAK,GAAA;MACA;IACA;IAEA,IAAAA,GAAA;MACA,IAAAC,IAAA,GAAAN,aAAA,CAAAM,IAAA;MACA,KAAAA,IAAA;QACA;MACA;MACA,IAAAA,IAAA,CAAAlB,IAAA;QACAe,cAAA,aAAA7B,MAAA,CAAAiC,kBAAA,CAAAD,IAAA,CAAAlB,IAAA;MACA;MACA,IAAAkB,IAAA,CAAAE,KAAA;QACAL,cAAA,cAAA7B,MAAA,CAAAiC,kBAAA,CAAAD,IAAA,CAAAE,KAAA;MACA;IACA;MACAL,cAAA,QAAA7B,MAAA,CAAAiC,kBAAA,CAAAF,GAAA,QAAA/B,MAAA,CAAAiC,kBAAA,CAAAP,aAAA,CAAAK,GAAA;IACA;EACA;EAEA,UAAA/B,MAAA,CAAA4B,QAAA,OAAA5B,MAAA,CAAA6B,cAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}