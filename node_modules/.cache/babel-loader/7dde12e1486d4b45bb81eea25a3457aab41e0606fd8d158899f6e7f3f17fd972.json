{"ast":null,"code":"import { dynamicRequire } from '@sentry/utils';\nconst lazyLoadedNodePerformanceMonitoringIntegrations = [() => {\n  const integration = dynamicRequire(module, './apollo');\n  return new integration.Apollo();\n}, () => {\n  const integration = dynamicRequire(module, './apollo');\n  return new integration.Apollo({\n    useNestjs: true\n  });\n}, () => {\n  const integration = dynamicRequire(module, './graphql');\n  return new integration.GraphQL();\n}, () => {\n  const integration = dynamicRequire(module, './mongo');\n  return new integration.Mongo();\n}, () => {\n  const integration = dynamicRequire(module, './mongo');\n  return new integration.Mongo({\n    mongoose: true\n  });\n}, () => {\n  const integration = dynamicRequire(module, './mysql');\n  return new integration.Mysql();\n}, () => {\n  const integration = dynamicRequire(module, './postgres');\n  return new integration.Postgres();\n}];\nexport { lazyLoadedNodePerformanceMonitoringIntegrations };","map":{"version":3,"names":["lazyLoadedNodePerformanceMonitoringIntegrations","integration","dynamicRequire","module","Apollo","useNestjs","GraphQL","Mongo","mongoose","Mysql","Postgres"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/node/integrations/lazy.ts"],"sourcesContent":["import type { Integration, IntegrationClass } from '@sentry/types';\nimport { dynamicRequire } from '@sentry/utils';\n\nexport interface LazyLoadedIntegration<T = object> extends Integration {\n  /**\n   * Loads the integration's dependency and caches it so it doesn't have to be loaded again.\n   *\n   * If this returns undefined, the dependency could not be loaded.\n   */\n  loadDependency(): T | undefined;\n}\n\nexport const lazyLoadedNodePerformanceMonitoringIntegrations: (() => LazyLoadedIntegration)[] = [\n  () => {\n    const integration = dynamicRequire(module, './apollo') as {\n      Apollo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Apollo();\n  },\n  () => {\n    const integration = dynamicRequire(module, './apollo') as {\n      Apollo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Apollo({ useNestjs: true });\n  },\n  () => {\n    const integration = dynamicRequire(module, './graphql') as {\n      GraphQL: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.GraphQL();\n  },\n  () => {\n    const integration = dynamicRequire(module, './mongo') as {\n      Mongo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Mongo();\n  },\n  () => {\n    const integration = dynamicRequire(module, './mongo') as {\n      Mongo: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Mongo({ mongoose: true });\n  },\n  () => {\n    const integration = dynamicRequire(module, './mysql') as {\n      Mysql: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Mysql();\n  },\n  () => {\n    const integration = dynamicRequire(module, './postgres') as {\n      Postgres: IntegrationClass<LazyLoadedIntegration>;\n    };\n    return new integration.Postgres();\n  },\n];\n"],"mappings":";AAYA,MAAAA,+CAAA,IACA;EACA,MAAAC,WAAA,GAAAC,cAAA,CAAAC,MAAA;EAGA,WAAAF,WAAA,CAAAG,MAAA;AACA,GACA;EACA,MAAAH,WAAA,GAAAC,cAAA,CAAAC,MAAA;EAGA,WAAAF,WAAA,CAAAG,MAAA;IAAAC,SAAA;EAAA;AACA,GACA;EACA,MAAAJ,WAAA,GAAAC,cAAA,CAAAC,MAAA;EAGA,WAAAF,WAAA,CAAAK,OAAA;AACA,GACA;EACA,MAAAL,WAAA,GAAAC,cAAA,CAAAC,MAAA;EAGA,WAAAF,WAAA,CAAAM,KAAA;AACA,GACA;EACA,MAAAN,WAAA,GAAAC,cAAA,CAAAC,MAAA;EAGA,WAAAF,WAAA,CAAAM,KAAA;IAAAC,QAAA;EAAA;AACA,GACA;EACA,MAAAP,WAAA,GAAAC,cAAA,CAAAC,MAAA;EAGA,WAAAF,WAAA,CAAAQ,KAAA;AACA,GACA;EACA,MAAAR,WAAA,GAAAC,cAAA,CAAAC,MAAA;EAGA,WAAAF,WAAA,CAAAS,QAAA;AACA,EACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}