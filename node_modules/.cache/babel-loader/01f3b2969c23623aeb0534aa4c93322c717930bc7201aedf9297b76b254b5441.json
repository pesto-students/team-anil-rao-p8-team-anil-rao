{"ast":null,"code":"import { logger } from './logger.js';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nfunction dsnToString(dsn) {\n  let withPassword = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const {\n    host,\n    path,\n    pass,\n    port,\n    projectId,\n    protocol,\n    publicKey\n  } = dsn;\n  return `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` + `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`;\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nfunction dsnFromString(str) {\n  const match = DSN_REGEX.exec(str);\n  if (!match) {\n    // This should be logged to the console\n    // eslint-disable-next-line no-console\n    console.error(`Invalid Sentry Dsn: ${str}`);\n    return undefined;\n  }\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop();\n  }\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n  return dsnFromComponents({\n    host,\n    pass,\n    path,\n    projectId,\n    port,\n    protocol: protocol,\n    publicKey\n  });\n}\nfunction dsnFromComponents(components) {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId\n  };\n}\nfunction validateDsn(dsn) {\n  if (!(typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__)) {\n    return true;\n  }\n  const {\n    port,\n    projectId,\n    protocol\n  } = dsn;\n  const requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n  if (!projectId.match(/^\\d+$/)) {\n    logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n  if (!isValidProtocol(protocol)) {\n    logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nfunction makeDsn(from) {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\nexport { dsnFromString, dsnToString, makeDsn };","map":{"version":3,"names":["DSN_REGEX","isValidProtocol","protocol","dsnToString","dsn","withPassword","arguments","length","undefined","host","path","pass","port","projectId","publicKey","dsnFromString","str","match","exec","console","error","lastPath","slice","split","join","pop","projectMatch","dsnFromComponents","components","validateDsn","__SENTRY_DEBUG__","requiredComponents","hasMissingRequiredComponent","find","component","logger","isNaN","parseInt","makeDsn","from"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/dsn.ts"],"sourcesContent":["import type { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { logger } from './logger';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nexport function dsnFromString(str: string): DsnComponents | undefined {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    // eslint-disable-next-line no-console\n    console.error(`Invalid Sentry Dsn: ${str}`);\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean {\n  if (!__DEBUG_BUILD__) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nexport function makeDsn(from: DsnLike): DsnComponents | undefined {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}