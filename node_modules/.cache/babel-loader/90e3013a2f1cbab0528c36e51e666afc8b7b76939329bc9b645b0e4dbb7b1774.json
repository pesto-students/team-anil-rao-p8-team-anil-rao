{"ast":null,"code":"import _toConsumableArray from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { addTracingExtensions, getMainCarrier } from '@sentry/core';\nimport { isNodeEnv, loadModule, dynamicRequire } from '@sentry/utils';\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations() {\n  var carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  var packageToIntegrationMapping = {\n    mongodb: function mongodb() {\n      var integration = dynamicRequire(module, './node/integrations/mongo');\n      return new integration.Mongo();\n    },\n    mongoose: function mongoose() {\n      var integration = dynamicRequire(module, './node/integrations/mongo');\n      return new integration.Mongo();\n    },\n    mysql: function mysql() {\n      var integration = dynamicRequire(module, './node/integrations/mysql');\n      return new integration.Mysql();\n    },\n    pg: function pg() {\n      var integration = dynamicRequire(module, './node/integrations/postgres');\n      return new integration.Postgres();\n    }\n  };\n  var mappedPackages = Object.keys(packageToIntegrationMapping).filter(function (moduleName) {\n    return !!loadModule(moduleName);\n  }).map(function (pkg) {\n    try {\n      return packageToIntegrationMapping[pkg]();\n    } catch (e) {\n      return undefined;\n    }\n  }).filter(function (p) {\n    return p;\n  });\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [].concat(_toConsumableArray(carrier.__SENTRY__.integrations || []), _toConsumableArray(mappedPackages));\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nfunction addExtensionMethods() {\n  addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n}\nexport { addExtensionMethods };","map":{"version":3,"names":["_autoloadDatabaseIntegrations","carrier","getMainCarrier","__SENTRY__","packageToIntegrationMapping","mongodb","integration","dynamicRequire","module","Mongo","mongoose","mysql","Mysql","pg","Postgres","mappedPackages","Object","keys","filter","moduleName","loadModule","map","pkg","e","undefined","p","length","integrations","concat","_toConsumableArray","addExtensionMethods","addTracingExtensions","isNodeEnv"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/extensions.ts"],"sourcesContent":["import { addTracingExtensions, getMainCarrier } from '@sentry/core';\nimport type { Integration, IntegrationClass } from '@sentry/types';\nimport { dynamicRequire, isNodeEnv, loadModule } from '@sentry/utils';\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './node/integrations/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './node/integrations/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './node/integrations/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './node/integrations/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n}\n"],"mappings":";;;;AAIA;AACA;AACA;AACA,SAAAA,8BAAA;EACA,IAAAC,OAAA,GAAAC,cAAA;EACA,KAAAD,OAAA,CAAAE,UAAA;IACA;EACA;EAEA,IAAAC,2BAAA;IACAC,OAAA,WAAAA,QAAA;MACA,IAAAC,WAAA,GAAAC,cAAA,CAAAC,MAAA;MAGA,WAAAF,WAAA,CAAAG,KAAA;IACA;IACAC,QAAA,WAAAA,SAAA;MACA,IAAAJ,WAAA,GAAAC,cAAA,CAAAC,MAAA;MAGA,WAAAF,WAAA,CAAAG,KAAA;IACA;IACAE,KAAA,WAAAA,MAAA;MACA,IAAAL,WAAA,GAAAC,cAAA,CAAAC,MAAA;MAGA,WAAAF,WAAA,CAAAM,KAAA;IACA;IACAC,EAAA,WAAAA,GAAA;MACA,IAAAP,WAAA,GAAAC,cAAA,CAAAC,MAAA;MAGA,WAAAF,WAAA,CAAAQ,QAAA;IACA;EACA;EAEA,IAAAC,cAAA,GAAAC,MAAA,CAAAC,IAAA,CAAAb,2BAAA,EACAc,MAAA,WAAAC,UAAA;IAAA,SAAAC,UAAA,CAAAD,UAAA;EAAA,GACAE,GAAA,WAAAC,GAAA;IACA;MACA,OAAAlB,2BAAA,CAAAkB,GAAA;IACA,SAAAC,CAAA;MACA,OAAAC,SAAA;IACA;EACA,GACAN,MAAA,WAAAO,CAAA;IAAA,OAAAA,CAAA;EAAA;EAEA,IAAAV,cAAA,CAAAW,MAAA;IACAzB,OAAA,CAAAE,UAAA,CAAAwB,YAAA,MAAAC,MAAA,CAAAC,kBAAA,CAAA5B,OAAA,CAAAE,UAAA,CAAAwB,YAAA,SAAAE,kBAAA,CAAAd,cAAA;EACA;AACA;;AAEA;AACA;AACA;AACA,SAAAe,oBAAA;EACAC,oBAAA;;EAEA;EACA,IAAAC,SAAA;IACAhC,6BAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}