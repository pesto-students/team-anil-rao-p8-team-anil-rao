{"ast":null,"code":"import _slicedToArray from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\n\nvar DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nfunction parseRetryAfterHeader(header) {\n  var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();\n  var headerDelay = parseInt(\"\".concat(header), 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n  var headerDate = Date.parse(\"\".concat(header));\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nfunction disabledUntil(limits, category) {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nfunction isRateLimited(limits, category) {\n  var now = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Date.now();\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nfunction updateRateLimits(limits, _ref) {\n  var statusCode = _ref.statusCode,\n    headers = _ref.headers;\n  var now = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Date.now();\n  var updatedRateLimits = _objectSpread({}, limits);\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  var rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  var retryAfterHeader = headers && headers['retry-after'];\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    var _iterator = _createForOfIteratorHelper(rateLimitHeader.trim().split(',')),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var limit = _step.value;\n        var _limit$split = limit.split(':', 2),\n          _limit$split2 = _slicedToArray(_limit$split, 2),\n          retryAfter = _limit$split2[0],\n          categories = _limit$split2[1];\n        var headerDelay = parseInt(retryAfter, 10);\n        var delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n        if (!categories) {\n          updatedRateLimits.all = now + delay;\n        } else {\n          var _iterator2 = _createForOfIteratorHelper(categories.split(';')),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var category = _step2.value;\n              updatedRateLimits[category] = now + delay;\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n  return updatedRateLimits;\n}\nexport { DEFAULT_RETRY_AFTER, disabledUntil, isRateLimited, parseRetryAfterHeader, updateRateLimits };","map":{"version":3,"names":["DEFAULT_RETRY_AFTER","parseRetryAfterHeader","header","now","arguments","length","undefined","Date","headerDelay","parseInt","concat","isNaN","headerDate","parse","disabledUntil","limits","category","all","isRateLimited","updateRateLimits","_ref","statusCode","headers","updatedRateLimits","_objectSpread","rateLimitHeader","retryAfterHeader","_iterator","_createForOfIteratorHelper","trim","split","_step","s","n","done","limit","value","_limit$split","_limit$split2","_slicedToArray","retryAfter","categories","delay","_iterator2","_step2","err","e","f"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/ratelimit.ts"],"sourcesContent":["import type { TransportMakeRequestResponse } from '@sentry/types';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nexport function disabledUntil(limits: RateLimits, category: string): number {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, category: string, now: number = Date.now()): boolean {\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories] = limit.split(':', 2);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}