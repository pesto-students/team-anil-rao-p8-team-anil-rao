{"ast":null,"code":"import _slicedToArray from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _possibleConstructorReturn from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _assertThisInitialized from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getCurrentHub } from '@sentry/browser';\nimport { timestampInSeconds } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { REACT_MOUNT_OP, REACT_UPDATE_OP, REACT_RENDER_OP } from './constants.js';\nvar _jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/profiler.tsx\";\nvar UNKNOWN_COMPONENT = 'unknown';\n\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\nvar Profiler = /*#__PURE__*/function (_React$Component) {\n  _inherits(Profiler, _React$Component);\n  var _super = _createSuper(Profiler);\n  function Profiler(props) {\n    var _this;\n    _classCallCheck(this, Profiler);\n    _this = _super.call(this, props);\n    Profiler.prototype.__init.call(_assertThisInitialized(_this));\n    Profiler.prototype.__init2.call(_assertThisInitialized(_this));\n    var _this$props = _this.props,\n      name = _this$props.name,\n      _this$props$disabled = _this$props.disabled,\n      disabled = _this$props$disabled === void 0 ? false : _this$props$disabled;\n    if (disabled) {\n      return _possibleConstructorReturn(_this);\n    }\n    var activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      _this._mountSpan = activeTransaction.startChild({\n        description: \"<\".concat(name, \">\"),\n        op: REACT_MOUNT_OP\n      });\n    }\n    return _this;\n  }\n\n  // If a component mounted, we can finish the mount activity.\n  _createClass(Profiler, [{\n    key: \"__init\",\n    value:\n    /**\n     * The span of the mount activity\n     * Made protected for the React Native SDK to access\n     */\n    function __init() {\n      this._mountSpan = undefined;\n    }\n    /**\n     * The span that represents the duration of time between shouldComponentUpdate and componentDidUpdate\n     */\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._updateSpan = undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this._mountSpan) {\n        this._mountSpan.finish();\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(_ref) {\n      var _this2 = this;\n      var updateProps = _ref.updateProps,\n        _ref$includeUpdates = _ref.includeUpdates,\n        includeUpdates = _ref$includeUpdates === void 0 ? true : _ref$includeUpdates;\n      // Only generate an update span if includeUpdates is true, if there is a valid mountSpan,\n      // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n      // We are just trying to give baseline clues for further investigation.\n      if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {\n        // See what props haved changed between the previous props, and the current props. This is\n        // set as data on the span. We just store the prop keys as the values could be potenially very large.\n        var changedProps = Object.keys(updateProps).filter(function (k) {\n          return updateProps[k] !== _this2.props.updateProps[k];\n        });\n        if (changedProps.length > 0) {\n          var now = timestampInSeconds();\n          this._updateSpan = this._mountSpan.startChild({\n            data: {\n              changedProps: changedProps\n            },\n            description: \"<\".concat(this.props.name, \">\"),\n            op: REACT_UPDATE_OP,\n            startTimestamp: now\n          });\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this._updateSpan) {\n        this._updateSpan.finish();\n        this._updateSpan = undefined;\n      }\n    }\n\n    // If a component is unmounted, we can say it is no longer on the screen.\n    // This means we can finish the span representing the component render.\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props2 = this.props,\n        name = _this$props2.name,\n        _this$props2$includeR = _this$props2.includeRender,\n        includeRender = _this$props2$includeR === void 0 ? true : _this$props2$includeR;\n      if (this._mountSpan && includeRender) {\n        // If we were able to obtain the spanId of the mount activity, we should set the\n        // next activity as a child to the component mount activity.\n        this._mountSpan.startChild({\n          description: \"<\".concat(name, \">\"),\n          endTimestamp: timestampInSeconds(),\n          op: REACT_RENDER_OP,\n          startTimestamp: this._mountSpan.endTimestamp\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.defaultProps = {\n        disabled: false,\n        includeRender: true,\n        includeUpdates: true\n      };\n    }\n  }]);\n  return Profiler;\n}(React.Component);\nProfiler.__initStatic();\n\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\nfunction withProfiler(WrappedComponent,\n// We do not want to have `updateProps` given in options, it is instead filled through the HOC.\noptions) {\n  var _this3 = this;\n  var componentDisplayName = options && options.name || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n  var Wrapped = function Wrapped(props) {\n    return React.createElement(Profiler, _objectSpread(_objectSpread({}, options), {}, {\n      name: componentDisplayName,\n      updateProps: props,\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      }\n    }), React.createElement(WrappedComponent, _objectSpread(_objectSpread({}, props), {}, {\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      }\n    })));\n  };\n  Wrapped.displayName = \"profiler(\".concat(componentDisplayName, \")\");\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\nfunction useProfiler(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    disabled: false,\n    hasRenderSpan: true\n  };\n  var _React$useState = React.useState(function () {\n      if (options && options.disabled) {\n        return undefined;\n      }\n      var activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        return activeTransaction.startChild({\n          description: \"<\".concat(name, \">\"),\n          op: REACT_MOUNT_OP\n        });\n      }\n      return undefined;\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    mountSpan = _React$useState2[0];\n  React.useEffect(function () {\n    if (mountSpan) {\n      mountSpan.finish();\n    }\n    return function () {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: \"<\".concat(name, \">\"),\n          endTimestamp: timestampInSeconds(),\n          op: REACT_RENDER_OP,\n          startTimestamp: mountSpan.endTimestamp\n        });\n      }\n    };\n    // We only want this to run once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\n\n/** Grabs active transaction off scope */\nfunction getActiveTransaction() {\n  var hub = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getCurrentHub();\n  if (hub) {\n    var scope = hub.getScope();\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n  return undefined;\n}\nexport { Profiler, UNKNOWN_COMPONENT, getActiveTransaction, useProfiler, withProfiler };","map":{"version":3,"names":["_jsxFileName","UNKNOWN_COMPONENT","Profiler","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","prototype","__init","_assertThisInitialized","__init2","_this$props","name","_this$props$disabled","disabled","_possibleConstructorReturn","activeTransaction","getActiveTransaction","_mountSpan","startChild","description","concat","op","REACT_MOUNT_OP","_createClass","key","value","undefined","_updateSpan","componentDidMount","finish","shouldComponentUpdate","_ref","_this2","updateProps","_ref$includeUpdates","includeUpdates","changedProps","Object","keys","filter","k","length","now","timestampInSeconds","data","REACT_UPDATE_OP","startTimestamp","componentDidUpdate","componentWillUnmount","_this$props2","_this$props2$includeR","includeRender","endTimestamp","REACT_RENDER_OP","render","children","__initStatic","defaultProps","React","Component","withProfiler","WrappedComponent","options","_this3","componentDisplayName","displayName","Wrapped","createElement","_objectSpread","__self","__source","fileName","lineNumber","hoistNonReactStatics","useProfiler","arguments","hasRenderSpan","_React$useState","useState","_React$useState2","_slicedToArray","mountSpan","useEffect","hub","getCurrentHub","scope","getScope","getTransaction"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/profiler.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Hub } from '@sentry/browser';\nimport { getCurrentHub } from '@sentry/browser';\nimport type { Span, Transaction } from '@sentry/types';\nimport { timestampInSeconds } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\n\nimport { REACT_MOUNT_OP, REACT_RENDER_OP, REACT_UPDATE_OP } from './constants';\n\nexport const UNKNOWN_COMPONENT = 'unknown';\n\nexport type ProfilerProps = {\n  // The name of the component being profiled.\n  name: string;\n  // If the Profiler is disabled. False by default. This is useful if you want to disable profilers\n  // in certain environments.\n  disabled?: boolean;\n  // If time component is on page should be displayed as spans. True by default.\n  includeRender?: boolean;\n  // If component updates should be displayed as spans. True by default.\n  includeUpdates?: boolean;\n  // Component that is being profiled.\n  children?: React.ReactNode;\n  // props given to component being profiled.\n  updateProps: { [key: string]: unknown };\n};\n\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\nclass Profiler extends React.Component<ProfilerProps> {\n  /**\n   * The span of the mount activity\n   * Made protected for the React Native SDK to access\n   */\n  protected _mountSpan: Span | undefined = undefined;\n  /**\n   * The span that represents the duration of time between shouldComponentUpdate and componentDidUpdate\n   */\n  protected _updateSpan: Span | undefined = undefined;\n\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  public static defaultProps: Partial<ProfilerProps> = {\n    disabled: false,\n    includeRender: true,\n    includeUpdates: true,\n  };\n\n  public constructor(props: ProfilerProps) {\n    super(props);\n    const { name, disabled = false } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    const activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      this._mountSpan = activeTransaction.startChild({\n        description: `<${name}>`,\n        op: REACT_MOUNT_OP,\n      });\n    }\n  }\n\n  // If a component mounted, we can finish the mount activity.\n  public componentDidMount(): void {\n    if (this._mountSpan) {\n      this._mountSpan.finish();\n    }\n  }\n\n  public shouldComponentUpdate({ updateProps, includeUpdates = true }: ProfilerProps): boolean {\n    // Only generate an update span if includeUpdates is true, if there is a valid mountSpan,\n    // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n    // We are just trying to give baseline clues for further investigation.\n    if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {\n      // See what props haved changed between the previous props, and the current props. This is\n      // set as data on the span. We just store the prop keys as the values could be potenially very large.\n      const changedProps = Object.keys(updateProps).filter(k => updateProps[k] !== this.props.updateProps[k]);\n      if (changedProps.length > 0) {\n        const now = timestampInSeconds();\n        this._updateSpan = this._mountSpan.startChild({\n          data: {\n            changedProps,\n          },\n          description: `<${this.props.name}>`,\n          op: REACT_UPDATE_OP,\n          startTimestamp: now,\n        });\n      }\n    }\n\n    return true;\n  }\n\n  public componentDidUpdate(): void {\n    if (this._updateSpan) {\n      this._updateSpan.finish();\n      this._updateSpan = undefined;\n    }\n  }\n\n  // If a component is unmounted, we can say it is no longer on the screen.\n  // This means we can finish the span representing the component render.\n  public componentWillUnmount(): void {\n    const { name, includeRender = true } = this.props;\n\n    if (this._mountSpan && includeRender) {\n      // If we were able to obtain the spanId of the mount activity, we should set the\n      // next activity as a child to the component mount activity.\n      this._mountSpan.startChild({\n        description: `<${name}>`,\n        endTimestamp: timestampInSeconds(),\n        op: REACT_RENDER_OP,\n        startTimestamp: this._mountSpan.endTimestamp,\n      });\n    }\n  }\n\n  public render(): React.ReactNode {\n    return this.props.children;\n  }\n}\n\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\nfunction withProfiler<P extends Record<string, any>>(\n  WrappedComponent: React.ComponentType<P>,\n  // We do not want to have `updateProps` given in options, it is instead filled through the HOC.\n  options?: Pick<Partial<ProfilerProps>, Exclude<keyof ProfilerProps, 'updateProps' | 'children'>>,\n): React.FC<P> {\n  const componentDisplayName =\n    (options && options.name) || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  const Wrapped: React.FC<P> = (props: P) => (\n    <Profiler {...options} name={componentDisplayName} updateProps={props}>\n      <WrappedComponent {...props} />\n    </Profiler>\n  );\n\n  Wrapped.displayName = `profiler(${componentDisplayName})`;\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\nfunction useProfiler(\n  name: string,\n  options: { disabled?: boolean; hasRenderSpan?: boolean } = {\n    disabled: false,\n    hasRenderSpan: true,\n  },\n): void {\n  const [mountSpan] = React.useState(() => {\n    if (options && options.disabled) {\n      return undefined;\n    }\n\n    const activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      return activeTransaction.startChild({\n        description: `<${name}>`,\n        op: REACT_MOUNT_OP,\n      });\n    }\n\n    return undefined;\n  });\n\n  React.useEffect(() => {\n    if (mountSpan) {\n      mountSpan.finish();\n    }\n\n    return (): void => {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: `<${name}>`,\n          endTimestamp: timestampInSeconds(),\n          op: REACT_RENDER_OP,\n          startTimestamp: mountSpan.endTimestamp,\n        });\n      }\n    };\n    // We only want this to run once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\n\nexport { withProfiler, Profiler, useProfiler };\n\n/** Grabs active transaction off scope */\nexport function getActiveTransaction<T extends Transaction>(hub: Hub = getCurrentHub()): T | undefined {\n  if (hub) {\n    const scope = hub.getScope();\n    if (scope) {\n      return scope.getTransaction() as T | undefined;\n    }\n  }\n\n  return undefined;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}