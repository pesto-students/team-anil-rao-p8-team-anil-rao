{"ast":null,"code":"import { getOriginalFunction } from '@sentry/utils';\nlet originalFunctionToString;\n\n/** Patch toString calls to return proper name for wrapped functions */\nclass FunctionToString {\n  constructor() {\n    FunctionToString.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'FunctionToString';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = FunctionToString.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce() {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // intrinsics (like Function.prototype) might be immutable in some environments\n    // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      Function.prototype.toString = function () {\n        const context = getOriginalFunction(this) || this;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return originalFunctionToString.apply(context, args);\n      };\n    } catch (e) {\n      // ignore errors here, just don't patch this\n    }\n  }\n}\nFunctionToString.__initStatic();\nexport { FunctionToString };","map":{"version":3,"names":["originalFunctionToString","FunctionToString","constructor","prototype","__init","call","__initStatic","id","name","setupOnce","Function","toString","context","getOriginalFunction","_len","arguments","length","args","Array","_key","apply","e"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/integrations/functiontostring.ts"],"sourcesContent":["import type { Integration, WrappedFunction } from '@sentry/types';\nimport { getOriginalFunction } from '@sentry/utils';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // intrinsics (like Function.prototype) might be immutable in some environments\n    // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      Function.prototype.toString = function (this: WrappedFunction, ...args: any[]): string {\n        const context = getOriginalFunction(this) || this;\n        return originalFunctionToString.apply(context, args);\n      };\n    } catch {\n      // ignore errors here, just don't patch this\n    }\n  }\n}\n"],"mappings":";AAGA,IAAAA,wBAAA;;AAEA;AACA,MAAAC,gBAAA;EAAAC,YAAA;IAAAD,gBAAA,CAAAE,SAAA,CAAAC,MAAA,CAAAC,IAAA;EAAA;EACA;AACA;AACA;EACA,OAAAC,aAAA;IAAA,KAAAC,EAAA;EAAA;;EAEA;AACA;AACA;EACAH,OAAA;IAAA,KAAAI,IAAA,GAAAP,gBAAA,CAAAM,EAAA;EAAA;;EAEA;AACA;AACA;EACAE,UAAA;IACA;IACAT,wBAAA,GAAAU,QAAA,CAAAP,SAAA,CAAAQ,QAAA;;IAEA;IACA;IACA;MACA;MACAD,QAAA,CAAAP,SAAA,CAAAQ,QAAA;QACA,MAAAC,OAAA,GAAAC,mBAAA;QAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EADAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;UAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;QAAA;QAEA,OAAAnB,wBAAA,CAAAoB,KAAA,CAAAR,OAAA,EAAAK,IAAA;MACA;IACA,SAAAI,CAAA;MACA;IAAA;EAEA;AACA;AAAApB,gBAAA,CAAAK,YAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}