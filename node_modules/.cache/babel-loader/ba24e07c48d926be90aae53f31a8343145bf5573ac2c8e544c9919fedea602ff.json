{"ast":null,"code":"import _classCallCheck from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BaseClient, SDK_VERSION } from '@sentry/core';\nimport { getSDKSource, logger, createClientReportEnvelope, dsnToString } from '@sentry/utils';\nimport { eventFromException as _eventFromException, eventFromMessage as _eventFromMessage } from './eventbuilder.js';\nimport { WINDOW } from './helpers.js';\nimport { BREADCRUMB_INTEGRATION_ID } from './integrations/breadcrumbs.js';\nimport { createUserFeedbackEnvelope } from './userfeedback.js';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nvar BrowserClient = /*#__PURE__*/function (_BaseClient) {\n  _inherits(BrowserClient, _BaseClient);\n  var _super = _createSuper(BrowserClient);\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  function BrowserClient(options) {\n    var _this;\n    _classCallCheck(this, BrowserClient);\n    var sdkSource = WINDOW.SENTRY_SDK_SOURCE || getSDKSource();\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [{\n        name: \"\".concat(sdkSource, \":@sentry/browser\"),\n        version: SDK_VERSION\n      }],\n      version: SDK_VERSION\n    };\n    _this = _super.call(this, options);\n    if (options.sendClientReports && WINDOW.document) {\n      WINDOW.document.addEventListener('visibilitychange', function () {\n        if (WINDOW.document.visibilityState === 'hidden') {\n          _this._flushOutcomes();\n        }\n      });\n    }\n    return _this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(BrowserClient, [{\n    key: \"eventFromException\",\n    value: function eventFromException(exception, hint) {\n      return _eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"eventFromMessage\",\n    value: function eventFromMessage(message) {\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';\n      var hint = arguments.length > 2 ? arguments[2] : undefined;\n      return _eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"sendEvent\",\n    value: function sendEvent(event, hint) {\n      // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and\n      // activated its `sentry` option.\n      // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in\n      // bundles, if it is not used by the SDK.\n      // This all sadly is a bit ugly, but we currently don't have a \"pre-send\" hook on the integrations so we do it this\n      // way for now.\n      var breadcrumbIntegration = this.getIntegrationById(BREADCRUMB_INTEGRATION_ID);\n      // We check for definedness of `addSentryBreadcrumb` in case users provided their own integration with id\n      // \"Breadcrumbs\" that does not have this function.\n      if (breadcrumbIntegration && breadcrumbIntegration.addSentryBreadcrumb) {\n        breadcrumbIntegration.addSentryBreadcrumb(event);\n      }\n      _get(_getPrototypeOf(BrowserClient.prototype), \"sendEvent\", this).call(this, event, hint);\n    }\n\n    /**\n     * Sends user feedback to Sentry.\n     */\n  }, {\n    key: \"captureUserFeedback\",\n    value: function captureUserFeedback(feedback) {\n      if (!this._isEnabled()) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('SDK not enabled, will not capture user feedback.');\n        return;\n      }\n      var envelope = createUserFeedbackEnvelope(feedback, {\n        metadata: this.getSdkMetadata(),\n        dsn: this.getDsn(),\n        tunnel: this.getOptions().tunnel\n      });\n      void this._sendEnvelope(envelope);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"_prepareEvent\",\n    value: function _prepareEvent(event, hint, scope) {\n      event.platform = event.platform || 'javascript';\n      return _get(_getPrototypeOf(BrowserClient.prototype), \"_prepareEvent\", this).call(this, event, hint, scope);\n    }\n\n    /**\n     * Sends client reports as an envelope.\n     */\n  }, {\n    key: \"_flushOutcomes\",\n    value: function _flushOutcomes() {\n      var outcomes = this._clearOutcomes();\n      if (outcomes.length === 0) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('No outcomes to send');\n        return;\n      }\n      if (!this._dsn) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('No dsn provided, will not send outcomes');\n        return;\n      }\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Sending outcomes:', outcomes);\n      var envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n      void this._sendEnvelope(envelope);\n    }\n  }]);\n  return BrowserClient;\n}(BaseClient);\nexport { BrowserClient };","map":{"version":3,"names":["BrowserClient","_BaseClient","_inherits","_super","_createSuper","options","_this","_classCallCheck","sdkSource","WINDOW","SENTRY_SDK_SOURCE","getSDKSource","_metadata","sdk","name","packages","concat","version","SDK_VERSION","call","sendClientReports","document","addEventListener","visibilityState","_flushOutcomes","_createClass","key","value","eventFromException","exception","hint","_options","stackParser","attachStacktrace","eventFromMessage","message","level","arguments","length","undefined","sendEvent","event","breadcrumbIntegration","getIntegrationById","BREADCRUMB_INTEGRATION_ID","addSentryBreadcrumb","_get","_getPrototypeOf","prototype","captureUserFeedback","feedback","_isEnabled","__SENTRY_DEBUG__","logger","warn","envelope","createUserFeedbackEnvelope","metadata","getSdkMetadata","dsn","getDsn","tunnel","getOptions","_sendEnvelope","_prepareEvent","scope","platform","outcomes","_clearOutcomes","log","_dsn","createClientReportEnvelope","dsnToString","BaseClient"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/src/client.ts"],"sourcesContent":["import type { Scope } from '@sentry/core';\nimport { BaseClient, SDK_VERSION } from '@sentry/core';\nimport type {\n  BrowserClientReplayOptions,\n  ClientOptions,\n  Event,\n  EventHint,\n  Options,\n  Severity,\n  SeverityLevel,\n  UserFeedback,\n} from '@sentry/types';\nimport { createClientReportEnvelope, dsnToString, getSDKSource, logger } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { WINDOW } from './helpers';\nimport type { Breadcrumbs } from './integrations';\nimport { BREADCRUMB_INTEGRATION_ID } from './integrations/breadcrumbs';\nimport type { BrowserTransportOptions } from './transports/types';\nimport { createUserFeedbackEnvelope } from './userfeedback';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\nexport type BrowserOptions = Options<BrowserTransportOptions> & BrowserClientReplayOptions;\n\n/**\n * Configuration options for the Sentry Browser SDK Client class\n * @see BrowserClient for more information.\n */\nexport type BrowserClientOptions = ClientOptions<BrowserTransportOptions>;\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserClientOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserClientOptions) {\n    const sdkSource = WINDOW.SENTRY_SDK_SOURCE || getSDKSource();\n\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: `${sdkSource}:@sentry/browser`,\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(options);\n\n    if (options.sendClientReports && WINDOW.document) {\n      WINDOW.document.addEventListener('visibilitychange', () => {\n        if (WINDOW.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint?: EventHint): void {\n    // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and\n    // activated its `sentry` option.\n    // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in\n    // bundles, if it is not used by the SDK.\n    // This all sadly is a bit ugly, but we currently don't have a \"pre-send\" hook on the integrations so we do it this\n    // way for now.\n    const breadcrumbIntegration = this.getIntegrationById(BREADCRUMB_INTEGRATION_ID) as Breadcrumbs | undefined;\n    // We check for definedness of `addSentryBreadcrumb` in case users provided their own integration with id\n    // \"Breadcrumbs\" that does not have this function.\n    if (breadcrumbIntegration && breadcrumbIntegration.addSentryBreadcrumb) {\n      breadcrumbIntegration.addSentryBreadcrumb(event);\n    }\n\n    super.sendEvent(event, hint);\n  }\n\n  /**\n   * Sends user feedback to Sentry.\n   */\n  public captureUserFeedback(feedback: UserFeedback): void {\n    if (!this._isEnabled()) {\n      __DEBUG_BUILD__ && logger.warn('SDK not enabled, will not capture user feedback.');\n      return;\n    }\n\n    const envelope = createUserFeedbackEnvelope(feedback, {\n      metadata: this.getSdkMetadata(),\n      dsn: this.getDsn(),\n      tunnel: this.getOptions().tunnel,\n    });\n    void this._sendEnvelope(envelope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  private _flushOutcomes(): void {\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      __DEBUG_BUILD__ && logger.log('No outcomes to send');\n      return;\n    }\n\n    if (!this._dsn) {\n      __DEBUG_BUILD__ && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('Sending outcomes:', outcomes);\n\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n    void this._sendEnvelope(envelope);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}