{"ast":null,"code":"import _classCallCheck from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _objectSpread from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { TRACING_DEFAULTS, addTracingExtensions, extractTraceparentData, startIdleTransaction, getActiveTransaction } from '@sentry/core';\nimport { logger, baggageHeaderToDynamicSamplingContext, getDomElement } from '@sentry/utils';\nimport { registerBackgroundTabDetection } from './backgroundtab.js';\nimport { startTrackingWebVitals, startTrackingLongTasks, startTrackingInteractions, addPerformanceEntries } from './metrics/index.js';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request.js';\nimport { instrumentRoutingWithDefaults } from './router.js';\nimport { WINDOW } from './types.js';\nvar BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\n\nvar DEFAULT_BROWSER_TRACING_OPTIONS = _objectSpread(_objectSpread({}, TRACING_DEFAULTS), {}, {\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  enableLongTask: true\n}, defaultRequestInstrumentationOptions);\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nvar BrowserTracing = /*#__PURE__*/function () {\n  function BrowserTracing(_options) {\n    _classCallCheck(this, BrowserTracing);\n    BrowserTracing.prototype.__init.call(this);\n    BrowserTracing.prototype.__init2.call(this);\n    addTracingExtensions();\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      this._hasSetTracePropagationTargets = !!(_options && (\n      // eslint-disable-next-line deprecation/deprecation\n      _options.tracePropagationTargets || _options.tracingOrigins));\n    }\n    this.options = _objectSpread(_objectSpread({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options);\n\n    // Special case: enableLongTask can be set in _experiments\n    // TODO (v8): Remove this in v8\n    if (this.options._experiments.enableLongTask !== undefined) {\n      this.options.enableLongTask = this.options._experiments.enableLongTask;\n    }\n\n    // TODO (v8): remove this block after tracingOrigins is removed\n    // Set tracePropagationTargets to tracingOrigins if specified by the user\n    // In case both are specified, tracePropagationTargets takes precedence\n    // eslint-disable-next-line deprecation/deprecation\n    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.options.tracePropagationTargets = _options.tracingOrigins;\n    }\n    this._collectWebVitals = startTrackingWebVitals();\n    if (this.options.enableLongTask) {\n      startTrackingLongTasks();\n    }\n    if (this.options._experiments.enableInteractions) {\n      startTrackingInteractions();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(BrowserTracing, [{\n    key: \"__init\",\n    value:\n    // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n    // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n    // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n    // integrations.\n\n    /** Browser Tracing integration options */\n\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = BROWSER_TRACING_INTEGRATION_ID;\n    }\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._hasSetTracePropagationTargets = false;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      var _this = this;\n      this._getCurrentHub = getCurrentHub;\n      var hub = getCurrentHub();\n      var client = hub.getClient();\n      var clientOptions = client && client.getOptions();\n      var _this$options = this.options,\n        instrumentRouting = _this$options.routingInstrumentation,\n        startTransactionOnLocationChange = _this$options.startTransactionOnLocationChange,\n        startTransactionOnPageLoad = _this$options.startTransactionOnPageLoad,\n        markBackgroundTransactions = _this$options.markBackgroundTransactions,\n        traceFetch = _this$options.traceFetch,\n        traceXHR = _this$options.traceXHR,\n        shouldCreateSpanForRequest = _this$options.shouldCreateSpanForRequest,\n        _experiments = _this$options._experiments;\n      var clientOptionsTracePropagationTargets = clientOptions && clientOptions.tracePropagationTargets;\n      // There are three ways to configure tracePropagationTargets:\n      // 1. via top level client option `tracePropagationTargets`\n      // 2. via BrowserTracing option `tracePropagationTargets`\n      // 3. via BrowserTracing option `tracingOrigins` (deprecated)\n      //\n      // To avoid confusion, favour top level client option `tracePropagationTargets`, and fallback to\n      // BrowserTracing option `tracePropagationTargets` and then `tracingOrigins` (deprecated).\n      // This is done as it minimizes bundle size (we don't have to have undefined checks).\n      //\n      // If both 1 and either one of 2 or 3 are set (from above), we log out a warning.\n      var tracePropagationTargets = clientOptionsTracePropagationTargets || this.options.tracePropagationTargets;\n      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && this._hasSetTracePropagationTargets && clientOptionsTracePropagationTargets) {\n        logger.warn('[Tracing] The `tracePropagationTargets` option was set in the BrowserTracing integration and top level `Sentry.init`. The top level `Sentry.init` value is being used.');\n      }\n      instrumentRouting(function (context) {\n        var transaction = _this._createRouteTransaction(context);\n        _this.options._experiments.onStartRouteTransaction && _this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);\n        return transaction;\n      }, startTransactionOnPageLoad, startTransactionOnLocationChange);\n      if (markBackgroundTransactions) {\n        registerBackgroundTabDetection();\n      }\n      if (_experiments.enableInteractions) {\n        this._registerInteractionListener();\n      }\n      instrumentOutgoingRequests({\n        traceFetch: traceFetch,\n        traceXHR: traceXHR,\n        tracePropagationTargets: tracePropagationTargets,\n        shouldCreateSpanForRequest: shouldCreateSpanForRequest,\n        _experiments: {\n          enableHTTPTimings: _experiments.enableHTTPTimings\n        }\n      });\n    }\n\n    /** Create routing idle transaction. */\n  }, {\n    key: \"_createRouteTransaction\",\n    value: function _createRouteTransaction(context) {\n      var _this2 = this;\n      if (!this._getCurrentHub) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"[Tracing] Did not create \".concat(context.op, \" transaction because _getCurrentHub is invalid.\"));\n        return undefined;\n      }\n      var _this$options2 = this.options,\n        beforeNavigate = _this$options2.beforeNavigate,\n        idleTimeout = _this$options2.idleTimeout,\n        finalTimeout = _this$options2.finalTimeout,\n        heartbeatInterval = _this$options2.heartbeatInterval;\n      var isPageloadTransaction = context.op === 'pageload';\n      var sentryTraceMetaTagValue = isPageloadTransaction ? getMetaContent('sentry-trace') : null;\n      var baggageMetaTagValue = isPageloadTransaction ? getMetaContent('baggage') : null;\n      var traceParentData = sentryTraceMetaTagValue ? extractTraceparentData(sentryTraceMetaTagValue) : undefined;\n      var dynamicSamplingContext = baggageMetaTagValue ? baggageHeaderToDynamicSamplingContext(baggageMetaTagValue) : undefined;\n      var expandedContext = _objectSpread(_objectSpread(_objectSpread({}, context), traceParentData), {}, {\n        metadata: _objectSpread(_objectSpread({}, context.metadata), {}, {\n          dynamicSamplingContext: traceParentData && !dynamicSamplingContext ? {} : dynamicSamplingContext\n        }),\n        trimEnd: true\n      });\n      var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n      // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n      // from being sent to Sentry).\n      var finalContext = modifiedContext === undefined ? _objectSpread(_objectSpread({}, expandedContext), {}, {\n        sampled: false\n      }) : modifiedContext;\n\n      // If `beforeNavigate` set a custom name, record that fact\n      finalContext.metadata = finalContext.name !== expandedContext.name ? _objectSpread(_objectSpread({}, finalContext.metadata), {}, {\n        source: 'custom'\n      }) : finalContext.metadata;\n      this._latestRouteName = finalContext.name;\n      this._latestRouteSource = finalContext.metadata && finalContext.metadata.source;\n      if (finalContext.sampled === false) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(\"[Tracing] Will not send \".concat(finalContext.op, \" transaction because of beforeNavigate.\"));\n      }\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(\"[Tracing] Starting \".concat(finalContext.op, \" transaction on scope\"));\n      var hub = this._getCurrentHub();\n      var location = WINDOW.location;\n      var idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, finalTimeout, true, {\n        location: location\n      },\n      // for use in the tracesSampler\n      heartbeatInterval);\n      idleTransaction.registerBeforeFinishCallback(function (transaction) {\n        _this2._collectWebVitals();\n        addPerformanceEntries(transaction);\n      });\n      return idleTransaction;\n    }\n\n    /** Start listener for interaction transactions */\n  }, {\n    key: \"_registerInteractionListener\",\n    value: function _registerInteractionListener() {\n      var _this3 = this;\n      var inflightInteractionTransaction;\n      var registerInteractionTransaction = function registerInteractionTransaction() {\n        var _this3$options = _this3.options,\n          idleTimeout = _this3$options.idleTimeout,\n          finalTimeout = _this3$options.finalTimeout,\n          heartbeatInterval = _this3$options.heartbeatInterval;\n        var op = 'ui.action.click';\n        var currentTransaction = getActiveTransaction();\n        if (currentTransaction && currentTransaction.op && ['navigation', 'pageload'].includes(currentTransaction.op)) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"[Tracing] Did not create \".concat(op, \" transaction because a pageload or navigation transaction is in progress.\"));\n          return undefined;\n        }\n        if (inflightInteractionTransaction) {\n          inflightInteractionTransaction.setFinishReason('interactionInterrupted');\n          inflightInteractionTransaction.finish();\n          inflightInteractionTransaction = undefined;\n        }\n        if (!_this3._getCurrentHub) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"[Tracing] Did not create \".concat(op, \" transaction because _getCurrentHub is invalid.\"));\n          return undefined;\n        }\n        if (!_this3._latestRouteName) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"[Tracing] Did not create \".concat(op, \" transaction because _latestRouteName is missing.\"));\n          return undefined;\n        }\n        var hub = _this3._getCurrentHub();\n        var location = WINDOW.location;\n        var context = {\n          name: _this3._latestRouteName,\n          op: op,\n          trimEnd: true,\n          metadata: {\n            source: _this3._latestRouteSource || 'url'\n          }\n        };\n        inflightInteractionTransaction = startIdleTransaction(hub, context, idleTimeout, finalTimeout, true, {\n          location: location\n        },\n        // for use in the tracesSampler\n        heartbeatInterval);\n      };\n      ['click'].forEach(function (type) {\n        addEventListener(type, registerInteractionTransaction, {\n          once: false,\n          capture: true\n        });\n      });\n    }\n  }]);\n  return BrowserTracing;\n}();\n/** Returns the value of a meta tag */\nfunction getMetaContent(metaName) {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  var metaTag = getDomElement(\"meta[name=\".concat(metaName, \"]\"));\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : null;\n}\nexport { BROWSER_TRACING_INTEGRATION_ID, BrowserTracing, getMetaContent };","map":{"version":3,"names":["BROWSER_TRACING_INTEGRATION_ID","DEFAULT_BROWSER_TRACING_OPTIONS","_objectSpread","TRACING_DEFAULTS","markBackgroundTransactions","routingInstrumentation","instrumentRoutingWithDefaults","startTransactionOnLocationChange","startTransactionOnPageLoad","enableLongTask","defaultRequestInstrumentationOptions","BrowserTracing","_options","_classCallCheck","prototype","__init","call","__init2","addTracingExtensions","__SENTRY_DEBUG__","_hasSetTracePropagationTargets","tracePropagationTargets","tracingOrigins","options","_experiments","undefined","_collectWebVitals","startTrackingWebVitals","startTrackingLongTasks","enableInteractions","startTrackingInteractions","_createClass","key","value","name","setupOnce","_","getCurrentHub","_this","_getCurrentHub","hub","client","getClient","clientOptions","getOptions","_this$options","instrumentRouting","traceFetch","traceXHR","shouldCreateSpanForRequest","clientOptionsTracePropagationTargets","logger","warn","context","transaction","_createRouteTransaction","onStartRouteTransaction","registerBackgroundTabDetection","_registerInteractionListener","instrumentOutgoingRequests","enableHTTPTimings","_this2","concat","op","_this$options2","beforeNavigate","idleTimeout","finalTimeout","heartbeatInterval","isPageloadTransaction","sentryTraceMetaTagValue","getMetaContent","baggageMetaTagValue","traceParentData","extractTraceparentData","dynamicSamplingContext","baggageHeaderToDynamicSamplingContext","expandedContext","metadata","trimEnd","modifiedContext","finalContext","sampled","source","_latestRouteName","_latestRouteSource","log","location","WINDOW","idleTransaction","startIdleTransaction","registerBeforeFinishCallback","addPerformanceEntries","_this3","inflightInteractionTransaction","registerInteractionTransaction","_this3$options","currentTransaction","getActiveTransaction","includes","setFinishReason","finish","forEach","type","addEventListener","once","capture","metaName","metaTag","getDomElement","getAttribute"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/browser/browsertracing.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type { Hub, IdleTransaction } from '@sentry/core';\nimport {\n  addTracingExtensions,\n  extractTraceparentData,\n  getActiveTransaction,\n  startIdleTransaction,\n  TRACING_DEFAULTS,\n} from '@sentry/core';\nimport type { EventProcessor, Integration, Transaction, TransactionContext, TransactionSource } from '@sentry/types';\nimport { baggageHeaderToDynamicSamplingContext, getDomElement, logger } from '@sentry/utils';\n\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport {\n  addPerformanceEntries,\n  startTrackingInteractions,\n  startTrackingLongTasks,\n  startTrackingWebVitals,\n} from './metrics';\nimport type { RequestInstrumentationOptions } from './request';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request';\nimport { instrumentRoutingWithDefaults } from './router';\nimport { WINDOW } from './types';\n\nexport const BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished during an idle state. An idle state is defined\n   * by a moment where there are no in-progress spans.\n   *\n   * The transaction will use the end timestamp of the last finished span as the endtime for the transaction.\n   * If there are still active spans when this the `idleTimeout` is set, the `idleTimeout` will get reset.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * The max duration for a transaction. If a transaction duration hits the `finalTimeout` value, it\n   * will be finished.\n   * Time is in ms.\n   *\n   * Default: 30000\n   */\n  finalTimeout: number;\n\n  /**\n   * The heartbeat interval. If no new spans are started or open spans are finished within 3 heartbeats,\n   * the transaction will be finished.\n   * Time is in ms.\n   *\n   * Default: 5000\n   */\n  heartbeatInterval: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * If true, Sentry will capture long tasks and add them to the corresponding transaction.\n   *\n   * Default: true\n   */\n  enableLongTask: boolean;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{\n    /**\n     * @deprecated This property no longer has any effect and will be removed in v8.\n     */\n    _reportAllChanges: boolean;\n  }>;\n\n  /**\n   * _experiments allows the user to send options to define how this integration works.\n   * Note that the `enableLongTask` options is deprecated in favor of the option at the top level, and will be removed in v8.\n   *\n   * TODO (v8): Remove enableLongTask\n   *\n   * Default: undefined\n   */\n  _experiments: Partial<{\n    enableLongTask: boolean;\n    enableInteractions: boolean;\n    enableHTTPTimings: boolean;\n    onStartRouteTransaction: (t: Transaction | undefined, ctx: TransactionContext, getCurrentHub: () => Hub) => void;\n  }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(this: void, context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    this: void,\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS: BrowserTracingOptions = {\n  ...TRACING_DEFAULTS,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  enableLongTask: true,\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n  // integrations.\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BROWSER_TRACING_INTEGRATION_ID;\n\n  private _getCurrentHub?: () => Hub;\n\n  private _latestRouteName?: string;\n  private _latestRouteSource?: TransactionSource;\n\n  private _collectWebVitals: () => void;\n\n  private _hasSetTracePropagationTargets: boolean = false;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    addTracingExtensions();\n\n    if (__DEBUG_BUILD__) {\n      this._hasSetTracePropagationTargets = !!(\n        _options &&\n        // eslint-disable-next-line deprecation/deprecation\n        (_options.tracePropagationTargets || _options.tracingOrigins)\n      );\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n    };\n\n    // Special case: enableLongTask can be set in _experiments\n    // TODO (v8): Remove this in v8\n    if (this.options._experiments.enableLongTask !== undefined) {\n      this.options.enableLongTask = this.options._experiments.enableLongTask;\n    }\n\n    // TODO (v8): remove this block after tracingOrigins is removed\n    // Set tracePropagationTargets to tracingOrigins if specified by the user\n    // In case both are specified, tracePropagationTargets takes precedence\n    // eslint-disable-next-line deprecation/deprecation\n    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.options.tracePropagationTargets = _options.tracingOrigins;\n    }\n\n    this._collectWebVitals = startTrackingWebVitals();\n    if (this.options.enableLongTask) {\n      startTrackingLongTasks();\n    }\n    if (this.options._experiments.enableInteractions) {\n      startTrackingInteractions();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n    const hub = getCurrentHub();\n    const client = hub.getClient();\n    const clientOptions = client && client.getOptions();\n\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      shouldCreateSpanForRequest,\n      _experiments,\n    } = this.options;\n\n    const clientOptionsTracePropagationTargets = clientOptions && clientOptions.tracePropagationTargets;\n    // There are three ways to configure tracePropagationTargets:\n    // 1. via top level client option `tracePropagationTargets`\n    // 2. via BrowserTracing option `tracePropagationTargets`\n    // 3. via BrowserTracing option `tracingOrigins` (deprecated)\n    //\n    // To avoid confusion, favour top level client option `tracePropagationTargets`, and fallback to\n    // BrowserTracing option `tracePropagationTargets` and then `tracingOrigins` (deprecated).\n    // This is done as it minimizes bundle size (we don't have to have undefined checks).\n    //\n    // If both 1 and either one of 2 or 3 are set (from above), we log out a warning.\n    const tracePropagationTargets = clientOptionsTracePropagationTargets || this.options.tracePropagationTargets;\n    if (__DEBUG_BUILD__ && this._hasSetTracePropagationTargets && clientOptionsTracePropagationTargets) {\n      logger.warn(\n        '[Tracing] The `tracePropagationTargets` option was set in the BrowserTracing integration and top level `Sentry.init`. The top level `Sentry.init` value is being used.',\n      );\n    }\n\n    instrumentRouting(\n      (context: TransactionContext) => {\n        const transaction = this._createRouteTransaction(context);\n\n        this.options._experiments.onStartRouteTransaction &&\n          this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);\n\n        return transaction;\n      },\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    if (_experiments.enableInteractions) {\n      this._registerInteractionListener();\n    }\n\n    instrumentOutgoingRequests({\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest,\n      _experiments: {\n        enableHTTPTimings: _experiments.enableHTTPTimings,\n      },\n    });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      __DEBUG_BUILD__ &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    const { beforeNavigate, idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n\n    const isPageloadTransaction = context.op === 'pageload';\n\n    const sentryTraceMetaTagValue = isPageloadTransaction ? getMetaContent('sentry-trace') : null;\n    const baggageMetaTagValue = isPageloadTransaction ? getMetaContent('baggage') : null;\n\n    const traceParentData = sentryTraceMetaTagValue ? extractTraceparentData(sentryTraceMetaTagValue) : undefined;\n    const dynamicSamplingContext = baggageMetaTagValue\n      ? baggageHeaderToDynamicSamplingContext(baggageMetaTagValue)\n      : undefined;\n\n    const expandedContext: TransactionContext = {\n      ...context,\n      ...traceParentData,\n      metadata: {\n        ...context.metadata,\n        dynamicSamplingContext: traceParentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n      },\n      trimEnd: true,\n    };\n\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    // If `beforeNavigate` set a custom name, record that fact\n    finalContext.metadata =\n      finalContext.name !== expandedContext.name\n        ? { ...finalContext.metadata, source: 'custom' }\n        : finalContext.metadata;\n\n    this._latestRouteName = finalContext.name;\n    this._latestRouteSource = finalContext.metadata && finalContext.metadata.source;\n\n    if (finalContext.sampled === false) {\n      __DEBUG_BUILD__ &&\n        logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const hub = this._getCurrentHub();\n    const { location } = WINDOW;\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      finalTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n      heartbeatInterval,\n    );\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      this._collectWebVitals();\n      addPerformanceEntries(transaction);\n    });\n\n    return idleTransaction as Transaction;\n  }\n\n  /** Start listener for interaction transactions */\n  private _registerInteractionListener(): void {\n    let inflightInteractionTransaction: IdleTransaction | undefined;\n    const registerInteractionTransaction = (): void => {\n      const { idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n      const op = 'ui.action.click';\n\n      const currentTransaction = getActiveTransaction();\n      if (currentTransaction && currentTransaction.op && ['navigation', 'pageload'].includes(currentTransaction.op)) {\n        __DEBUG_BUILD__ &&\n          logger.warn(\n            `[Tracing] Did not create ${op} transaction because a pageload or navigation transaction is in progress.`,\n          );\n        return undefined;\n      }\n\n      if (inflightInteractionTransaction) {\n        inflightInteractionTransaction.setFinishReason('interactionInterrupted');\n        inflightInteractionTransaction.finish();\n        inflightInteractionTransaction = undefined;\n      }\n\n      if (!this._getCurrentHub) {\n        __DEBUG_BUILD__ && logger.warn(`[Tracing] Did not create ${op} transaction because _getCurrentHub is invalid.`);\n        return undefined;\n      }\n\n      if (!this._latestRouteName) {\n        __DEBUG_BUILD__ &&\n          logger.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n        return undefined;\n      }\n\n      const hub = this._getCurrentHub();\n      const { location } = WINDOW;\n\n      const context: TransactionContext = {\n        name: this._latestRouteName,\n        op,\n        trimEnd: true,\n        metadata: {\n          source: this._latestRouteSource || 'url',\n        },\n      };\n\n      inflightInteractionTransaction = startIdleTransaction(\n        hub,\n        context,\n        idleTimeout,\n        finalTimeout,\n        true,\n        { location }, // for use in the tracesSampler\n        heartbeatInterval,\n      );\n    };\n\n    ['click'].forEach(type => {\n      addEventListener(type, registerInteractionTransaction, { once: false, capture: true });\n    });\n  }\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  const metaTag = getDomElement(`meta[name=${metaName}]`);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}