{"ast":null,"code":"import _objectSpread from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { configureScope, getCurrentHub } from '@sentry/browser';\nimport { addNonEnumerableProperty } from '@sentry/utils';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nvar ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nvar ACTION_BREADCRUMB_TYPE = 'info';\nvar defaultOptions = {\n  actionTransformer: function actionTransformer(action) {\n    return action;\n  },\n  stateTransformer: function stateTransformer(state) {\n    return state || null;\n  }\n};\n\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\nfunction createReduxEnhancer(enhancerOptions) {\n  // Note: We return an any type as to not have type conflicts.\n  var options = _objectSpread(_objectSpread({}, defaultOptions), enhancerOptions);\n  return function (next) {\n    return function (reducer, initialState) {\n      var sentryReducer = function sentryReducer(state, action) {\n        var newState = reducer(state, action);\n        configureScope(function (scope) {\n          /* Action breadcrumbs */\n          var transformedAction = options.actionTransformer(action);\n          if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n            scope.addBreadcrumb({\n              category: ACTION_BREADCRUMB_CATEGORY,\n              data: transformedAction,\n              type: ACTION_BREADCRUMB_TYPE\n            });\n          }\n\n          /* Set latest state to scope */\n          var transformedState = options.stateTransformer(newState);\n          if (typeof transformedState !== 'undefined' && transformedState !== null) {\n            var client = getCurrentHub().getClient();\n            var _options = client && client.getOptions();\n            var normalizationDepth = _options && _options.normalizeDepth || 3; // default state normalization depth to 3\n\n            // Set the normalization depth of the redux state to the configured `normalizeDepth` option or a sane number as a fallback\n            var newStateContext = {\n              state: {\n                type: 'redux',\n                value: transformedState\n              }\n            };\n            addNonEnumerableProperty(newStateContext, '__sentry_override_normalization_depth__', 3 +\n            // 3 layers for `state.value.transformedState`\n            normalizationDepth // rest for the actual state\n            );\n\n            scope.setContext('state', newStateContext);\n          } else {\n            scope.setContext('state', null);\n          }\n\n          /* Allow user to configure scope with latest state */\n          var configureScopeWithState = options.configureScopeWithState;\n          if (typeof configureScopeWithState === 'function') {\n            configureScopeWithState(scope, newState);\n          }\n        });\n        return newState;\n      };\n      return next(sentryReducer, initialState);\n    };\n  };\n}\nexport { createReduxEnhancer };","map":{"version":3,"names":["ACTION_BREADCRUMB_CATEGORY","ACTION_BREADCRUMB_TYPE","defaultOptions","actionTransformer","action","stateTransformer","state","createReduxEnhancer","enhancerOptions","options","_objectSpread","next","reducer","initialState","sentryReducer","newState","configureScope","scope","transformedAction","addBreadcrumb","category","data","type","transformedState","client","getCurrentHub","getClient","getOptions","normalizationDepth","normalizeDepth","newStateContext","value","addNonEnumerableProperty","setContext","configureScopeWithState"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/redux.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { configureScope, getCurrentHub } from '@sentry/browser';\nimport type { Scope } from '@sentry/types';\nimport { addNonEnumerableProperty } from '@sentry/utils';\n\ninterface Action<T = any> {\n  type: T;\n}\n\ninterface AnyAction extends Action {\n  [extraProps: string]: any;\n}\n\ntype Reducer<S = any, A extends Action = AnyAction> = (state: S | undefined, action: A) => S;\n\ntype Dispatch<A extends Action = AnyAction> = <T extends A>(action: T, ...extraArgs: any[]) => T;\n\ntype ExtendState<State, Extension> = [Extension] extends [never] ? State : State & Extension;\n\ntype Unsubscribe = () => void;\n\ninterface Store<S = any, A extends Action = AnyAction, StateExt = never, Ext = Record<string, unknown>> {\n  dispatch: Dispatch<A>;\n  getState(): S;\n  subscribe(listener: () => void): Unsubscribe;\n  replaceReducer<NewState, NewActions extends Action>(\n    nextReducer: Reducer<NewState, NewActions>,\n  ): Store<ExtendState<NewState, StateExt>, NewActions, StateExt, Ext> & Ext;\n}\n\ndeclare const $CombinedState: unique symbol;\n\ntype CombinedState<S> = { readonly [$CombinedState]?: undefined } & S;\n\ntype PreloadedState<S> = Required<S> extends {\n  [$CombinedState]: undefined;\n}\n  ? S extends CombinedState<infer S1>\n    ? { [K in keyof S1]?: S1[K] extends Record<string, unknown> ? PreloadedState<S1[K]> : S1[K] }\n    : never\n  : { [K in keyof S]: S[K] extends string | number | boolean | symbol ? S[K] : PreloadedState<S[K]> };\n\ntype StoreEnhancerStoreCreator<Ext = Record<string, unknown>, StateExt = never> = <\n  S = any,\n  A extends Action = AnyAction,\n>(\n  reducer: Reducer<S, A>,\n  preloadedState?: PreloadedState<S>,\n) => Store<ExtendState<S, StateExt>, A, StateExt, Ext> & Ext;\n\nexport interface SentryEnhancerOptions<S = any> {\n  /**\n   * Transforms the state before attaching it to an event.\n   * Use this to remove any private data before sending it to Sentry.\n   * Return null to not attach the state.\n   */\n  stateTransformer(state: S | undefined): (S & any) | null;\n  /**\n   * Transforms the action before sending it as a breadcrumb.\n   * Use this to remove any private data before sending it to Sentry.\n   * Return null to not send the breadcrumb.\n   */\n  actionTransformer(action: AnyAction): AnyAction | null;\n  /**\n   * Called on every state update, configure the Sentry Scope with the redux state.\n   */\n  configureScopeWithState?(scope: Scope, state: S): void;\n}\n\nconst ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nconst ACTION_BREADCRUMB_TYPE = 'info';\n\nconst defaultOptions: SentryEnhancerOptions = {\n  actionTransformer: action => action,\n  stateTransformer: state => state || null,\n};\n\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\nfunction createReduxEnhancer(enhancerOptions?: Partial<SentryEnhancerOptions>): any {\n  // Note: We return an any type as to not have type conflicts.\n  const options = {\n    ...defaultOptions,\n    ...enhancerOptions,\n  };\n\n  return (next: StoreEnhancerStoreCreator): StoreEnhancerStoreCreator =>\n    <S = any, A extends Action = AnyAction>(reducer: Reducer<S, A>, initialState?: PreloadedState<S>) => {\n      const sentryReducer: Reducer<S, A> = (state, action): S => {\n        const newState = reducer(state, action);\n\n        configureScope(scope => {\n          /* Action breadcrumbs */\n          const transformedAction = options.actionTransformer(action);\n          if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n            scope.addBreadcrumb({\n              category: ACTION_BREADCRUMB_CATEGORY,\n              data: transformedAction,\n              type: ACTION_BREADCRUMB_TYPE,\n            });\n          }\n\n          /* Set latest state to scope */\n          const transformedState = options.stateTransformer(newState);\n          if (typeof transformedState !== 'undefined' && transformedState !== null) {\n            const client = getCurrentHub().getClient();\n            const options = client && client.getOptions();\n            const normalizationDepth = (options && options.normalizeDepth) || 3; // default state normalization depth to 3\n\n            // Set the normalization depth of the redux state to the configured `normalizeDepth` option or a sane number as a fallback\n            const newStateContext = { state: { type: 'redux', value: transformedState } };\n            addNonEnumerableProperty(\n              newStateContext,\n              '__sentry_override_normalization_depth__',\n              3 + // 3 layers for `state.value.transformedState`\n                normalizationDepth, // rest for the actual state\n            );\n\n            scope.setContext('state', newStateContext);\n          } else {\n            scope.setContext('state', null);\n          }\n\n          /* Allow user to configure scope with latest state */\n          const { configureScopeWithState } = options;\n          if (typeof configureScopeWithState === 'function') {\n            configureScopeWithState(scope, newState);\n          }\n        });\n\n        return newState;\n      };\n\n      return next(sentryReducer, initialState);\n    };\n}\n\nexport { createReduxEnhancer };\n"],"mappings":";;;;AAAA;;AAqEA,IAAAA,0BAAA;AACA,IAAAC,sBAAA;AAEA,IAAAC,cAAA;EACAC,iBAAA,WAAAA,kBAAAC,MAAA;IAAA,OAAAA,MAAA;EAAA;EACAC,gBAAA,WAAAA,iBAAAC,KAAA;IAAA,OAAAA,KAAA;EAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAAC,oBAAAC,eAAA;EACA;EACA,IAAAC,OAAA,GAAAC,aAAA,CAAAA,aAAA,KACAR,cAAA,GACAM,eAAA,CACA;EAEA,iBAAAG,IAAA;IAAA,OACA,UAAAC,OAAA,EAAAC,YAAA;MACA,IAAAC,aAAA,YAAAA,cAAAR,KAAA,EAAAF,MAAA;QACA,IAAAW,QAAA,GAAAH,OAAA,CAAAN,KAAA,EAAAF,MAAA;QAEAY,cAAA,WAAAC,KAAA;UACA;UACA,IAAAC,iBAAA,GAAAT,OAAA,CAAAN,iBAAA,CAAAC,MAAA;UACA,WAAAc,iBAAA,oBAAAA,iBAAA;YACAD,KAAA,CAAAE,aAAA;cACAC,QAAA,EAAApB,0BAAA;cACAqB,IAAA,EAAAH,iBAAA;cACAI,IAAA,EAAArB;YACA;UACA;;UAEA;UACA,IAAAsB,gBAAA,GAAAd,OAAA,CAAAJ,gBAAA,CAAAU,QAAA;UACA,WAAAQ,gBAAA,oBAAAA,gBAAA;YACA,IAAAC,MAAA,GAAAC,aAAA,GAAAC,SAAA;YACA,IAAAjB,QAAA,GAAAe,MAAA,IAAAA,MAAA,CAAAG,UAAA;YACA,IAAAC,kBAAA,GAAAnB,QAAA,IAAAA,QAAA,CAAAoB,cAAA;;YAEA;YACA,IAAAC,eAAA;cAAAxB,KAAA;gBAAAgB,IAAA;gBAAAS,KAAA,EAAAR;cAAA;YAAA;YACAS,wBAAA,CACAF,eAAA,EACA,2CACA;YAAA;YACAF,kBAAA;YACA;;YAEAX,KAAA,CAAAgB,UAAA,UAAAH,eAAA;UACA;YACAb,KAAA,CAAAgB,UAAA;UACA;;UAEA;UACA,IAAAC,uBAAA,GAAAzB,OAAA,CAAAyB,uBAAA;UACA,WAAAA,uBAAA;YACAA,uBAAA,CAAAjB,KAAA,EAAAF,QAAA;UACA;QACA;QAEA,OAAAA,QAAA;MACA;MAEA,OAAAJ,IAAA,CAAAG,aAAA,EAAAD,YAAA;IACA;EAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}