{"ast":null,"code":"import _objectSpread from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { uuid4, dateTimestampInSeconds, consoleSandbox, logger, GLOBAL_OBJ, getGlobalSingleton } from '@sentry/utils';\nimport { DEFAULT_ENVIRONMENT } from './constants.js';\nimport { Scope } from './scope.js';\nimport { closeSession, makeSession, updateSession } from './session.js';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nvar API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nvar DEFAULT_BREADCRUMBS = 100;\n\n/**\n * @inheritDoc\n */\nvar Hub = /*#__PURE__*/function () {\n  /** Is a {@link Layer}[] containing the client and scope */\n\n  /** Contains the last event id of a captured event.  */\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  function Hub(client) {\n    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Scope();\n    var _version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : API_VERSION;\n    _classCallCheck(this, Hub);\n    this._version = _version;\n    this._stack = [{\n      scope: scope\n    }];\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(Hub, [{\n    key: \"isOlderThan\",\n    value: function isOlderThan(version) {\n      return this._version < version;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"bindClient\",\n    value: function bindClient(client) {\n      var top = this.getStackTop();\n      top.client = client;\n      if (client && client.setupIntegrations) {\n        client.setupIntegrations();\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"pushScope\",\n    value: function pushScope() {\n      // We want to clone the content of prev scope\n      var scope = Scope.clone(this.getScope());\n      this.getStack().push({\n        client: this.getClient(),\n        scope: scope\n      });\n      return scope;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"popScope\",\n    value: function popScope() {\n      if (this.getStack().length <= 1) return false;\n      return !!this.getStack().pop();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"withScope\",\n    value: function withScope(callback) {\n      var scope = this.pushScope();\n      try {\n        callback(scope);\n      } finally {\n        this.popScope();\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getClient\",\n    value: function getClient() {\n      return this.getStackTop().client;\n    }\n\n    /** Returns the scope of the top stack. */\n  }, {\n    key: \"getScope\",\n    value: function getScope() {\n      return this.getStackTop().scope;\n    }\n\n    /** Returns the scope stack for domains or the process. */\n  }, {\n    key: \"getStack\",\n    value: function getStack() {\n      return this._stack;\n    }\n\n    /** Returns the topmost scope layer in the order domain > local > process. */\n  }, {\n    key: \"getStackTop\",\n    value: function getStackTop() {\n      return this._stack[this._stack.length - 1];\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureException\",\n    value: function captureException(exception, hint) {\n      var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();\n      var syntheticException = new Error('Sentry syntheticException');\n      this._withClient(function (client, scope) {\n        client.captureException(exception, _objectSpread(_objectSpread({\n          originalException: exception,\n          syntheticException: syntheticException\n        }, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n      return eventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureMessage\",\n    value: function captureMessage(message,\n    // eslint-disable-next-line deprecation/deprecation\n    level, hint) {\n      var eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();\n      var syntheticException = new Error(message);\n      this._withClient(function (client, scope) {\n        client.captureMessage(message, level, _objectSpread(_objectSpread({\n          originalException: message,\n          syntheticException: syntheticException\n        }, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n      return eventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureEvent\",\n    value: function captureEvent(event, hint) {\n      var eventId = hint && hint.event_id ? hint.event_id : uuid4();\n      if (!event.type) {\n        this._lastEventId = eventId;\n      }\n      this._withClient(function (client, scope) {\n        client.captureEvent(event, _objectSpread(_objectSpread({}, hint), {}, {\n          event_id: eventId\n        }), scope);\n      });\n      return eventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"lastEventId\",\n    value: function lastEventId() {\n      return this._lastEventId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"addBreadcrumb\",\n    value: function addBreadcrumb(breadcrumb, hint) {\n      var _this$getStackTop = this.getStackTop(),\n        scope = _this$getStackTop.scope,\n        client = _this$getStackTop.client;\n      if (!client) return;\n      var _ref = client.getOptions && client.getOptions() || {},\n        _ref$beforeBreadcrumb = _ref.beforeBreadcrumb,\n        beforeBreadcrumb = _ref$beforeBreadcrumb === void 0 ? null : _ref$beforeBreadcrumb,\n        _ref$maxBreadcrumbs = _ref.maxBreadcrumbs,\n        maxBreadcrumbs = _ref$maxBreadcrumbs === void 0 ? DEFAULT_BREADCRUMBS : _ref$maxBreadcrumbs;\n      if (maxBreadcrumbs <= 0) return;\n      var timestamp = dateTimestampInSeconds();\n      var mergedBreadcrumb = _objectSpread({\n        timestamp: timestamp\n      }, breadcrumb);\n      var finalBreadcrumb = beforeBreadcrumb ? consoleSandbox(function () {\n        return beforeBreadcrumb(mergedBreadcrumb, hint);\n      }) : mergedBreadcrumb;\n      if (finalBreadcrumb === null) return;\n      if (client.emit) {\n        client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n      }\n      scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setUser\",\n    value: function setUser(user) {\n      this.getScope().setUser(user);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTags\",\n    value: function setTags(tags) {\n      this.getScope().setTags(tags);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setExtras\",\n    value: function setExtras(extras) {\n      this.getScope().setExtras(extras);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTag\",\n    value: function setTag(key, value) {\n      this.getScope().setTag(key, value);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, extra) {\n      this.getScope().setExtra(key, extra);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }, {\n    key: \"setContext\",\n    value: function setContext(name, context) {\n      this.getScope().setContext(name, context);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"configureScope\",\n    value: function configureScope(callback) {\n      var _this$getStackTop2 = this.getStackTop(),\n        scope = _this$getStackTop2.scope,\n        client = _this$getStackTop2.client;\n      if (client) {\n        callback(scope);\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"run\",\n    value: function run(callback) {\n      var oldHub = makeMain(this);\n      try {\n        callback(this);\n      } finally {\n        makeMain(oldHub);\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getIntegration\",\n    value: function getIntegration(integration) {\n      var client = this.getClient();\n      if (!client) return null;\n      try {\n        return client.getIntegration(integration);\n      } catch (_oO) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Cannot retrieve integration \".concat(integration.id, \" from the current Hub\"));\n        return null;\n      }\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"startTransaction\",\n    value: function startTransaction(context, customSamplingContext) {\n      var result = this._callExtensionMethod('startTransaction', context, customSamplingContext);\n      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && !result) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':\\nSentry.addTracingExtensions();\\nSentry.init({...});\\n\");\n      }\n      return result;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"traceHeaders\",\n    value: function traceHeaders() {\n      return this._callExtensionMethod('traceHeaders');\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"captureSession\",\n    value: function captureSession() {\n      var endSession = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      // both send the update and pull the session from the scope\n      if (endSession) {\n        return this.endSession();\n      }\n\n      // only send the update\n      this._sendSessionUpdate();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"endSession\",\n    value: function endSession() {\n      var layer = this.getStackTop();\n      var scope = layer.scope;\n      var session = scope.getSession();\n      if (session) {\n        closeSession(session);\n      }\n      this._sendSessionUpdate();\n\n      // the session is over; take it off of the scope\n      scope.setSession();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"startSession\",\n    value: function startSession(context) {\n      var _this$getStackTop3 = this.getStackTop(),\n        scope = _this$getStackTop3.scope,\n        client = _this$getStackTop3.client;\n      var _ref2 = client && client.getOptions() || {},\n        release = _ref2.release,\n        _ref2$environment = _ref2.environment,\n        environment = _ref2$environment === void 0 ? DEFAULT_ENVIRONMENT : _ref2$environment;\n\n      // Will fetch userAgent if called from browser sdk\n      var _ref3 = GLOBAL_OBJ.navigator || {},\n        userAgent = _ref3.userAgent;\n      var session = makeSession(_objectSpread(_objectSpread({\n        release: release,\n        environment: environment,\n        user: scope.getUser()\n      }, userAgent && {\n        userAgent: userAgent\n      }), context));\n\n      // End existing session if there's one\n      var currentSession = scope.getSession && scope.getSession();\n      if (currentSession && currentSession.status === 'ok') {\n        updateSession(currentSession, {\n          status: 'exited'\n        });\n      }\n      this.endSession();\n\n      // Afterwards we set the new session on the scope\n      scope.setSession(session);\n      return session;\n    }\n\n    /**\n     * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n     * when Tracing is used.\n     */\n  }, {\n    key: \"shouldSendDefaultPii\",\n    value: function shouldSendDefaultPii() {\n      var client = this.getClient();\n      var options = client && client.getOptions();\n      return Boolean(options && options.sendDefaultPii);\n    }\n\n    /**\n     * Sends the current Session on the scope\n     */\n  }, {\n    key: \"_sendSessionUpdate\",\n    value: function _sendSessionUpdate() {\n      var _this$getStackTop4 = this.getStackTop(),\n        scope = _this$getStackTop4.scope,\n        client = _this$getStackTop4.client;\n      var session = scope.getSession();\n      if (session && client && client.captureSession) {\n        client.captureSession(session);\n      }\n    }\n\n    /**\n     * Internal helper function to call a method on the top client if it exists.\n     *\n     * @param method The method to call on the client.\n     * @param args Arguments to pass to the client function.\n     */\n  }, {\n    key: \"_withClient\",\n    value: function _withClient(callback) {\n      var _this$getStackTop5 = this.getStackTop(),\n        scope = _this$getStackTop5.scope,\n        client = _this$getStackTop5.client;\n      if (client) {\n        callback(client, scope);\n      }\n    }\n\n    /**\n     * Calls global extension method and binding current instance to the function call\n     */\n    // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }, {\n    key: \"_callExtensionMethod\",\n    value: function _callExtensionMethod(method) {\n      var carrier = getMainCarrier();\n      var sentry = carrier.__SENTRY__;\n      if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        return sentry.extensions[method].apply(this, args);\n      }\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Extension method \".concat(method, \" couldn't be found, doing nothing.\"));\n    }\n  }]);\n  return Hub;\n}();\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nfunction getMainCarrier() {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nfunction makeMain(hub) {\n  var registry = getMainCarrier();\n  var oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nfunction getCurrentHub() {\n  // Get main carrier (global for every environment)\n  var registry = getMainCarrier();\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    var hub = registry.__SENTRY__.acs.getCurrentHub();\n    if (hub) {\n      return hub;\n    }\n  }\n\n  // Return hub that lives on a global object\n  return getGlobalHub(registry);\n}\nfunction getGlobalHub() {\n  var registry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getMainCarrier();\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.\n */\nfunction ensureHubOnCarrier(carrier) {\n  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getGlobalHub();\n  // If there's no hub on current domain, or it's an old API, assign a new one\n  if (!hasHubOnCarrier(carrier) || getHubFromCarrier(carrier).isOlderThan(API_VERSION)) {\n    var globalHubTopStack = parent.getStackTop();\n    setHubOnCarrier(carrier, new Hub(globalHubTopStack.client, Scope.clone(globalHubTopStack.scope)));\n  }\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nfunction setAsyncContextStrategy(strategy) {\n  // Get main carrier (global for every environment)\n  var registry = getMainCarrier();\n  registry.__SENTRY__ = registry.__SENTRY__ || {};\n  registry.__SENTRY__.acs = strategy;\n}\n\n/**\n * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.\n *\n * @param callback The callback to run in its own async context\n * @param options Options to pass to the async context strategy\n * @returns The result of the callback\n */\nfunction runWithAsyncContext(callback) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var registry = getMainCarrier();\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);\n  }\n\n  // if there was no strategy, fallback to just calling the callback\n  return callback();\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier) {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nfunction getHubFromCarrier(carrier) {\n  return getGlobalSingleton('hub', function () {\n    return new Hub();\n  }, carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nfunction setHubOnCarrier(carrier, hub) {\n  if (!carrier) return false;\n  var __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  __SENTRY__.hub = hub;\n  return true;\n}\nexport { API_VERSION, Hub, ensureHubOnCarrier, getCurrentHub, getHubFromCarrier, getMainCarrier, makeMain, runWithAsyncContext, setAsyncContextStrategy, setHubOnCarrier };","map":{"version":3,"names":["API_VERSION","DEFAULT_BREADCRUMBS","Hub","client","scope","arguments","length","undefined","Scope","_version","_classCallCheck","_stack","bindClient","_createClass","key","value","isOlderThan","version","top","getStackTop","setupIntegrations","pushScope","clone","getScope","getStack","push","getClient","popScope","pop","withScope","callback","captureException","exception","hint","eventId","_lastEventId","event_id","uuid4","syntheticException","Error","_withClient","_objectSpread","originalException","captureMessage","message","level","captureEvent","event","type","lastEventId","addBreadcrumb","breadcrumb","_this$getStackTop","_ref","getOptions","_ref$beforeBreadcrumb","beforeBreadcrumb","_ref$maxBreadcrumbs","maxBreadcrumbs","timestamp","dateTimestampInSeconds","mergedBreadcrumb","finalBreadcrumb","consoleSandbox","emit","setUser","user","setTags","tags","setExtras","extras","setTag","setExtra","extra","setContext","name","context","configureScope","_this$getStackTop2","run","oldHub","makeMain","getIntegration","integration","_oO","__SENTRY_DEBUG__","logger","warn","concat","id","startTransaction","customSamplingContext","result","_callExtensionMethod","console","traceHeaders","captureSession","endSession","_sendSessionUpdate","layer","session","getSession","closeSession","setSession","startSession","_this$getStackTop3","_ref2","release","_ref2$environment","environment","DEFAULT_ENVIRONMENT","_ref3","GLOBAL_OBJ","navigator","userAgent","makeSession","getUser","currentSession","status","updateSession","shouldSendDefaultPii","options","Boolean","sendDefaultPii","_this$getStackTop4","_this$getStackTop5","method","carrier","getMainCarrier","sentry","__SENTRY__","extensions","_len","args","Array","_key","apply","hub","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","acs","getGlobalHub","hasHubOnCarrier","ensureHubOnCarrier","parent","globalHubTopStack","setAsyncContextStrategy","strategy","runWithAsyncContext","getGlobalSingleton"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/hub.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { consoleSandbox, dateTimestampInSeconds, getGlobalSingleton, GLOBAL_OBJ, logger, uuid4 } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from './constants';\nimport { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\nexport interface RunWithAsyncContextOptions {\n  /** Whether to reuse an existing async context if one exists. Defaults to false. */\n  reuseExisting?: boolean;\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Strategy used to track async context.\n */\nexport interface AsyncContextStrategy {\n  /**\n   * Gets the current async context. Returns undefined if there is no current async context.\n   */\n  getCurrentHub: () => Hub | undefined;\n  /**\n   * Runs the supplied callback in its own async context.\n   */\n  runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions): T;\n}\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    acs?: AsyncContextStrategy;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this._stack = [{ scope }];\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error('Sentry syntheticException');\n    this._withClient((client, scope) => {\n      client.captureException(\n        exception,\n        {\n          originalException: exception,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n  ): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error(message);\n    this._withClient((client, scope) => {\n      client.captureMessage(\n        message,\n        level,\n        {\n          originalException: message,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (!event.type) {\n      this._lastEventId = eventId;\n    }\n\n    this._withClient((client, scope) => {\n      client.captureEvent(event, { ...hint, event_id: eventId }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!client) return;\n\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    if (client.emit) {\n      client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n    }\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    this.getScope().setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    this.getScope().setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    this.getScope().setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    this.getScope().setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    this.getScope().setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    this.getScope().setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    const result = this._callExtensionMethod<Transaction>('startTransaction', context, customSamplingContext);\n\n    if (__DEBUG_BUILD__ && !result) {\n      // eslint-disable-next-line no-console\n      console.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':\nSentry.addTracingExtensions();\nSentry.init({...});\n`);\n    }\n\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    const layer = this.getStackTop();\n    const scope = layer.scope;\n    const session = scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    scope.setSession();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    const { scope, client } = this.getStackTop();\n    const { release, environment = DEFAULT_ENVIRONMENT } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n    const session = makeSession({\n      release,\n      environment,\n      user: scope.getUser(),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    // End existing session if there's one\n    const currentSession = scope.getSession && scope.getSession();\n    if (currentSession && currentSession.status === 'ok') {\n      updateSession(currentSession, { status: 'exited' });\n    }\n    this.endSession();\n\n    // Afterwards we set the new session on the scope\n    scope.setSession(session);\n\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   */\n  public shouldSendDefaultPii(): boolean {\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    const { scope, client } = this.getStackTop();\n\n    const session = scope.getSession();\n    if (session && client && client.captureSession) {\n      client.captureSession(session);\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  private _withClient(callback: (client: Client, scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(client, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    __DEBUG_BUILD__ && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    const hub = registry.__SENTRY__.acs.getCurrentHub();\n\n    if (hub) {\n      return hub;\n    }\n  }\n\n  // Return hub that lives on a global object\n  return getGlobalHub(registry);\n}\n\nfunction getGlobalHub(registry: Carrier = getMainCarrier()): Hub {\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.\n */\nexport function ensureHubOnCarrier(carrier: Carrier, parent: Hub = getGlobalHub()): void {\n  // If there's no hub on current domain, or it's an old API, assign a new one\n  if (!hasHubOnCarrier(carrier) || getHubFromCarrier(carrier).isOlderThan(API_VERSION)) {\n    const globalHubTopStack = parent.getStackTop();\n    setHubOnCarrier(carrier, new Hub(globalHubTopStack.client, Scope.clone(globalHubTopStack.scope)));\n  }\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nexport function setAsyncContextStrategy(strategy: AsyncContextStrategy | undefined): void {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  registry.__SENTRY__ = registry.__SENTRY__ || {};\n  registry.__SENTRY__.acs = strategy;\n}\n\n/**\n * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.\n *\n * @param callback The callback to run in its own async context\n * @param options Options to pass to the async context strategy\n * @returns The result of the callback\n */\nexport function runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions = {}): T {\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);\n  }\n\n  // if there was no strategy, fallback to just calling the callback\n  return callback();\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  return getGlobalSingleton<Hub>('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n  __SENTRY__.hub = hub;\n  return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}