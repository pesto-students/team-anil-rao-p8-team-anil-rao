{"ast":null,"code":"import { logger, isNaN } from '@sentry/utils';\nimport { getMainCarrier } from '../hub.js';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled.js';\nimport { registerErrorInstrumentation } from './errors.js';\nimport { IdleTransaction } from './idletransaction.js';\nimport { Transaction } from './transaction.js';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders() {\n  const scope = this.getScope();\n  const span = scope.getSpan();\n  return span ? {\n    'sentry-trace': span.toTraceparent()\n  } : {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample(transaction, options, samplingContext) {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      sampleRate: Number(transaction.sampled)\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      sampleRate: Number(sampleRate)\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      sampleRate: Number(sampleRate)\n    });\n  } else {\n    // When `enableTracing === true`, we use a sample rate of 100%\n    sampleRate = 1;\n    transaction.setMetadata({\n      sampleRate\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] Discarding transaction because ${typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'}`);\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < sampleRate;\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(sampleRate)})`);\n    return transaction;\n  }\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate) {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(rate)} of type ${JSON.stringify(typeof rate)}.`);\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(transactionContext, customSamplingContext) {\n  const client = this.getClient();\n  const options = client && client.getOptions() || {};\n  const configInstrumenter = options.instrumenter || 'sentry';\n  const transactionInstrumenter = transactionContext.instrumenter || 'sentry';\n  if (configInstrumenter !== transactionInstrumenter) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error(`A transaction was started with instrumenter=\\`${transactionInstrumenter}\\`, but the SDK is configured with the \\`${configInstrumenter}\\` instrumenter.\nThe transaction will not be sampled. Please use the ${configInstrumenter} instrumentation to start transactions.`);\n    transactionContext.sampled = false;\n  }\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nfunction startIdleTransaction(hub, transactionContext, idleTimeout, finalTimeout, onScope, customSamplingContext, heartbeatInterval) {\n  const client = hub.getClient();\n  const options = client && client.getOptions() || {};\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, finalTimeout, heartbeatInterval, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Adds tracing extensions to the global hub.\n */\nfunction addTracingExtensions() {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n  registerErrorInstrumentation();\n}\nexport { addTracingExtensions, startIdleTransaction };","map":{"version":3,"names":["traceHeaders","scope","getScope","span","getSpan","toTraceparent","sample","transaction","options","samplingContext","hasTracingEnabled","sampled","undefined","setMetadata","sampleRate","Number","tracesSampler","parentSampled","tracesSampleRate","isValidSampleRate","__SENTRY_DEBUG__","logger","warn","log","Math","random","op","name","rate","isNaN","JSON","stringify","_startTransaction","transactionContext","customSamplingContext","client","getClient","getOptions","configInstrumenter","instrumenter","transactionInstrumenter","error","Transaction","initSpanRecorder","_experiments","maxSpans","emit","startIdleTransaction","hub","idleTimeout","finalTimeout","onScope","heartbeatInterval","IdleTransaction","addTracingExtensions","carrier","getMainCarrier","__SENTRY__","extensions","startTransaction","registerErrorInstrumentation"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/tracing/hubextensions.ts"],"sourcesContent":["import type { ClientOptions, CustomSamplingContext, Options, SamplingContext, TransactionContext } from '@sentry/types';\nimport { isNaN, logger } from '@sentry/utils';\n\nimport type { Hub } from '../hub';\nimport { getMainCarrier } from '../hub';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled';\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  const span = scope.getSpan();\n\n  return span\n    ? {\n        'sentry-trace': span.toTraceparent(),\n      }\n    : {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(\n  transaction: T,\n  options: Pick<Options, 'tracesSampleRate' | 'tracesSampler' | 'enableTracing'>,\n  samplingContext: SamplingContext,\n): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      sampleRate: Number(transaction.sampled),\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      sampleRate: Number(sampleRate),\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      sampleRate: Number(sampleRate),\n    });\n  } else {\n    // When `enableTracing === true`, we use a sample rate of 100%\n    sampleRate = 1;\n    transaction.setMetadata({\n      sampleRate,\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    __DEBUG_BUILD__ && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    __DEBUG_BUILD__ &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    __DEBUG_BUILD__ &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return transaction;\n  }\n\n  __DEBUG_BUILD__ && logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    __DEBUG_BUILD__ &&\n      logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const client = this.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  const configInstrumenter = options.instrumenter || 'sentry';\n  const transactionInstrumenter = transactionContext.instrumenter || 'sentry';\n\n  if (configInstrumenter !== transactionInstrumenter) {\n    __DEBUG_BUILD__ &&\n      logger.error(\n        `A transaction was started with instrumenter=\\`${transactionInstrumenter}\\`, but the SDK is configured with the \\`${configInstrumenter}\\` instrumenter.\nThe transaction will not be sampled. Please use the ${configInstrumenter} instrumentation to start transactions.`,\n      );\n\n    transactionContext.sampled = false;\n  }\n\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout: number,\n  finalTimeout: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n  heartbeatInterval?: number,\n): IdleTransaction {\n  const client = hub.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, finalTimeout, heartbeatInterval, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Adds tracing extensions to the global hub.\n */\nexport function addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n\n  registerErrorInstrumentation();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}