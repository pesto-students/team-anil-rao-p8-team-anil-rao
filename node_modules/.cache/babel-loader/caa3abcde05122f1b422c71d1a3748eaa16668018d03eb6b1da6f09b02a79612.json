{"ast":null,"code":"import { isThenable } from './is.js';\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n\n/** SyncPromise internal states */\nvar States;\n(function (States) {\n  /** Pending */\n  const PENDING = 0;\n  States[States[\"PENDING\"] = PENDING] = \"PENDING\";\n  /** Resolved / OK */\n  const RESOLVED = 1;\n  States[States[\"RESOLVED\"] = RESOLVED] = \"RESOLVED\";\n  /** Rejected / Error */\n  const REJECTED = 2;\n  States[States[\"REJECTED\"] = REJECTED] = \"REJECTED\";\n})(States || (States = {}));\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nfunction resolvedSyncPromise(value) {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nfunction rejectedSyncPromise(reason) {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise {\n  __init() {\n    this._state = States.PENDING;\n  }\n  __init2() {\n    this._handlers = [];\n  }\n  constructor(executor) {\n    SyncPromise.prototype.__init.call(this);\n    SyncPromise.prototype.__init2.call(this);\n    SyncPromise.prototype.__init3.call(this);\n    SyncPromise.prototype.__init4.call(this);\n    SyncPromise.prototype.__init5.call(this);\n    SyncPromise.prototype.__init6.call(this);\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  then(onfulfilled, onrejected) {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([false, result => {\n        if (!onfulfilled) {\n          // TODO: ¯\\_(ツ)_/¯\n          // TODO: FIXME\n          resolve(result);\n        } else {\n          try {\n            resolve(onfulfilled(result));\n          } catch (e) {\n            reject(e);\n          }\n        }\n      }, reason => {\n        if (!onrejected) {\n          reject(reason);\n        } else {\n          try {\n            resolve(onrejected(reason));\n          } catch (e) {\n            reject(e);\n          }\n        }\n      }]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  catch(onrejected) {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  finally(onfinally) {\n    return new SyncPromise((resolve, reject) => {\n      let val;\n      let isRejected;\n      return this.then(value => {\n        isRejected = false;\n        val = value;\n        if (onfinally) {\n          onfinally();\n        }\n      }, reason => {\n        isRejected = true;\n        val = reason;\n        if (onfinally) {\n          onfinally();\n        }\n      }).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n        resolve(val);\n      });\n    });\n  }\n\n  /** JSDoc */\n  __init3() {\n    this._resolve = value => {\n      this._setResult(States.RESOLVED, value);\n    };\n  }\n\n  /** JSDoc */\n  __init4() {\n    this._reject = reason => {\n      this._setResult(States.REJECTED, reason);\n    };\n  }\n\n  /** JSDoc */\n  __init5() {\n    this._setResult = (state, value) => {\n      if (this._state !== States.PENDING) {\n        return;\n      }\n      if (isThenable(value)) {\n        void value.then(this._resolve, this._reject);\n        return;\n      }\n      this._state = state;\n      this._value = value;\n      this._executeHandlers();\n    };\n  }\n\n  /** JSDoc */\n  __init6() {\n    this._executeHandlers = () => {\n      if (this._state === States.PENDING) {\n        return;\n      }\n      const cachedHandlers = this._handlers.slice();\n      this._handlers = [];\n      cachedHandlers.forEach(handler => {\n        if (handler[0]) {\n          return;\n        }\n        if (this._state === States.RESOLVED) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          handler[1](this._value);\n        }\n        if (this._state === States.REJECTED) {\n          handler[2](this._value);\n        }\n        handler[0] = true;\n      });\n    };\n  }\n}\nexport { SyncPromise, rejectedSyncPromise, resolvedSyncPromise };","map":{"version":3,"names":["States","PENDING","RESOLVED","REJECTED","resolvedSyncPromise","value","SyncPromise","resolve","rejectedSyncPromise","reason","_","reject","__init","_state","__init2","_handlers","constructor","executor","prototype","call","__init3","__init4","__init5","__init6","_resolve","_reject","e","then","onfulfilled","onrejected","push","result","_executeHandlers","catch","val","finally","onfinally","isRejected","_setResult","state","isThenable","_value","cachedHandlers","slice","forEach","handler"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/syncpromise.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}