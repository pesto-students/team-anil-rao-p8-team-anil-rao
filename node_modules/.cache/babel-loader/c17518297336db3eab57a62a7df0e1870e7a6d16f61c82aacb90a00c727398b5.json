{"ast":null,"code":"import _defineProperty from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { uuid4, timestampInSeconds, logger, dropUndefinedKeys } from '@sentry/utils';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nvar SpanRecorder = /*#__PURE__*/function () {\n  function SpanRecorder() {\n    var maxlen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n    _classCallCheck(this, SpanRecorder);\n    SpanRecorder.prototype.__init.call(this);\n    this._maxlen = maxlen;\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  _createClass(SpanRecorder, [{\n    key: \"__init\",\n    value: function __init() {\n      this.spans = [];\n    }\n  }, {\n    key: \"add\",\n    value: function add(span) {\n      if (this.spans.length > this._maxlen) {\n        span.spanRecorder = undefined;\n      } else {\n        this.spans.push(span);\n      }\n    }\n  }]);\n  return SpanRecorder;\n}();\n/**\n * Span contains all data about a span\n */\nvar Span = /*#__PURE__*/function () {\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  function Span(spanContext) {\n    _classCallCheck(this, Span);\n    Span.prototype.__init2.call(this);\n    Span.prototype.__init3.call(this);\n    Span.prototype.__init4.call(this);\n    Span.prototype.__init5.call(this);\n    Span.prototype.__init6.call(this);\n    Span.prototype.__init7.call(this);\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n    if (spanContext.instrumenter) {\n      this.instrumenter = spanContext.instrumenter;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(Span, [{\n    key: \"__init2\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init2() {\n      this.traceId = uuid4();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this.spanId = uuid4().substring(16);\n    }\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * Internal keeper of the status\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * Timestamp in seconds when the span was created.\n     */\n  }, {\n    key: \"__init4\",\n    value: function __init4() {\n      this.startTimestamp = timestampInSeconds();\n    }\n\n    /**\n     * Timestamp in seconds when the span ended.\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"__init5\",\n    value: function __init5() {\n      this.tags = {};\n    }\n\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }, {\n    key: \"__init6\",\n    value: function __init6() {\n      this.data = {};\n    }\n\n    /**\n     * List of spans that were finalized\n     */\n\n    /**\n     * @inheritDoc\n     */\n\n    /**\n     * The instrumenter that created this span.\n     */\n  }, {\n    key: \"__init7\",\n    value: function __init7() {\n      this.instrumenter = 'sentry';\n    }\n  }, {\n    key: \"startChild\",\n    value: function startChild(spanContext) {\n      var childSpan = new Span(_objectSpread(_objectSpread({}, spanContext), {}, {\n        parentSpanId: this.spanId,\n        sampled: this.sampled,\n        traceId: this.traceId\n      }));\n      childSpan.spanRecorder = this.spanRecorder;\n      if (childSpan.spanRecorder) {\n        childSpan.spanRecorder.add(childSpan);\n      }\n      childSpan.transaction = this.transaction;\n      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && childSpan.transaction) {\n        var opStr = spanContext && spanContext.op || '< unknown op >';\n        var nameStr = childSpan.transaction.name || '< unknown name >';\n        var idStr = childSpan.transaction.spanId;\n        var logMessage = \"[Tracing] Starting '\".concat(opStr, \"' span on transaction '\").concat(nameStr, \"' (\").concat(idStr, \").\");\n        childSpan.transaction.metadata.spanMetadata[childSpan.spanId] = {\n          logMessage: logMessage\n        };\n        logger.log(logMessage);\n      }\n      return childSpan;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTag\",\n    value: function setTag(key, value) {\n      this.tags = _objectSpread(_objectSpread({}, this.tags), {}, _defineProperty({}, key, value));\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  }, {\n    key: \"setData\",\n    value: function setData(key, value) {\n      this.data = _objectSpread(_objectSpread({}, this.data), {}, _defineProperty({}, key, value));\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setStatus\",\n    value: function setStatus(value) {\n      this.status = value;\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setHttpStatus\",\n    value: function setHttpStatus(httpStatus) {\n      this.setTag('http.status_code', String(httpStatus));\n      this.setData('http.response.status_code', httpStatus);\n      var spanStatus = spanStatusfromHttpCode(httpStatus);\n      if (spanStatus !== 'unknown_error') {\n        this.setStatus(spanStatus);\n      }\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"isSuccess\",\n    value: function isSuccess() {\n      return this.status === 'ok';\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"finish\",\n    value: function finish(endTimestamp) {\n      if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) &&\n      // Don't call this for transactions\n      this.transaction && this.transaction.spanId !== this.spanId) {\n        var logMessage = this.transaction.metadata.spanMetadata[this.spanId].logMessage;\n        if (logMessage) {\n          logger.log(logMessage.replace('Starting', 'Finishing'));\n        }\n      }\n      this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampInSeconds();\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"toTraceparent\",\n    value: function toTraceparent() {\n      var sampledString = '';\n      if (this.sampled !== undefined) {\n        sampledString = this.sampled ? '-1' : '-0';\n      }\n      return \"\".concat(this.traceId, \"-\").concat(this.spanId).concat(sampledString);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"toContext\",\n    value: function toContext() {\n      return dropUndefinedKeys({\n        data: this.data,\n        description: this.description,\n        endTimestamp: this.endTimestamp,\n        op: this.op,\n        parentSpanId: this.parentSpanId,\n        sampled: this.sampled,\n        spanId: this.spanId,\n        startTimestamp: this.startTimestamp,\n        status: this.status,\n        tags: this.tags,\n        traceId: this.traceId\n      });\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"updateWithContext\",\n    value: function updateWithContext(spanContext) {\n      this.data = spanContext.data || {};\n      this.description = spanContext.description;\n      this.endTimestamp = spanContext.endTimestamp;\n      this.op = spanContext.op;\n      this.parentSpanId = spanContext.parentSpanId;\n      this.sampled = spanContext.sampled;\n      this.spanId = spanContext.spanId || this.spanId;\n      this.startTimestamp = spanContext.startTimestamp || this.startTimestamp;\n      this.status = spanContext.status;\n      this.tags = spanContext.tags || {};\n      this.traceId = spanContext.traceId || this.traceId;\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getTraceContext\",\n    value: function getTraceContext() {\n      return dropUndefinedKeys({\n        data: Object.keys(this.data).length > 0 ? this.data : undefined,\n        description: this.description,\n        op: this.op,\n        parent_span_id: this.parentSpanId,\n        span_id: this.spanId,\n        status: this.status,\n        tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n        trace_id: this.traceId\n      });\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return dropUndefinedKeys({\n        data: Object.keys(this.data).length > 0 ? this.data : undefined,\n        description: this.description,\n        op: this.op,\n        parent_span_id: this.parentSpanId,\n        span_id: this.spanId,\n        start_timestamp: this.startTimestamp,\n        status: this.status,\n        tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n        timestamp: this.endTimestamp,\n        trace_id: this.traceId\n      });\n    }\n  }]);\n  return Span;\n}();\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nfunction spanStatusfromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n  return 'unknown_error';\n}\nexport { Span, SpanRecorder, spanStatusfromHttpCode };","map":{"version":3,"names":["SpanRecorder","maxlen","arguments","length","undefined","_classCallCheck","prototype","__init","call","_maxlen","_createClass","key","value","spans","add","span","spanRecorder","push","Span","spanContext","__init2","__init3","__init4","__init5","__init6","__init7","traceId","spanId","parentSpanId","sampled","op","description","data","tags","status","startTimestamp","endTimestamp","instrumenter","uuid4","substring","timestampInSeconds","startChild","childSpan","_objectSpread","transaction","__SENTRY_DEBUG__","opStr","nameStr","name","idStr","logMessage","concat","metadata","spanMetadata","logger","log","setTag","_defineProperty","setData","setStatus","setHttpStatus","httpStatus","String","spanStatus","spanStatusfromHttpCode","isSuccess","finish","replace","toTraceparent","sampledString","toContext","dropUndefinedKeys","updateWithContext","getTraceContext","Object","keys","parent_span_id","span_id","trace_id","toJSON","start_timestamp","timestamp"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/tracing/span.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Instrumenter,\n  Primitive,\n  Span as SpanInterface,\n  SpanContext,\n  TraceContext,\n  Transaction,\n} from '@sentry/types';\nimport { dropUndefinedKeys, logger, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nexport class SpanRecorder {\n  public spans: Span[] = [];\n\n  private readonly _maxlen: number;\n\n  public constructor(maxlen: number = 1000) {\n    this._maxlen = maxlen;\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public add(span: Span): void {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface {\n  /**\n   * @inheritDoc\n   */\n  public traceId: string = uuid4();\n\n  /**\n   * @inheritDoc\n   */\n  public spanId: string = uuid4().substring(16);\n\n  /**\n   * @inheritDoc\n   */\n  public parentSpanId?: string;\n\n  /**\n   * Internal keeper of the status\n   */\n  public status?: SpanStatusType | string;\n\n  /**\n   * @inheritDoc\n   */\n  public sampled?: boolean;\n\n  /**\n   * Timestamp in seconds when the span was created.\n   */\n  public startTimestamp: number = timestampInSeconds();\n\n  /**\n   * Timestamp in seconds when the span ended.\n   */\n  public endTimestamp?: number;\n\n  /**\n   * @inheritDoc\n   */\n  public op?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public description?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public tags: { [key: string]: Primitive } = {};\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public data: { [key: string]: any } = {};\n\n  /**\n   * List of spans that were finalized\n   */\n  public spanRecorder?: SpanRecorder;\n\n  /**\n   * @inheritDoc\n   */\n  public transaction?: Transaction;\n\n  /**\n   * The instrumenter that created this span.\n   */\n  public instrumenter: Instrumenter = 'sentry';\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext?: SpanContext) {\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n    if (spanContext.instrumenter) {\n      this.instrumenter = spanContext.instrumenter;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startChild(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId,\n    });\n\n    childSpan.spanRecorder = this.spanRecorder;\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n\n    if (__DEBUG_BUILD__ && childSpan.transaction) {\n      const opStr = (spanContext && spanContext.op) || '< unknown op >';\n      const nameStr = childSpan.transaction.name || '< unknown name >';\n      const idStr = childSpan.transaction.spanId;\n\n      const logMessage = `[Tracing] Starting '${opStr}' span on transaction '${nameStr}' (${idStr}).`;\n      childSpan.transaction.metadata.spanMetadata[childSpan.spanId] = { logMessage };\n      logger.log(logMessage);\n    }\n\n    return childSpan;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public setData(key: string, value: any): this {\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatusType): this {\n    this.status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setHttpStatus(httpStatus: number): this {\n    this.setTag('http.status_code', String(httpStatus));\n    this.setData('http.response.status_code', httpStatus);\n    const spanStatus = spanStatusfromHttpCode(httpStatus);\n    if (spanStatus !== 'unknown_error') {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isSuccess(): boolean {\n    return this.status === 'ok';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): void {\n    if (\n      __DEBUG_BUILD__ &&\n      // Don't call this for transactions\n      this.transaction &&\n      this.transaction.spanId !== this.spanId\n    ) {\n      const { logMessage } = this.transaction.metadata.spanMetadata[this.spanId];\n      if (logMessage) {\n        logger.log((logMessage as string).replace('Starting', 'Finishing'));\n      }\n    }\n\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampInSeconds();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toTraceparent(): string {\n    let sampledString = '';\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n    return `${this.traceId}-${this.spanId}${sampledString}`;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): SpanContext {\n    return dropUndefinedKeys({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(spanContext: SpanContext): this {\n    this.data = spanContext.data || {};\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = spanContext.spanId || this.spanId;\n    this.startTimestamp = spanContext.startTimestamp || this.startTimestamp;\n    this.status = spanContext.status;\n    this.tags = spanContext.tags || {};\n    this.traceId = spanContext.traceId || this.traceId;\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTraceContext(): TraceContext {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toJSON(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    start_timestamp: number;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    timestamp?: number;\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId,\n    });\n  }\n}\n\nexport type SpanStatusType =\n  /** The operation completed successfully. */\n  | 'ok'\n  /** Deadline expired before operation could complete. */\n  | 'deadline_exceeded'\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  | 'unauthenticated'\n  /** 403 Forbidden */\n  | 'permission_denied'\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  | 'not_found'\n  /** 429 Too Many Requests */\n  | 'resource_exhausted'\n  /** Client specified an invalid argument. 4xx. */\n  | 'invalid_argument'\n  /** 501 Not Implemented */\n  | 'unimplemented'\n  /** 503 Service Unavailable */\n  | 'unavailable'\n  /** Other/generic 5xx. */\n  | 'internal_error'\n  /** Unknown. Any non-standard HTTP status code. */\n  | 'unknown_error'\n  /** The operation was cancelled (typically by the user). */\n  | 'cancelled'\n  /** Already exists (409) */\n  | 'already_exists'\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  | 'failed_precondition'\n  /** The operation was aborted, typically due to a concurrency issue. */\n  | 'aborted'\n  /** Operation was attempted past the valid range. */\n  | 'out_of_range'\n  /** Unrecoverable data loss or corruption */\n  | 'data_loss';\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport function spanStatusfromHttpCode(httpStatus: number): SpanStatusType {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}