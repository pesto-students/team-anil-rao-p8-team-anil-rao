{"ast":null,"code":"import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { loadModule, logger, fill, arrayify, isThenable } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\n\n/** Tracing integration for Apollo */\nclass Apollo {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Apollo';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = Apollo.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      useNestjs: false\n    };\n    Apollo.prototype.__init.call(this);\n    this._useNest = !!options.useNestjs;\n  }\n\n  /** @inheritdoc */\n  loadDependency() {\n    if (this._useNest) {\n      this._module = this._module || loadModule('@nestjs/graphql');\n    } else {\n      this._module = this._module || loadModule('apollo-server-core');\n    }\n    return this._module;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(_, getCurrentHub) {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Apollo Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n    if (this._useNest) {\n      const pkg = this.loadDependency();\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Apollo-NestJS Integration was unable to require @nestjs/graphql package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.\n       */\n      fill(pkg.GraphQLFactory.prototype, 'mergeWithSchema', function (orig) {\n        return function () {\n          fill(this.resolversExplorerService, 'explore', function (orig) {\n            return function () {\n              const resolvers = arrayify(orig.call(this));\n              const instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);\n              return instrumentedResolvers;\n            };\n          });\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          return orig.call(this, ...args);\n        };\n      });\n    } else {\n      const pkg = this.loadDependency();\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Apollo Integration was unable to require apollo-server-core package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n       */\n      fill(pkg.ApolloServerBase.prototype, 'constructSchema', function (orig) {\n        return function () {\n          if (!this.config.resolvers) {\n            if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n              if (this.config.schema) {\n                logger.warn('Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.' + 'If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.');\n                logger.warn();\n              } else if (this.config.modules) {\n                logger.warn('Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.');\n              }\n              logger.error('Skipping tracing as no resolvers found on the `ApolloServer` instance.');\n            }\n            return orig.call(this);\n          }\n          const resolvers = arrayify(this.config.resolvers);\n          this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);\n          return orig.call(this);\n        };\n      });\n    }\n  }\n}\nApollo.__initStatic();\nfunction instrumentResolvers(resolvers, getCurrentHub) {\n  return resolvers.map(model => {\n    Object.keys(model).forEach(resolverGroupName => {\n      Object.keys(model[resolverGroupName]).forEach(resolverName => {\n        if (typeof model[resolverGroupName][resolverName] !== 'function') {\n          return;\n        }\n        wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n      });\n    });\n    return model;\n  });\n}\n\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\nfunction wrapResolver(model, resolverGroupName, resolverName, getCurrentHub) {\n  fill(model[resolverGroupName], resolverName, function (orig) {\n    return function () {\n      const scope = getCurrentHub().getScope();\n      const parentSpan = _optionalChain([scope, 'optionalAccess', _2 => _2.getSpan, 'call', _3 => _3()]);\n      const span = _optionalChain([parentSpan, 'optionalAccess', _4 => _4.startChild, 'call', _5 => _5({\n        description: `${resolverGroupName}.${resolverName}`,\n        op: 'graphql.resolve'\n      })]);\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      const rv = orig.call(this, ...args);\n      if (isThenable(rv)) {\n        return rv.then(res => {\n          _optionalChain([span, 'optionalAccess', _6 => _6.finish, 'call', _7 => _7()]);\n          return res;\n        });\n      }\n      _optionalChain([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);\n      return rv;\n    };\n  });\n}\nexport { Apollo };","map":{"version":3,"names":["Apollo","__initStatic","id","__init","name","constructor","options","arguments","length","undefined","useNestjs","prototype","call","_useNest","loadDependency","_module","loadModule","setupOnce","_","getCurrentHub","shouldDisableAutoInstrumentation","__SENTRY_DEBUG__","logger","log","pkg","error","fill","GraphQLFactory","orig","resolversExplorerService","resolvers","arrayify","instrumentedResolvers","instrumentResolvers","_len","args","Array","_key","ApolloServerBase","config","schema","warn","modules","map","model","Object","keys","forEach","resolverGroupName","resolverName","wrapResolver","scope","getScope","parentSpan","_optionalChain","_2","getSpan","_3","span","_4","startChild","_5","description","op","_len2","_key2","rv","isThenable","then","res","_6","finish","_7","_8","_9"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/node/integrations/apollo.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor } from '@sentry/types';\nimport { arrayify, fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport type { LazyLoadedIntegration } from './lazy';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ninterface ApolloOptions {\n  useNestjs?: boolean;\n}\n\ntype ApolloResolverGroup = {\n  [key: string]: () => unknown;\n};\n\ntype ApolloModelResolvers = {\n  [key: string]: ApolloResolverGroup;\n};\n\ntype GraphQLModule = {\n  GraphQLFactory: {\n    prototype: {\n      create: (resolvers: ApolloModelResolvers[]) => unknown;\n    };\n  };\n};\n\ntype ApolloModule = {\n  ApolloServerBase: {\n    prototype: {\n      constructSchema: (config: unknown) => unknown;\n    };\n  };\n};\n\n/** Tracing integration for Apollo */\nexport class Apollo implements LazyLoadedIntegration<GraphQLModule & ApolloModule> {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Apollo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Apollo.id;\n\n  private readonly _useNest: boolean;\n\n  private _module?: GraphQLModule & ApolloModule;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    options: ApolloOptions = {\n      useNestjs: false,\n    },\n  ) {\n    this._useNest = !!options.useNestjs;\n  }\n\n  /** @inheritdoc */\n  public loadDependency(): (GraphQLModule & ApolloModule) | undefined {\n    if (this._useNest) {\n      this._module = this._module || loadModule('@nestjs/graphql');\n    } else {\n      this._module = this._module || loadModule('apollo-server-core');\n    }\n\n    return this._module;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      __DEBUG_BUILD__ && logger.log('Apollo Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    if (this._useNest) {\n      const pkg = this.loadDependency();\n\n      if (!pkg) {\n        __DEBUG_BUILD__ && logger.error('Apollo-NestJS Integration was unable to require @nestjs/graphql package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.\n       */\n      fill(\n        pkg.GraphQLFactory.prototype,\n        'mergeWithSchema',\n        function (orig: (this: unknown, ...args: unknown[]) => unknown) {\n          return function (\n            this: { resolversExplorerService: { explore: () => ApolloModelResolvers[] } },\n            ...args: unknown[]\n          ) {\n            fill(this.resolversExplorerService, 'explore', function (orig: () => ApolloModelResolvers[]) {\n              return function (this: unknown) {\n                const resolvers = arrayify(orig.call(this));\n\n                const instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);\n\n                return instrumentedResolvers;\n              };\n            });\n\n            return orig.call(this, ...args);\n          };\n        },\n      );\n    } else {\n      const pkg = this.loadDependency();\n\n      if (!pkg) {\n        __DEBUG_BUILD__ && logger.error('Apollo Integration was unable to require apollo-server-core package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n       */\n      fill(pkg.ApolloServerBase.prototype, 'constructSchema', function (orig: (config: unknown) => unknown) {\n        return function (this: {\n          config: { resolvers?: ApolloModelResolvers[]; schema?: unknown; modules?: unknown };\n        }) {\n          if (!this.config.resolvers) {\n            if (__DEBUG_BUILD__) {\n              if (this.config.schema) {\n                logger.warn(\n                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.' +\n                    'If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.',\n                );\n                logger.warn();\n              } else if (this.config.modules) {\n                logger.warn(\n                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.',\n                );\n              }\n\n              logger.error('Skipping tracing as no resolvers found on the `ApolloServer` instance.');\n            }\n\n            return orig.call(this);\n          }\n\n          const resolvers = arrayify(this.config.resolvers);\n\n          this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);\n\n          return orig.call(this);\n        };\n      });\n    }\n  }\n}\n\nfunction instrumentResolvers(resolvers: ApolloModelResolvers[], getCurrentHub: () => Hub): ApolloModelResolvers[] {\n  return resolvers.map(model => {\n    Object.keys(model).forEach(resolverGroupName => {\n      Object.keys(model[resolverGroupName]).forEach(resolverName => {\n        if (typeof model[resolverGroupName][resolverName] !== 'function') {\n          return;\n        }\n\n        wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n      });\n    });\n\n    return model;\n  });\n}\n\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\nfunction wrapResolver(\n  model: ApolloModelResolvers,\n  resolverGroupName: string,\n  resolverName: string,\n  getCurrentHub: () => Hub,\n): void {\n  fill(model[resolverGroupName], resolverName, function (orig: () => unknown | Promise<unknown>) {\n    return function (this: unknown, ...args: unknown[]) {\n      const scope = getCurrentHub().getScope();\n      const parentSpan = scope?.getSpan();\n      const span = parentSpan?.startChild({\n        description: `${resolverGroupName}.${resolverName}`,\n        op: 'graphql.resolve',\n      });\n\n      const rv = orig.call(this, ...args);\n\n      if (isThenable(rv)) {\n        return rv.then((res: unknown) => {\n          span?.finish();\n          return res;\n        });\n      }\n\n      span?.finish();\n\n      return rv;\n    };\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}