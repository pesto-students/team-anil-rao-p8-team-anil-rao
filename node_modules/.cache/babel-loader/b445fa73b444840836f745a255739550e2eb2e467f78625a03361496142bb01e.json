{"ast":null,"code":"import { dsnToString } from './dsn.js';\nimport { normalize } from './normalize.js';\nimport { dropUndefinedKeys } from './object.js';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction createEnvelope(headers) {\n  let items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return [headers, items];\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction addItemToEnvelope(envelope, newItem) {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]];\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nfunction forEachEnvelopeItem(envelope, callback) {\n  const envelopeItems = envelope[1];\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n    if (result) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nfunction envelopeContainsItemType(envelope, types) {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8.\n */\nfunction encodeUTF8(input, textEncoder) {\n  const utf8 = textEncoder || new TextEncoder();\n  return utf8.encode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nfunction serializeEnvelope(envelope, textEncoder) {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts = JSON.stringify(envHeaders);\n  function append(next) {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);\n    }\n  }\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\nfunction concatBuffers(buffers) {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n  return merged;\n}\n\n/**\n * Parses an envelope\n */\nfunction parseEnvelope(env, textEncoder, textDecoder) {\n  let buffer = typeof env === 'string' ? textEncoder.encode(env) : env;\n  function readBinary(length) {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n  function readJson() {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n    return JSON.parse(textDecoder.decode(readBinary(i)));\n  }\n  const envelopeHeader = readJson();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items = [];\n  while (buffer.length) {\n    const itemHeader = readJson();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates attachment envelope items\n */\nfunction createAttachmentEnvelopeItem(attachment, textEncoder) {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n  return [dropUndefinedKeys({\n    type: 'attachment',\n    length: buffer.length,\n    filename: attachment.filename,\n    content_type: attachment.contentType,\n    attachment_type: attachment.attachmentType\n  }), buffer];\n}\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor'\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nfunction envelopeItemTypeToDataCategory(type) {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from from the metadata or an events */\nfunction getSdkMetadataForEnvelopeHeader(metadataOrEvent) {\n  if (!metadataOrEvent || !metadataOrEvent.sdk) {\n    return;\n  }\n  const {\n    name,\n    version\n  } = metadataOrEvent.sdk;\n  return {\n    name,\n    version\n  };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nfunction createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn) {\n  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n  return {\n    event_id: event.event_id,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && {\n      sdk: sdkInfo\n    }),\n    ...(!!tunnel && {\n      dsn: dsnToString(dsn)\n    }),\n    ...(dynamicSamplingContext && {\n      trace: dropUndefinedKeys({\n        ...dynamicSamplingContext\n      })\n    })\n  };\n}\nexport { addItemToEnvelope, createAttachmentEnvelopeItem, createEnvelope, createEventEnvelopeHeaders, envelopeContainsItemType, envelopeItemTypeToDataCategory, forEachEnvelopeItem, getSdkMetadataForEnvelopeHeader, parseEnvelope, serializeEnvelope };","map":{"version":3,"names":["createEnvelope","headers","items","arguments","length","undefined","addItemToEnvelope","envelope","newItem","forEachEnvelopeItem","callback","envelopeItems","envelopeItem","envelopeItemType","type","result","envelopeContainsItemType","types","_","includes","encodeUTF8","input","textEncoder","utf8","TextEncoder","encode","serializeEnvelope","envHeaders","parts","JSON","stringify","append","next","push","item","itemHeaders","payload","Uint8Array","stringifiedPayload","e","normalize","concatBuffers","buffers","totalLength","reduce","acc","buf","merged","offset","buffer","set","parseEnvelope","env","textDecoder","readBinary","bin","subarray","readJson","i","indexOf","parse","decode","envelopeHeader","itemHeader","binaryLength","createAttachmentEnvelopeItem","attachment","data","dropUndefinedKeys","filename","content_type","contentType","attachment_type","attachmentType","ITEM_TYPE_TO_DATA_CATEGORY_MAP","session","sessions","transaction","event","client_report","user_report","profile","replay_event","replay_recording","check_in","envelopeItemTypeToDataCategory","getSdkMetadataForEnvelopeHeader","metadataOrEvent","sdk","name","version","createEventEnvelopeHeaders","sdkInfo","tunnel","dsn","dynamicSamplingContext","sdkProcessingMetadata","event_id","sent_at","Date","toISOString","dsnToString","trace"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/envelope.ts"],"sourcesContent":["import type {\n  Attachment,\n  AttachmentItem,\n  BaseEnvelopeHeaders,\n  BaseEnvelopeItemHeaders,\n  DataCategory,\n  DsnComponents,\n  Envelope,\n  EnvelopeItemType,\n  Event,\n  EventEnvelopeHeaders,\n  SdkInfo,\n  SdkMetadata,\n  TextEncoderInternal,\n} from '@sentry/types';\n\nimport { dsnToString } from './dsn';\nimport { normalize } from './normalize';\nimport { dropUndefinedKeys } from './object';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as unknown as E;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nexport function forEachEnvelopeItem<E extends Envelope>(\n  envelope: Envelope,\n  callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => boolean | void,\n): boolean {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nexport function envelopeContainsItemType(envelope: Envelope, types: EnvelopeItemType[]): boolean {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8.\n */\nfunction encodeUTF8(input: string, textEncoder?: TextEncoderInternal): Uint8Array {\n  const utf8 = textEncoder || new TextEncoder();\n  return utf8.encode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nexport function serializeEnvelope(envelope: Envelope, textEncoder?: TextEncoderInternal): string | Uint8Array {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts: string | Uint8Array[] = JSON.stringify(envHeaders);\n\n  function append(next: string | Uint8Array): void {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload: string;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers: Uint8Array[]): Uint8Array {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\nexport interface TextDecoderInternal {\n  decode(input?: Uint8Array): string;\n}\n\n/**\n * Parses an envelope\n */\nexport function parseEnvelope(\n  env: string | Uint8Array,\n  textEncoder: TextEncoderInternal,\n  textDecoder: TextDecoderInternal,\n): Envelope {\n  let buffer = typeof env === 'string' ? textEncoder.encode(env) : env;\n\n  function readBinary(length: number): Uint8Array {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson<T>(): T {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(textDecoder.decode(readBinary(i))) as T;\n  }\n\n  const envelopeHeader = readJson<BaseEnvelopeHeaders>();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: [any, any][] = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson<BaseEnvelopeItemHeaders>();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates attachment envelope items\n */\nexport function createAttachmentEnvelopeItem(\n  attachment: Attachment,\n  textEncoder?: TextEncoderInternal,\n): AttachmentItem {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n\n  return [\n    dropUndefinedKeys({\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    }),\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP: Record<EnvelopeItemType, DataCategory> = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nexport function envelopeItemTypeToDataCategory(type: EnvelopeItemType): DataCategory {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from from the metadata or an events */\nexport function getSdkMetadataForEnvelopeHeader(metadataOrEvent?: SdkMetadata | Event): SdkInfo | undefined {\n  if (!metadataOrEvent || !metadataOrEvent.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nexport function createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn: DsnComponents,\n): EventEnvelopeHeaders {\n  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && { dsn: dsnToString(dsn) }),\n    ...(dynamicSamplingContext && {\n      trace: dropUndefinedKeys({ ...dynamicSamplingContext }),\n    }),\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}