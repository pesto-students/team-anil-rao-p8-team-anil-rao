{"ast":null,"code":"import { getActiveTransaction } from '@sentry/core';\nimport { browserPerformanceTimeOrigin, logger, htmlTreeAsString } from '@sentry/utils';\nimport { WINDOW } from '../types.js';\nimport { onCLS } from '../web-vitals/getCLS.js';\nimport { onFID } from '../web-vitals/getFID.js';\nimport { onLCP } from '../web-vitals/getLCP.js';\nimport { getVisibilityWatcher } from '../web-vitals/lib/getVisibilityWatcher.js';\nimport { observe } from '../web-vitals/lib/observe.js';\nimport { _startChild, isMeasurementValue } from './utils.js';\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nfunction msToSec(time) {\n  return time / 1000;\n}\nfunction getBrowserPerformanceAPI() {\n  // @ts-ignore we want to make sure all of these are available, even if TS is sure they are\n  return WINDOW && WINDOW.addEventListener && WINDOW.performance;\n}\nlet _performanceCursor = 0;\nlet _measurements = {};\nlet _lcpEntry;\nlet _clsEntry;\n\n/**\n * Start tracking web vitals\n *\n * @returns A function that forces web vitals collection\n */\nfunction startTrackingWebVitals() {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    // @ts-ignore we want to make sure all of these are available, even if TS is sure they are\n    if (performance.mark) {\n      WINDOW.performance.mark('sentry-tracing-init');\n    }\n    _trackFID();\n    const clsCallback = _trackCLS();\n    const lcpCallback = _trackLCP();\n    return () => {\n      if (clsCallback) {\n        clsCallback();\n      }\n      if (lcpCallback) {\n        lcpCallback();\n      }\n    };\n  }\n  return () => undefined;\n}\n\n/**\n * Start tracking long tasks.\n */\nfunction startTrackingLongTasks() {\n  const entryHandler = entries => {\n    for (const entry of entries) {\n      const transaction = getActiveTransaction();\n      if (!transaction) {\n        return;\n      }\n      const startTime = msToSec(browserPerformanceTimeOrigin + entry.startTime);\n      const duration = msToSec(entry.duration);\n      transaction.startChild({\n        description: 'Main UI thread blocked',\n        op: 'ui.long-task',\n        startTimestamp: startTime,\n        endTimestamp: startTime + duration\n      });\n    }\n  };\n  observe('longtask', entryHandler);\n}\n\n/**\n * Start tracking interaction events.\n */\nfunction startTrackingInteractions() {\n  const entryHandler = entries => {\n    for (const entry of entries) {\n      const transaction = getActiveTransaction();\n      if (!transaction) {\n        return;\n      }\n      if (entry.name === 'click') {\n        const startTime = msToSec(browserPerformanceTimeOrigin + entry.startTime);\n        const duration = msToSec(entry.duration);\n        transaction.startChild({\n          description: htmlTreeAsString(entry.target),\n          op: `ui.interaction.${entry.name}`,\n          startTimestamp: startTime,\n          endTimestamp: startTime + duration\n        });\n      }\n    }\n  };\n  observe('event', entryHandler, {\n    durationThreshold: 0\n  });\n}\n\n/** Starts tracking the Cumulative Layout Shift on the current page. */\nfunction _trackCLS() {\n  // See:\n  // https://web.dev/evolving-cls/\n  // https://web.dev/cls-web-tooling/\n  return onCLS(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = {\n      value: metric.value,\n      unit: ''\n    };\n    _clsEntry = entry;\n  });\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP() {\n  return onLCP(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = {\n      value: metric.value,\n      unit: 'millisecond'\n    };\n    _lcpEntry = entry;\n  });\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID() {\n  onFID(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n    const startTime = msToSec(entry.startTime);\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = {\n      value: metric.value,\n      unit: 'millisecond'\n    };\n    _measurements['mark.fid'] = {\n      value: timeOrigin + startTime,\n      unit: 'second'\n    };\n  });\n}\n\n/** Add performance related spans to a transaction */\nfunction addPerformanceEntries(transaction) {\n  const performance = getBrowserPerformanceAPI();\n  if (!performance || !WINDOW.performance.getEntries || !browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n  const performanceEntries = performance.getEntries();\n  let responseStartTimestamp;\n  let requestStartTimestamp;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  performanceEntries.slice(_performanceCursor).forEach(entry => {\n    const startTime = msToSec(entry.startTime);\n    const duration = msToSec(entry.duration);\n    if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n      return;\n    }\n    switch (entry.entryType) {\n      case 'navigation':\n        {\n          _addNavigationSpans(transaction, entry, timeOrigin);\n          responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);\n          requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);\n          break;\n        }\n      case 'mark':\n      case 'paint':\n      case 'measure':\n        {\n          _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n\n          // capture web vitals\n          const firstHidden = getVisibilityWatcher();\n          // Only report if the page wasn't hidden prior to the web vital.\n          const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n          if (entry.name === 'first-paint' && shouldRecord) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding FP');\n            _measurements['fp'] = {\n              value: entry.startTime,\n              unit: 'millisecond'\n            };\n          }\n          if (entry.name === 'first-contentful-paint' && shouldRecord) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding FCP');\n            _measurements['fcp'] = {\n              value: entry.startTime,\n              unit: 'millisecond'\n            };\n          }\n          break;\n        }\n      case 'resource':\n        {\n          const resourceName = entry.name.replace(WINDOW.location.origin, '');\n          _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n          break;\n        }\n      // Ignore other entry types.\n    }\n  });\n\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n  _trackNavigator(transaction);\n\n  // Measurements are only available for pageload transactions\n  if (transaction.op === 'pageload') {\n    // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n    // start of the response in milliseconds\n    if (typeof responseStartTimestamp === 'number') {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding TTFB');\n      _measurements['ttfb'] = {\n        value: (responseStartTimestamp - transaction.startTimestamp) * 1000,\n        unit: 'millisecond'\n      };\n      if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n        // Capture the time spent making the request and receiving the first byte of the response.\n        // This is the time between the start of the request and the start of the response in milliseconds.\n        _measurements['ttfb.requestTime'] = {\n          value: (responseStartTimestamp - requestStartTimestamp) * 1000,\n          unit: 'millisecond'\n        };\n      }\n    }\n    ['fcp', 'fp', 'lcp'].forEach(name => {\n      if (!_measurements[name] || timeOrigin >= transaction.startTimestamp) {\n        return;\n      }\n      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n      const oldValue = _measurements[name].value;\n      const measurementTimestamp = timeOrigin + msToSec(oldValue);\n\n      // normalizedValue should be in milliseconds\n      const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n      const delta = normalizedValue - oldValue;\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n      _measurements[name].value = normalizedValue;\n    });\n    const fidMark = _measurements['mark.fid'];\n    if (fidMark && _measurements['fid']) {\n      // create span for FID\n      _startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: fidMark.value + msToSec(_measurements['fid'].value),\n        op: 'ui.action',\n        startTimestamp: fidMark.value\n      });\n\n      // Delete mark.fid as we don't want it to be part of final payload\n      delete _measurements['mark.fid'];\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n    Object.keys(_measurements).forEach(measurementName => {\n      transaction.setMeasurement(measurementName, _measurements[measurementName].value, _measurements[measurementName].unit);\n    });\n    _tagMetricInfo(transaction);\n  }\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/** Create measure related spans */\nfunction _addMeasureSpans(transaction,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nentry, startTime, duration, timeOrigin) {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n  _startChild(transaction, {\n    description: entry.name,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType,\n    startTimestamp: measureStartTimestamp\n  });\n  return measureStartTimestamp;\n}\n\n/** Instrument navigation entries */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addNavigationSpans(transaction, entry, timeOrigin) {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  _addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(transaction,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nentry, event, timeOrigin, description, eventEnd) {\n  const end = eventEnd ? entry[eventEnd] : entry[`${event}End`];\n  const start = entry[`${event}Start`];\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: description || event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end)\n  });\n}\n\n/** Create request and response related spans */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addRequest(transaction, entry, timeOrigin) {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n  });\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n  });\n}\n\n/** Create resource-related spans */\nfunction _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin) {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const data = {};\n  if ('transferSize' in entry) {\n    data['http.response_transfer_size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['http.response_content_length'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['http.decoded_response_content_length'] = entry.decodedBodySize;\n  }\n  if ('renderBlockingStatus' in entry) {\n    data['resource.render_blocking_status'] = entry.renderBlockingStatus;\n  }\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource.other',\n    startTimestamp,\n    data\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(transaction) {\n  const navigator = WINDOW.navigator;\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  const connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n    if (connection.type) {\n      transaction.setTag('connectionType', connection.type);\n    }\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = {\n        value: connection.rtt,\n        unit: 'millisecond'\n      };\n    }\n  }\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    transaction.setTag('deviceMemory', `${navigator.deviceMemory} GB`);\n  }\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction _tagMetricInfo(transaction) {\n  if (_lcpEntry) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n    if (_lcpEntry.id) {\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (_clsEntry && _clsEntry.sources) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding CLS Data');\n    _clsEntry.sources.forEach((source, index) => transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)));\n  }\n}\nexport { _addMeasureSpans, _addResourceSpans, addPerformanceEntries, startTrackingInteractions, startTrackingLongTasks, startTrackingWebVitals };","map":{"version":3,"names":["msToSec","time","getBrowserPerformanceAPI","WINDOW","addEventListener","performance","_performanceCursor","_measurements","_lcpEntry","_clsEntry","startTrackingWebVitals","browserPerformanceTimeOrigin","mark","_trackFID","clsCallback","_trackCLS","lcpCallback","_trackLCP","undefined","startTrackingLongTasks","entryHandler","entries","entry","transaction","getActiveTransaction","startTime","duration","startChild","description","op","startTimestamp","endTimestamp","observe","startTrackingInteractions","name","htmlTreeAsString","target","durationThreshold","onCLS","metric","pop","__SENTRY_DEBUG__","logger","log","value","unit","onLCP","onFID","timeOrigin","addPerformanceEntries","getEntries","performanceEntries","responseStartTimestamp","requestStartTimestamp","slice","forEach","entryType","_addNavigationSpans","responseStart","requestStart","_addMeasureSpans","firstHidden","getVisibilityWatcher","shouldRecord","firstHiddenTime","resourceName","replace","location","origin","_addResourceSpans","Math","max","length","_trackNavigator","oldValue","measurementTimestamp","normalizedValue","abs","delta","fidMark","_startChild","cls","Object","keys","measurementName","setMeasurement","_tagMetricInfo","measureStartTimestamp","measureEndTimestamp","event","_addPerformanceNavigationTiming","_addRequest","eventEnd","end","start","responseEnd","initiatorType","data","transferSize","encodedBodySize","decodedBodySize","renderBlockingStatus","navigator","connection","effectiveType","setTag","type","isMeasurementValue","rtt","deviceMemory","hardwareConcurrency","String","element","id","url","trim","size","sources","source","index","node"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/browser/metrics/index.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type { IdleTransaction, Transaction } from '@sentry/core';\nimport { getActiveTransaction } from '@sentry/core';\nimport type { Measurements } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, htmlTreeAsString, logger } from '@sentry/utils';\n\nimport { WINDOW } from '../types';\nimport { onCLS } from '../web-vitals/getCLS';\nimport { onFID } from '../web-vitals/getFID';\nimport { onLCP } from '../web-vitals/getLCP';\nimport { getVisibilityWatcher } from '../web-vitals/lib/getVisibilityWatcher';\nimport { observe } from '../web-vitals/lib/observe';\nimport type { NavigatorDeviceMemory, NavigatorNetworkInformation } from '../web-vitals/types';\nimport { _startChild, isMeasurementValue } from './utils';\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nfunction msToSec(time: number): number {\n  return time / 1000;\n}\n\nfunction getBrowserPerformanceAPI(): Performance | undefined {\n  // @ts-ignore we want to make sure all of these are available, even if TS is sure they are\n  return WINDOW && WINDOW.addEventListener && WINDOW.performance;\n}\n\nlet _performanceCursor: number = 0;\n\nlet _measurements: Measurements = {};\nlet _lcpEntry: LargestContentfulPaint | undefined;\nlet _clsEntry: LayoutShift | undefined;\n\n/**\n * Start tracking web vitals\n *\n * @returns A function that forces web vitals collection\n */\nexport function startTrackingWebVitals(): () => void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    // @ts-ignore we want to make sure all of these are available, even if TS is sure they are\n    if (performance.mark) {\n      WINDOW.performance.mark('sentry-tracing-init');\n    }\n    _trackFID();\n    const clsCallback = _trackCLS();\n    const lcpCallback = _trackLCP();\n\n    return (): void => {\n      if (clsCallback) {\n        clsCallback();\n      }\n      if (lcpCallback) {\n        lcpCallback();\n      }\n    };\n  }\n\n  return () => undefined;\n}\n\n/**\n * Start tracking long tasks.\n */\nexport function startTrackingLongTasks(): void {\n  const entryHandler = (entries: PerformanceEntry[]): void => {\n    for (const entry of entries) {\n      const transaction = getActiveTransaction() as IdleTransaction | undefined;\n      if (!transaction) {\n        return;\n      }\n      const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n      const duration = msToSec(entry.duration);\n\n      transaction.startChild({\n        description: 'Main UI thread blocked',\n        op: 'ui.long-task',\n        startTimestamp: startTime,\n        endTimestamp: startTime + duration,\n      });\n    }\n  };\n\n  observe('longtask', entryHandler);\n}\n\n/**\n * Start tracking interaction events.\n */\nexport function startTrackingInteractions(): void {\n  const entryHandler = (entries: PerformanceEventTiming[]): void => {\n    for (const entry of entries) {\n      const transaction = getActiveTransaction() as IdleTransaction | undefined;\n      if (!transaction) {\n        return;\n      }\n\n      if (entry.name === 'click') {\n        const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n        const duration = msToSec(entry.duration);\n\n        transaction.startChild({\n          description: htmlTreeAsString(entry.target),\n          op: `ui.interaction.${entry.name}`,\n          startTimestamp: startTime,\n          endTimestamp: startTime + duration,\n        });\n      }\n    }\n  };\n\n  observe('event', entryHandler, { durationThreshold: 0 });\n}\n\n/** Starts tracking the Cumulative Layout Shift on the current page. */\nfunction _trackCLS(): ReturnType<typeof onCLS> {\n  // See:\n  // https://web.dev/evolving-cls/\n  // https://web.dev/cls-web-tooling/\n  return onCLS(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = { value: metric.value, unit: '' };\n    _clsEntry = entry as LayoutShift;\n  });\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP(): ReturnType<typeof onLCP> {\n  return onLCP(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = { value: metric.value, unit: 'millisecond' };\n    _lcpEntry = entry as LargestContentfulPaint;\n  });\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID(): void {\n  onFID(metric => {\n    const entry = metric.entries.pop();\n    if (!entry) {\n      return;\n    }\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n    const startTime = msToSec(entry.startTime);\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = { value: metric.value, unit: 'millisecond' };\n    _measurements['mark.fid'] = { value: timeOrigin + startTime, unit: 'second' };\n  });\n}\n\n/** Add performance related spans to a transaction */\nexport function addPerformanceEntries(transaction: Transaction): void {\n  const performance = getBrowserPerformanceAPI();\n  if (!performance || !WINDOW.performance.getEntries || !browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n\n  __DEBUG_BUILD__ && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n  const performanceEntries = performance.getEntries();\n\n  let responseStartTimestamp: number | undefined;\n  let requestStartTimestamp: number | undefined;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  performanceEntries.slice(_performanceCursor).forEach((entry: Record<string, any>) => {\n    const startTime = msToSec(entry.startTime);\n    const duration = msToSec(entry.duration);\n\n    if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n      return;\n    }\n\n    switch (entry.entryType) {\n      case 'navigation': {\n        _addNavigationSpans(transaction, entry, timeOrigin);\n        responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);\n        requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);\n        break;\n      }\n      case 'mark':\n      case 'paint':\n      case 'measure': {\n        _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n\n        // capture web vitals\n        const firstHidden = getVisibilityWatcher();\n        // Only report if the page wasn't hidden prior to the web vital.\n        const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n        if (entry.name === 'first-paint' && shouldRecord) {\n          __DEBUG_BUILD__ && logger.log('[Measurements] Adding FP');\n          _measurements['fp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        if (entry.name === 'first-contentful-paint' && shouldRecord) {\n          __DEBUG_BUILD__ && logger.log('[Measurements] Adding FCP');\n          _measurements['fcp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        break;\n      }\n      case 'resource': {\n        const resourceName = (entry.name as string).replace(WINDOW.location.origin, '');\n        _addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n        break;\n      }\n      default:\n      // Ignore other entry types.\n    }\n  });\n\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n\n  _trackNavigator(transaction);\n\n  // Measurements are only available for pageload transactions\n  if (transaction.op === 'pageload') {\n    // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n    // start of the response in milliseconds\n    if (typeof responseStartTimestamp === 'number') {\n      __DEBUG_BUILD__ && logger.log('[Measurements] Adding TTFB');\n      _measurements['ttfb'] = {\n        value: (responseStartTimestamp - transaction.startTimestamp) * 1000,\n        unit: 'millisecond',\n      };\n\n      if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n        // Capture the time spent making the request and receiving the first byte of the response.\n        // This is the time between the start of the request and the start of the response in milliseconds.\n        _measurements['ttfb.requestTime'] = {\n          value: (responseStartTimestamp - requestStartTimestamp) * 1000,\n          unit: 'millisecond',\n        };\n      }\n    }\n\n    ['fcp', 'fp', 'lcp'].forEach(name => {\n      if (!_measurements[name] || timeOrigin >= transaction.startTimestamp) {\n        return;\n      }\n      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n      const oldValue = _measurements[name].value;\n      const measurementTimestamp = timeOrigin + msToSec(oldValue);\n\n      // normalizedValue should be in milliseconds\n      const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n      const delta = normalizedValue - oldValue;\n\n      __DEBUG_BUILD__ &&\n        logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n      _measurements[name].value = normalizedValue;\n    });\n\n    const fidMark = _measurements['mark.fid'];\n    if (fidMark && _measurements['fid']) {\n      // create span for FID\n      _startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: fidMark.value + msToSec(_measurements['fid'].value),\n        op: 'ui.action',\n        startTimestamp: fidMark.value,\n      });\n\n      // Delete mark.fid as we don't want it to be part of final payload\n      delete _measurements['mark.fid'];\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n\n    Object.keys(_measurements).forEach(measurementName => {\n      transaction.setMeasurement(\n        measurementName,\n        _measurements[measurementName].value,\n        _measurements[measurementName].unit,\n      );\n    });\n\n    _tagMetricInfo(transaction);\n  }\n\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/** Create measure related spans */\nexport function _addMeasureSpans(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\n/** Instrument navigation entries */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  _addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  event: string,\n  timeOrigin: number,\n  description?: string,\n  eventEnd?: string,\n): void {\n  const end = eventEnd ? (entry[eventEnd] as number | undefined) : (entry[`${event}End`] as number | undefined);\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: description || event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n  renderBlockingStatus?: string;\n}\n\n/** Create resource-related spans */\nexport function _addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceName: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): void {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const data: Record<string, any> = {};\n  if ('transferSize' in entry) {\n    data['http.response_transfer_size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['http.response_content_length'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['http.decoded_response_content_length'] = entry.decodedBodySize;\n  }\n  if ('renderBlockingStatus' in entry) {\n    data['resource.render_blocking_status'] = entry.renderBlockingStatus;\n  }\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource.other',\n    startTimestamp,\n    data,\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(transaction: Transaction): void {\n  const navigator = WINDOW.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  const connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n\n    if (connection.type) {\n      transaction.setTag('connectionType', connection.type);\n    }\n\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = { value: connection.rtt, unit: 'millisecond' };\n    }\n  }\n\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    transaction.setTag('deviceMemory', `${navigator.deviceMemory} GB`);\n  }\n\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction _tagMetricInfo(transaction: Transaction): void {\n  if (_lcpEntry) {\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n\n    if (_lcpEntry.id) {\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (_clsEntry && _clsEntry.sources) {\n    __DEBUG_BUILD__ && logger.log('[Measurements] Adding CLS Data');\n    _clsEntry.sources.forEach((source, index) =>\n      transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}