{"ast":null,"code":"// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\n\nconst DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nfunction parseRetryAfterHeader(header) {\n  let now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nfunction disabledUntil(limits, category) {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nfunction isRateLimited(limits, category) {\n  let now = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Date.now();\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nfunction updateRateLimits(limits, _ref) {\n  let {\n    statusCode,\n    headers\n  } = _ref;\n  let now = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Date.now();\n  const updatedRateLimits = {\n    ...limits\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories] = limit.split(':', 2);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n  return updatedRateLimits;\n}\nexport { DEFAULT_RETRY_AFTER, disabledUntil, isRateLimited, parseRetryAfterHeader, updateRateLimits };","map":{"version":3,"names":["DEFAULT_RETRY_AFTER","parseRetryAfterHeader","header","now","arguments","length","undefined","Date","headerDelay","parseInt","isNaN","headerDate","parse","disabledUntil","limits","category","all","isRateLimited","updateRateLimits","_ref","statusCode","headers","updatedRateLimits","rateLimitHeader","retryAfterHeader","limit","trim","split","retryAfter","categories","delay"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/ratelimit.ts"],"sourcesContent":["import type { TransportMakeRequestResponse } from '@sentry/types';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nexport function disabledUntil(limits: RateLimits, category: string): number {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, category: string, now: number = Date.now()): boolean {\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories] = limit.split(':', 2);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n"],"mappings":"AAEA;;AAGA,MAAAA,mBAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAC,sBAAAC,MAAA;EAAA,IAAAC,GAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAAG,IAAA,CAAAJ,GAAA;EACA,MAAAK,WAAA,GAAAC,QAAA,IAAAP,MAAA;EACA,KAAAQ,KAAA,CAAAF,WAAA;IACA,OAAAA,WAAA;EACA;EAEA,MAAAG,UAAA,GAAAJ,IAAA,CAAAK,KAAA,IAAAV,MAAA;EACA,KAAAQ,KAAA,CAAAC,UAAA;IACA,OAAAA,UAAA,GAAAR,GAAA;EACA;EAEA,OAAAH,mBAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAa,cAAAC,MAAA,EAAAC,QAAA;EACA,OAAAD,MAAA,CAAAC,QAAA,KAAAD,MAAA,CAAAE,GAAA;AACA;;AAEA;AACA;AACA;AACA,SAAAC,cAAAH,MAAA,EAAAC,QAAA;EAAA,IAAAZ,GAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAAG,IAAA,CAAAJ,GAAA;EACA,OAAAU,aAAA,CAAAC,MAAA,EAAAC,QAAA,IAAAZ,GAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAAe,iBACAJ,MAAA,EAAAK,IAAA,EAGA;EAAA,IAFA;IAAAC,UAAA;IAAAC;EAAA,IAAAF,IAAA;EAAA,IACAhB,GAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAAG,IAAA,CAAAJ,GAAA;EAEA,MAAAmB,iBAAA;IACA,GAAAR;EACA;;EAEA;EACA;EACA,MAAAS,eAAA,GAAAF,OAAA,IAAAA,OAAA;EACA,MAAAG,gBAAA,GAAAH,OAAA,IAAAA,OAAA;EAEA,IAAAE,eAAA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,WAAAE,KAAA,IAAAF,eAAA,CAAAG,IAAA,GAAAC,KAAA;MACA,OAAAC,UAAA,EAAAC,UAAA,IAAAJ,KAAA,CAAAE,KAAA;MACA,MAAAnB,WAAA,GAAAC,QAAA,CAAAmB,UAAA;MACA,MAAAE,KAAA,KAAApB,KAAA,CAAAF,WAAA,IAAAA,WAAA;MACA,KAAAqB,UAAA;QACAP,iBAAA,CAAAN,GAAA,GAAAb,GAAA,GAAA2B,KAAA;MACA;QACA,WAAAf,QAAA,IAAAc,UAAA,CAAAF,KAAA;UACAL,iBAAA,CAAAP,QAAA,IAAAZ,GAAA,GAAA2B,KAAA;QACA;MACA;IACA;EACA,WAAAN,gBAAA;IACAF,iBAAA,CAAAN,GAAA,GAAAb,GAAA,GAAAF,qBAAA,CAAAuB,gBAAA,EAAArB,GAAA;EACA,WAAAiB,UAAA;IACAE,iBAAA,CAAAN,GAAA,GAAAb,GAAA;EACA;EAEA,OAAAmB,iBAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}