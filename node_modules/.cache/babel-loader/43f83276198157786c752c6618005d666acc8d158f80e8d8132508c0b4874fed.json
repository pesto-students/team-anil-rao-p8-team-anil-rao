{"ast":null,"code":"import _objectSpread from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { makeOfflineTransport } from '@sentry/core';\nimport { serializeEnvelope, parseEnvelope } from '@sentry/utils';\n\n// 'Store', 'promisifyRequest' and 'createStore' were originally copied from the 'idb-keyval' package before being\n// modified and simplified: https://github.com/jakearchibald/idb-keyval\n//\n// At commit: 0420a704fd6cbb4225429c536b1f61112d012fca\n// Original licence:\n\n// Copyright 2016, Jake Archibald\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction promisifyRequest(request) {\n  return new Promise(function (resolve, reject) {\n    // @ts-ignore - file size hacks\n    request.oncomplete = request.onsuccess = function () {\n      return resolve(request.result);\n    };\n    // @ts-ignore - file size hacks\n    request.onabort = request.onerror = function () {\n      return reject(request.error);\n    };\n  });\n}\n\n/** Create or open an IndexedDb store */\nfunction createStore(dbName, storeName) {\n  var request = indexedDB.open(dbName);\n  request.onupgradeneeded = function () {\n    return request.result.createObjectStore(storeName);\n  };\n  var dbp = promisifyRequest(request);\n  return function (callback) {\n    return dbp.then(function (db) {\n      return callback(db.transaction(storeName, 'readwrite').objectStore(storeName));\n    });\n  };\n}\nfunction keys(store) {\n  return promisifyRequest(store.getAllKeys());\n}\n\n/** Insert into the store */\nfunction _insert(store, value, maxQueueSize) {\n  return store(function (store) {\n    return keys(store).then(function (keys) {\n      if (keys.length >= maxQueueSize) {\n        return;\n      }\n\n      // We insert with an incremented key so that the entries are popped in order\n      store.put(value, Math.max.apply(Math, _toConsumableArray(keys).concat([0])) + 1);\n      return promisifyRequest(store.transaction);\n    });\n  });\n}\n\n/** Pop the oldest value from the store */\nfunction _pop(store) {\n  return store(function (store) {\n    return keys(store).then(function (keys) {\n      if (keys.length === 0) {\n        return undefined;\n      }\n      return promisifyRequest(store.get(keys[0])).then(function (value) {\n        store.delete(keys[0]);\n        return promisifyRequest(store.transaction).then(function () {\n          return value;\n        });\n      });\n    });\n  });\n}\nfunction createIndexedDbStore(options) {\n  var store;\n\n  // Lazily create the store only when it's needed\n  function getStore() {\n    if (store == undefined) {\n      store = createStore(options.dbName || 'sentry-offline', options.storeName || 'queue');\n    }\n    return store;\n  }\n  return {\n    insert: function () {\n      var _insert2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(env) {\n        var serialized;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return serializeEnvelope(env, options.textEncoder);\n            case 3:\n              serialized = _context.sent;\n              _context.next = 6;\n              return _insert(getStore(), serialized, options.maxQueueSize || 30);\n            case 6:\n              _context.next = 10;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n      function insert(_x) {\n        return _insert2.apply(this, arguments);\n      }\n      return insert;\n    }(),\n    pop: function () {\n      var _pop2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var deserialized;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _pop(getStore());\n            case 3:\n              deserialized = _context2.sent;\n              if (!deserialized) {\n                _context2.next = 6;\n                break;\n              }\n              return _context2.abrupt(\"return\", parseEnvelope(deserialized, options.textEncoder || new TextEncoder(), options.textDecoder || new TextDecoder()));\n            case 6:\n              _context2.next = 10;\n              break;\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n            case 10:\n              return _context2.abrupt(\"return\", undefined);\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 8]]);\n      }));\n      function pop() {\n        return _pop2.apply(this, arguments);\n      }\n      return pop;\n    }()\n  };\n}\nfunction makeIndexedDbOfflineTransport(createTransport) {\n  return function (options) {\n    return createTransport(_objectSpread(_objectSpread({}, options), {}, {\n      createStore: createIndexedDbStore\n    }));\n  };\n}\n\n/**\n * Creates a transport that uses IndexedDb to store events when offline.\n */\nfunction makeBrowserOfflineTransport(createTransport) {\n  return makeIndexedDbOfflineTransport(makeOfflineTransport(createTransport));\n}\nexport { createStore, _insert as insert, makeBrowserOfflineTransport, _pop as pop };","map":{"version":3,"names":["promisifyRequest","request","Promise","resolve","reject","oncomplete","onsuccess","result","onabort","onerror","error","createStore","dbName","storeName","indexedDB","open","onupgradeneeded","createObjectStore","dbp","callback","then","db","transaction","objectStore","keys","store","getAllKeys","insert","value","maxQueueSize","length","put","Math","max","apply","_toConsumableArray","concat","pop","undefined","get","delete","createIndexedDbStore","options","getStore","_insert2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","env","serialized","wrap","_callee$","_context","prev","next","serializeEnvelope","textEncoder","sent","t0","stop","_x","arguments","_pop2","_callee2","deserialized","_callee2$","_context2","abrupt","parseEnvelope","TextEncoder","textDecoder","TextDecoder","makeIndexedDbOfflineTransport","createTransport","_objectSpread","makeBrowserOfflineTransport","makeOfflineTransport"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/src/transports/offline.ts"],"sourcesContent":["import type { OfflineStore, OfflineTransportOptions } from '@sentry/core';\nimport { makeOfflineTransport } from '@sentry/core';\nimport type { Envelope, InternalBaseTransportOptions, Transport } from '@sentry/types';\nimport type { TextDecoderInternal } from '@sentry/utils';\nimport { parseEnvelope, serializeEnvelope } from '@sentry/utils';\n\n// 'Store', 'promisifyRequest' and 'createStore' were originally copied from the 'idb-keyval' package before being\n// modified and simplified: https://github.com/jakearchibald/idb-keyval\n//\n// At commit: 0420a704fd6cbb4225429c536b1f61112d012fca\n// Original licence:\n\n// Copyright 2016, Jake Archibald\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntype Store = <T>(callback: (store: IDBObjectStore) => T | PromiseLike<T>) => Promise<T>;\n\nfunction promisifyRequest<T = undefined>(request: IDBRequest<T> | IDBTransaction): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    // @ts-ignore - file size hacks\n    request.oncomplete = request.onsuccess = () => resolve(request.result);\n    // @ts-ignore - file size hacks\n    request.onabort = request.onerror = () => reject(request.error);\n  });\n}\n\n/** Create or open an IndexedDb store */\nexport function createStore(dbName: string, storeName: string): Store {\n  const request = indexedDB.open(dbName);\n  request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n  const dbp = promisifyRequest(request);\n\n  return callback => dbp.then(db => callback(db.transaction(storeName, 'readwrite').objectStore(storeName)));\n}\n\nfunction keys(store: IDBObjectStore): Promise<number[]> {\n  return promisifyRequest(store.getAllKeys() as IDBRequest<number[]>);\n}\n\n/** Insert into the store */\nexport function insert(store: Store, value: Uint8Array | string, maxQueueSize: number): Promise<void> {\n  return store(store => {\n    return keys(store).then(keys => {\n      if (keys.length >= maxQueueSize) {\n        return;\n      }\n\n      // We insert with an incremented key so that the entries are popped in order\n      store.put(value, Math.max(...keys, 0) + 1);\n      return promisifyRequest(store.transaction);\n    });\n  });\n}\n\n/** Pop the oldest value from the store */\nexport function pop(store: Store): Promise<Uint8Array | string | undefined> {\n  return store(store => {\n    return keys(store).then(keys => {\n      if (keys.length === 0) {\n        return undefined;\n      }\n\n      return promisifyRequest(store.get(keys[0])).then(value => {\n        store.delete(keys[0]);\n        return promisifyRequest(store.transaction).then(() => value);\n      });\n    });\n  });\n}\n\nexport interface BrowserOfflineTransportOptions extends OfflineTransportOptions {\n  /**\n   * Name of indexedDb database to store envelopes in\n   * Default: 'sentry-offline'\n   */\n  dbName?: string;\n  /**\n   * Name of indexedDb object store to store envelopes in\n   * Default: 'queue'\n   */\n  storeName?: string;\n  /**\n   * Maximum number of envelopes to store\n   * Default: 30\n   */\n  maxQueueSize?: number;\n  /**\n   * Only required for testing on node.js\n   * @ignore\n   */\n  textDecoder?: TextDecoderInternal;\n}\n\nfunction createIndexedDbStore(options: BrowserOfflineTransportOptions): OfflineStore {\n  let store: Store | undefined;\n\n  // Lazily create the store only when it's needed\n  function getStore(): Store {\n    if (store == undefined) {\n      store = createStore(options.dbName || 'sentry-offline', options.storeName || 'queue');\n    }\n\n    return store;\n  }\n\n  return {\n    insert: async (env: Envelope) => {\n      try {\n        const serialized = await serializeEnvelope(env, options.textEncoder);\n        await insert(getStore(), serialized, options.maxQueueSize || 30);\n      } catch (_) {\n        //\n      }\n    },\n    pop: async () => {\n      try {\n        const deserialized = await pop(getStore());\n        if (deserialized) {\n          return parseEnvelope(\n            deserialized,\n            options.textEncoder || new TextEncoder(),\n            options.textDecoder || new TextDecoder(),\n          );\n        }\n      } catch (_) {\n        //\n      }\n\n      return undefined;\n    },\n  };\n}\n\nfunction makeIndexedDbOfflineTransport<T>(\n  createTransport: (options: T) => Transport,\n): (options: T & BrowserOfflineTransportOptions) => Transport {\n  return options => createTransport({ ...options, createStore: createIndexedDbStore });\n}\n\n/**\n * Creates a transport that uses IndexedDb to store events when offline.\n */\nexport function makeBrowserOfflineTransport<T extends InternalBaseTransportOptions>(\n  createTransport: (options: T) => Transport,\n): (options: T & BrowserOfflineTransportOptions) => Transport {\n  return makeIndexedDbOfflineTransport<T>(makeOfflineTransport(createTransport));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}