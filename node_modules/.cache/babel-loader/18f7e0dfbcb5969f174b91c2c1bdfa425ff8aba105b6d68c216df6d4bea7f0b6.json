{"ast":null,"code":"import _classCallCheck from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { loadModule, logger, fill, isThenable } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\n\n/** Tracing integration for node-postgres package */\nvar Postgres = /*#__PURE__*/function () {\n  function Postgres() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Postgres);\n    Postgres.prototype.__init.call(this);\n    this._usePgNative = !!options.usePgNative;\n  }\n\n  /** @inheritdoc */\n  _createClass(Postgres, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Postgres.id;\n    }\n  }, {\n    key: \"loadDependency\",\n    value: function loadDependency() {\n      return this._module = this._module || loadModule('pg');\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Postgres Integration is skipped because of instrumenter configuration.');\n        return;\n      }\n      var pkg = this.loadDependency();\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Postgres Integration was unable to require `pg` package.');\n        return;\n      }\n      if (this._usePgNative && !_optionalChain([pkg, 'access', function (_2) {\n        return _2.native;\n      }, 'optionalAccess', function (_3) {\n        return _3.Client;\n      }])) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n        return;\n      }\n      var _ref = this._usePgNative ? pkg.native : pkg,\n        Client = _ref.Client;\n\n      /**\n       * function (query, callback) => void\n       * function (query, params, callback) => void\n       * function (query) => Promise\n       * function (query, params) => Promise\n       * function (pg.Cursor) => pg.Cursor\n       */\n      fill(Client.prototype, 'query', function (orig) {\n        return function (config, values, callback) {\n          var scope = getCurrentHub().getScope();\n          var parentSpan = _optionalChain([scope, 'optionalAccess', function (_4) {\n            return _4.getSpan;\n          }, 'call', function (_5) {\n            return _5();\n          }]);\n          var span = _optionalChain([parentSpan, 'optionalAccess', function (_6) {\n            return _6.startChild;\n          }, 'call', function (_7) {\n            return _7({\n              description: typeof config === 'string' ? config : config.text,\n              op: 'db',\n              data: {\n                'db.system': 'postgresql'\n              }\n            });\n          }]);\n          if (typeof callback === 'function') {\n            return orig.call(this, config, values, function (err, result) {\n              _optionalChain([span, 'optionalAccess', function (_8) {\n                return _8.finish;\n              }, 'call', function (_9) {\n                return _9();\n              }]);\n              callback(err, result);\n            });\n          }\n          if (typeof values === 'function') {\n            return orig.call(this, config, function (err, result) {\n              _optionalChain([span, 'optionalAccess', function (_10) {\n                return _10.finish;\n              }, 'call', function (_11) {\n                return _11();\n              }]);\n              values(err, result);\n            });\n          }\n          var rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n          if (isThenable(rv)) {\n            return rv.then(function (res) {\n              _optionalChain([span, 'optionalAccess', function (_12) {\n                return _12.finish;\n              }, 'call', function (_13) {\n                return _13();\n              }]);\n              return res;\n            });\n          }\n          _optionalChain([span, 'optionalAccess', function (_14) {\n            return _14.finish;\n          }, 'call', function (_15) {\n            return _15();\n          }]);\n          return rv;\n        };\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Postgres';\n    }\n  }]);\n  return Postgres;\n}();\nPostgres.__initStatic();\nexport { Postgres };","map":{"version":3,"names":["Postgres","options","arguments","length","undefined","_classCallCheck","prototype","__init","call","_usePgNative","usePgNative","_createClass","key","value","name","id","loadDependency","_module","loadModule","setupOnce","_","getCurrentHub","shouldDisableAutoInstrumentation","__SENTRY_DEBUG__","logger","log","pkg","error","_optionalChain","_2","native","_3","Client","_ref","fill","orig","config","values","callback","scope","getScope","parentSpan","_4","getSpan","_5","span","_6","startChild","_7","description","text","op","data","err","result","_8","finish","_9","_10","_11","rv","isThenable","then","res","_12","_13","_14","_15","__initStatic"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/node/integrations/postgres.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor } from '@sentry/types';\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport type { LazyLoadedIntegration } from './lazy';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ninterface PgClient {\n  prototype: {\n    query: () => void | Promise<unknown>;\n  };\n}\n\ninterface PgOptions {\n  usePgNative?: boolean;\n}\n\ntype PGModule = { Client: PgClient; native: { Client: PgClient } };\n\n/** Tracing integration for node-postgres package */\nexport class Postgres implements LazyLoadedIntegration<PGModule> {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Postgres';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Postgres.id;\n\n  private _usePgNative: boolean;\n\n  private _module?: PGModule;\n\n  public constructor(options: PgOptions = {}) {\n    this._usePgNative = !!options.usePgNative;\n  }\n\n  /** @inheritdoc */\n  public loadDependency(): PGModule | undefined {\n    return (this._module = this._module || loadModule('pg'));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      __DEBUG_BUILD__ && logger.log('Postgres Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const pkg = this.loadDependency();\n\n    if (!pkg) {\n      __DEBUG_BUILD__ && logger.error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n\n    if (this._usePgNative && !pkg.native?.Client) {\n      __DEBUG_BUILD__ && logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n      return;\n    }\n\n    const { Client } = this._usePgNative ? pkg.native : pkg;\n\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n    fill(Client.prototype, 'query', function (orig: () => void | Promise<unknown>) {\n      return function (this: unknown, config: unknown, values: unknown, callback: unknown) {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = scope?.getSpan();\n        const span = parentSpan?.startChild({\n          description: typeof config === 'string' ? config : (config as { text: string }).text,\n          op: 'db',\n          data: {\n            'db.system': 'postgresql',\n          },\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function (err: Error, result: unknown) {\n            span?.finish();\n            callback(err, result);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, config, function (err: Error, result: unknown) {\n            span?.finish();\n            values(err, result);\n          });\n        }\n\n        const rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n\n        if (isThenable(rv)) {\n          return rv.then((res: unknown) => {\n            span?.finish();\n            return res;\n          });\n        }\n\n        span?.finish();\n        return rv;\n      };\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}