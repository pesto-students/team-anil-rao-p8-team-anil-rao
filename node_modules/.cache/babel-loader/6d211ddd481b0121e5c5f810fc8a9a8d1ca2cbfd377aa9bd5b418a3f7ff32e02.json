{"ast":null,"code":"import { logger, browserPerformanceTimeOrigin, addInstrumentationHandler } from '@sentry/utils';\nimport { WINDOW } from './types.js';\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nfunction instrumentRoutingWithDefaults(customStartTransaction) {\n  var startTransactionOnPageLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var startTransactionOnLocationChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!WINDOW || !WINDOW.location) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n  var startingUrl = WINDOW.location.href;\n  var activeTransaction;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: WINDOW.location.pathname,\n      // pageload should always start at timeOrigin (and needs to be in s, not ms)\n      startTimestamp: browserPerformanceTimeOrigin ? browserPerformanceTimeOrigin / 1000 : undefined,\n      op: 'pageload',\n      metadata: {\n        source: 'url'\n      }\n    });\n  }\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler('history', function (_ref) {\n      var to = _ref.to,\n        from = _ref.from;\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(\"[Tracing] Finishing current transaction with op: \".concat(activeTransaction.op));\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({\n          name: WINDOW.location.pathname,\n          op: 'navigation',\n          metadata: {\n            source: 'url'\n          }\n        });\n      }\n    });\n  }\n}\nexport { instrumentRoutingWithDefaults };","map":{"version":3,"names":["instrumentRoutingWithDefaults","customStartTransaction","startTransactionOnPageLoad","arguments","length","undefined","startTransactionOnLocationChange","WINDOW","location","__SENTRY_DEBUG__","logger","warn","startingUrl","href","activeTransaction","name","pathname","startTimestamp","browserPerformanceTimeOrigin","op","metadata","source","addInstrumentationHandler","_ref","to","from","indexOf","log","concat","finish"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/browser/router.ts"],"sourcesContent":["import type { Transaction, TransactionContext } from '@sentry/types';\nimport { addInstrumentationHandler, browserPerformanceTimeOrigin, logger } from '@sentry/utils';\n\nimport { WINDOW } from './types';\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function instrumentRoutingWithDefaults<T extends Transaction>(\n  customStartTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!WINDOW || !WINDOW.location) {\n    __DEBUG_BUILD__ && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = WINDOW.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: WINDOW.location.pathname,\n      // pageload should always start at timeOrigin (and needs to be in s, not ms)\n      startTimestamp: browserPerformanceTimeOrigin ? browserPerformanceTimeOrigin / 1000 : undefined,\n      op: 'pageload',\n      metadata: { source: 'url' },\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler('history', ({ to, from }: { to: string; from?: string }) => {\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          __DEBUG_BUILD__ && logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({\n          name: WINDOW.location.pathname,\n          op: 'navigation',\n          metadata: { source: 'url' },\n        });\n      }\n    });\n  }\n}\n"],"mappings":";;;AAKA;AACA;AACA;AACA,SAAAA,8BACAC,sBAAA,EAGA;EAAA,IAFAC,0BAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;EAAA,IACAG,gCAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;EAEA,KAAAI,MAAA,KAAAA,MAAA,CAAAC,QAAA;IACA,QAAAC,gBAAA,oBAAAA,gBAAA,KAAAC,MAAA,CAAAC,IAAA;IACA;EACA;EAEA,IAAAC,WAAA,GAAAL,MAAA,CAAAC,QAAA,CAAAK,IAAA;EAEA,IAAAC,iBAAA;EACA,IAAAZ,0BAAA;IACAY,iBAAA,GAAAb,sBAAA;MACAc,IAAA,EAAAR,MAAA,CAAAC,QAAA,CAAAQ,QAAA;MACA;MACAC,cAAA,EAAAC,4BAAA,GAAAA,4BAAA,UAAAb,SAAA;MACAc,EAAA;MACAC,QAAA;QAAAC,MAAA;MAAA;IACA;EACA;EAEA,IAAAf,gCAAA;IACAgB,yBAAA,sBAAAC,IAAA;MAAA,IAAAC,EAAA,GAAAD,IAAA,CAAAC,EAAA;QAAAC,IAAA,GAAAF,IAAA,CAAAE,IAAA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACA,IAAAA,IAAA,KAAApB,SAAA,IAAAO,WAAA,IAAAA,WAAA,CAAAc,OAAA,CAAAF,EAAA;QACAZ,WAAA,GAAAP,SAAA;QACA;MACA;MAEA,IAAAoB,IAAA,KAAAD,EAAA;QACAZ,WAAA,GAAAP,SAAA;QACA,IAAAS,iBAAA;UACA,QAAAL,gBAAA,oBAAAA,gBAAA,KAAAC,MAAA,CAAAiB,GAAA,qDAAAC,MAAA,CAAAd,iBAAA,CAAAK,EAAA;UACA;UACAL,iBAAA,CAAAe,MAAA;QACA;QACAf,iBAAA,GAAAb,sBAAA;UACAc,IAAA,EAAAR,MAAA,CAAAC,QAAA,CAAAQ,QAAA;UACAG,EAAA;UACAC,QAAA;YAAAC,MAAA;UAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}