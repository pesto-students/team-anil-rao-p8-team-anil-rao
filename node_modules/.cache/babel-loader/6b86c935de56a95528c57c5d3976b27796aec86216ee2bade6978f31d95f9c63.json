{"ast":null,"code":"import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { loadModule, logger, fill, isThenable } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\n\n/** Tracing integration for node-postgres package */\nclass Postgres {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Postgres';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = Postgres.id;\n  }\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Postgres.prototype.__init.call(this);\n    this._usePgNative = !!options.usePgNative;\n  }\n\n  /** @inheritdoc */\n  loadDependency() {\n    return this._module = this._module || loadModule('pg');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(_, getCurrentHub) {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Postgres Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n    const pkg = this.loadDependency();\n    if (!pkg) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n    if (this._usePgNative && !_optionalChain([pkg, 'access', _2 => _2.native, 'optionalAccess', _3 => _3.Client])) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n      return;\n    }\n    const {\n      Client\n    } = this._usePgNative ? pkg.native : pkg;\n\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n    fill(Client.prototype, 'query', function (orig) {\n      return function (config, values, callback) {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = _optionalChain([scope, 'optionalAccess', _4 => _4.getSpan, 'call', _5 => _5()]);\n        const span = _optionalChain([parentSpan, 'optionalAccess', _6 => _6.startChild, 'call', _7 => _7({\n          description: typeof config === 'string' ? config : config.text,\n          op: 'db',\n          data: {\n            'db.system': 'postgresql'\n          }\n        })]);\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function (err, result) {\n            _optionalChain([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);\n            callback(err, result);\n          });\n        }\n        if (typeof values === 'function') {\n          return orig.call(this, config, function (err, result) {\n            _optionalChain([span, 'optionalAccess', _10 => _10.finish, 'call', _11 => _11()]);\n            values(err, result);\n          });\n        }\n        const rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n        if (isThenable(rv)) {\n          return rv.then(res => {\n            _optionalChain([span, 'optionalAccess', _12 => _12.finish, 'call', _13 => _13()]);\n            return res;\n          });\n        }\n        _optionalChain([span, 'optionalAccess', _14 => _14.finish, 'call', _15 => _15()]);\n        return rv;\n      };\n    });\n  }\n}\nPostgres.__initStatic();\nexport { Postgres };","map":{"version":3,"names":["Postgres","__initStatic","id","__init","name","constructor","options","arguments","length","undefined","prototype","call","_usePgNative","usePgNative","loadDependency","_module","loadModule","setupOnce","_","getCurrentHub","shouldDisableAutoInstrumentation","__SENTRY_DEBUG__","logger","log","pkg","error","_optionalChain","_2","native","_3","Client","fill","orig","config","values","callback","scope","getScope","parentSpan","_4","getSpan","_5","span","_6","startChild","_7","description","text","op","data","err","result","_8","finish","_9","_10","_11","rv","isThenable","then","res","_12","_13","_14","_15"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/node/integrations/postgres.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor } from '@sentry/types';\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport type { LazyLoadedIntegration } from './lazy';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ninterface PgClient {\n  prototype: {\n    query: () => void | Promise<unknown>;\n  };\n}\n\ninterface PgOptions {\n  usePgNative?: boolean;\n}\n\ntype PGModule = { Client: PgClient; native: { Client: PgClient } };\n\n/** Tracing integration for node-postgres package */\nexport class Postgres implements LazyLoadedIntegration<PGModule> {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Postgres';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Postgres.id;\n\n  private _usePgNative: boolean;\n\n  private _module?: PGModule;\n\n  public constructor(options: PgOptions = {}) {\n    this._usePgNative = !!options.usePgNative;\n  }\n\n  /** @inheritdoc */\n  public loadDependency(): PGModule | undefined {\n    return (this._module = this._module || loadModule('pg'));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      __DEBUG_BUILD__ && logger.log('Postgres Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const pkg = this.loadDependency();\n\n    if (!pkg) {\n      __DEBUG_BUILD__ && logger.error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n\n    if (this._usePgNative && !pkg.native?.Client) {\n      __DEBUG_BUILD__ && logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n      return;\n    }\n\n    const { Client } = this._usePgNative ? pkg.native : pkg;\n\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n    fill(Client.prototype, 'query', function (orig: () => void | Promise<unknown>) {\n      return function (this: unknown, config: unknown, values: unknown, callback: unknown) {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = scope?.getSpan();\n        const span = parentSpan?.startChild({\n          description: typeof config === 'string' ? config : (config as { text: string }).text,\n          op: 'db',\n          data: {\n            'db.system': 'postgresql',\n          },\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function (err: Error, result: unknown) {\n            span?.finish();\n            callback(err, result);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, config, function (err: Error, result: unknown) {\n            span?.finish();\n            values(err, result);\n          });\n        }\n\n        const rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n\n        if (isThenable(rv)) {\n          return rv.then((res: unknown) => {\n            span?.finish();\n            return res;\n          });\n        }\n\n        span?.finish();\n        return rv;\n      };\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}