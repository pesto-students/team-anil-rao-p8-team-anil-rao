{"ast":null,"code":"import { WINDOW } from '@sentry/browser';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nconst _jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/reactrouter.tsx\";\n// We need to disable eslint no-explict-any because any is required for the\n// react-router typings.\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nlet activeTransaction;\nfunction reactRouterV4Instrumentation(history, routes, matchPath) {\n  return createReactRouterInstrumentation(history, 'react-router-v4', routes, matchPath);\n}\nfunction reactRouterV5Instrumentation(history, routes, matchPath) {\n  return createReactRouterInstrumentation(history, 'react-router-v5', routes, matchPath);\n}\nfunction createReactRouterInstrumentation(history, name) {\n  let allRoutes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let matchPath = arguments.length > 3 ? arguments[3] : undefined;\n  function getInitPathName() {\n    if (history && history.location) {\n      return history.location.pathname;\n    }\n    if (WINDOW && WINDOW.location) {\n      return WINDOW.location.pathname;\n    }\n    return undefined;\n  }\n\n  /**\n   * Normalizes a transaction name. Returns the new name as well as the\n   * source of the transaction.\n   *\n   * @param pathname The initial pathname we normalize\n   */\n  function normalizeTransactionName(pathname) {\n    if (allRoutes.length === 0 || !matchPath) {\n      return [pathname, 'url'];\n    }\n    const branches = matchRoutes(allRoutes, pathname, matchPath);\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let x = 0; x < branches.length; x++) {\n      if (branches[x].match.isExact) {\n        return [branches[x].match.path, 'route'];\n      }\n    }\n    return [pathname, 'url'];\n  }\n  const tags = {\n    'routing.instrumentation': name\n  };\n  return function (customStartTransaction) {\n    let startTransactionOnPageLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let startTransactionOnLocationChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const initPathName = getInitPathName();\n    if (startTransactionOnPageLoad && initPathName) {\n      const [name, source] = normalizeTransactionName(initPathName);\n      activeTransaction = customStartTransaction({\n        name,\n        op: 'pageload',\n        tags,\n        metadata: {\n          source\n        }\n      });\n    }\n    if (startTransactionOnLocationChange && history.listen) {\n      history.listen((location, action) => {\n        if (action && (action === 'PUSH' || action === 'POP')) {\n          if (activeTransaction) {\n            activeTransaction.finish();\n          }\n          const [name, source] = normalizeTransactionName(location.pathname);\n          activeTransaction = customStartTransaction({\n            name,\n            op: 'navigation',\n            tags,\n            metadata: {\n              source\n            }\n          });\n        }\n      });\n    }\n  };\n}\n\n/**\n * Matches a set of routes to a pathname\n * Based on implementation from\n */\nfunction matchRoutes(routes, pathname, matchPath) {\n  let branch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  routes.some(route => {\n    const match = route.path ? matchPath(pathname, route) : branch.length ? branch[branch.length - 1].match // use parent match\n    : computeRootMatch(pathname); // use default \"root\" match\n\n    if (match) {\n      branch.push({\n        route,\n        match\n      });\n      if (route.routes) {\n        matchRoutes(route.routes, pathname, matchPath, branch);\n      }\n    }\n    return !!match;\n  });\n  return branch;\n}\nfunction computeRootMatch(pathname) {\n  return {\n    path: '/',\n    url: '/',\n    params: {},\n    isExact: pathname === '/'\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\nfunction withSentryRouting(Route) {\n  const componentDisplayName = Route.displayName || Route.name;\n  const WrappedRoute = props => {\n    if (activeTransaction && props && props.computedMatch && props.computedMatch.isExact) {\n      activeTransaction.setName(props.computedMatch.path, 'route');\n    }\n\n    // @ts-ignore Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params:\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n    return React.createElement(Route, {\n      ...props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      }\n    });\n  };\n  WrappedRoute.displayName = `sentryRoute(${componentDisplayName})`;\n  hoistNonReactStatics(WrappedRoute, Route);\n  // @ts-ignore Setting more specific React Component typing for `R` generic above\n  // will break advanced type inference done by react router params:\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n  return WrappedRoute;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n\nexport { reactRouterV4Instrumentation, reactRouterV5Instrumentation, withSentryRouting };","map":{"version":3,"names":["_jsxFileName","activeTransaction","reactRouterV4Instrumentation","history","routes","matchPath","createReactRouterInstrumentation","reactRouterV5Instrumentation","name","allRoutes","arguments","length","undefined","getInitPathName","location","pathname","WINDOW","normalizeTransactionName","branches","matchRoutes","x","match","isExact","path","tags","customStartTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","initPathName","source","op","metadata","listen","action","finish","branch","some","route","computeRootMatch","push","url","params","withSentryRouting","Route","componentDisplayName","displayName","WrappedRoute","props","computedMatch","setName","React","createElement","__self","__source","fileName","lineNumber","hoistNonReactStatics"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/reactrouter.tsx"],"sourcesContent":["import { WINDOW } from '@sentry/browser';\nimport type { Transaction, TransactionSource } from '@sentry/types';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\n\nimport type { Action, Location, ReactRouterInstrumentation } from './types';\n\n// We need to disable eslint no-explict-any because any is required for the\n// react-router typings.\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype Match = { path: string; url: string; params: Record<string, any>; isExact: boolean };\n\nexport type RouterHistory = {\n  location?: Location;\n  listen?(cb: (location: Location, action: Action) => void): void;\n} & Record<string, any>;\n\nexport type RouteConfig = {\n  [propName: string]: any;\n  path?: string | string[];\n  exact?: boolean;\n  component?: JSX.Element;\n  routes?: RouteConfig[];\n};\n\ntype MatchPath = (pathname: string, props: string | string[] | any, parent?: Match | null) => Match | null;\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nlet activeTransaction: Transaction | undefined;\n\nexport function reactRouterV4Instrumentation(\n  history: RouterHistory,\n  routes?: RouteConfig[],\n  matchPath?: MatchPath,\n): ReactRouterInstrumentation {\n  return createReactRouterInstrumentation(history, 'react-router-v4', routes, matchPath);\n}\n\nexport function reactRouterV5Instrumentation(\n  history: RouterHistory,\n  routes?: RouteConfig[],\n  matchPath?: MatchPath,\n): ReactRouterInstrumentation {\n  return createReactRouterInstrumentation(history, 'react-router-v5', routes, matchPath);\n}\n\nfunction createReactRouterInstrumentation(\n  history: RouterHistory,\n  name: string,\n  allRoutes: RouteConfig[] = [],\n  matchPath?: MatchPath,\n): ReactRouterInstrumentation {\n  function getInitPathName(): string | undefined {\n    if (history && history.location) {\n      return history.location.pathname;\n    }\n\n    if (WINDOW && WINDOW.location) {\n      return WINDOW.location.pathname;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Normalizes a transaction name. Returns the new name as well as the\n   * source of the transaction.\n   *\n   * @param pathname The initial pathname we normalize\n   */\n  function normalizeTransactionName(pathname: string): [string, TransactionSource] {\n    if (allRoutes.length === 0 || !matchPath) {\n      return [pathname, 'url'];\n    }\n\n    const branches = matchRoutes(allRoutes, pathname, matchPath);\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let x = 0; x < branches.length; x++) {\n      if (branches[x].match.isExact) {\n        return [branches[x].match.path, 'route'];\n      }\n    }\n\n    return [pathname, 'url'];\n  }\n\n  const tags = {\n    'routing.instrumentation': name,\n  };\n\n  return (customStartTransaction, startTransactionOnPageLoad = true, startTransactionOnLocationChange = true): void => {\n    const initPathName = getInitPathName();\n    if (startTransactionOnPageLoad && initPathName) {\n      const [name, source] = normalizeTransactionName(initPathName);\n      activeTransaction = customStartTransaction({\n        name,\n        op: 'pageload',\n        tags,\n        metadata: {\n          source,\n        },\n      });\n    }\n\n    if (startTransactionOnLocationChange && history.listen) {\n      history.listen((location, action) => {\n        if (action && (action === 'PUSH' || action === 'POP')) {\n          if (activeTransaction) {\n            activeTransaction.finish();\n          }\n\n          const [name, source] = normalizeTransactionName(location.pathname);\n          activeTransaction = customStartTransaction({\n            name,\n            op: 'navigation',\n            tags,\n            metadata: {\n              source,\n            },\n          });\n        }\n      });\n    }\n  };\n}\n\n/**\n * Matches a set of routes to a pathname\n * Based on implementation from\n */\nfunction matchRoutes(\n  routes: RouteConfig[],\n  pathname: string,\n  matchPath: MatchPath,\n  branch: Array<{ route: RouteConfig; match: Match }> = [],\n): Array<{ route: RouteConfig; match: Match }> {\n  routes.some(route => {\n    const match = route.path\n      ? matchPath(pathname, route)\n      : branch.length\n      ? branch[branch.length - 1].match // use parent match\n      : computeRootMatch(pathname); // use default \"root\" match\n\n    if (match) {\n      branch.push({ route, match });\n\n      if (route.routes) {\n        matchRoutes(route.routes, pathname, matchPath, branch);\n      }\n    }\n\n    return !!match;\n  });\n\n  return branch;\n}\n\nfunction computeRootMatch(pathname: string): Match {\n  return { path: '/', url: '/', params: {}, isExact: pathname === '/' };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\nexport function withSentryRouting<P extends Record<string, any>, R extends React.ComponentType<P>>(Route: R): R {\n  const componentDisplayName = (Route as any).displayName || (Route as any).name;\n\n  const WrappedRoute: React.FC<P> = (props: P) => {\n    if (activeTransaction && props && props.computedMatch && props.computedMatch.isExact) {\n      activeTransaction.setName(props.computedMatch.path, 'route');\n    }\n\n    // @ts-ignore Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params:\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n    return <Route {...props} />;\n  };\n\n  WrappedRoute.displayName = `sentryRoute(${componentDisplayName})`;\n  hoistNonReactStatics(WrappedRoute, Route);\n  // @ts-ignore Setting more specific React Component typing for `R` generic above\n  // will break advanced type inference done by react router params:\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n  return WrappedRoute;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}