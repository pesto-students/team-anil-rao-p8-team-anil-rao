{"ast":null,"code":"import { bindReporter } from './lib/bindReporter.js';\nimport { getActivationStart } from './lib/getActivationStart.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst reportedMetricIDs = {};\n\n/**\n * Calculates the [LCP](https://web.dev/lcp/) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n */\nconst onLCP = onReport => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report;\n  const handleEntries = entries => {\n    const lastEntry = entries[entries.length - 1];\n    if (lastEntry) {\n      // The startTime attribute returns the value of the renderTime if it is\n      // not 0, and the value of the loadTime otherwise. The activationStart\n      // reference is used because LCP should be relative to page activation\n      // rather than navigation start if the page was prerendered.\n      const value = Math.max(lastEntry.startTime - getActivationStart(), 0);\n\n      // Only report if the page wasn't hidden prior to LCP.\n      if (value < visibilityWatcher.firstHiddenTime) {\n        metric.value = value;\n        metric.entries = [lastEntry];\n        report();\n      }\n    }\n  };\n  const po = observe('largest-contentful-paint', handleEntries);\n  if (po) {\n    report = bindReporter(onReport, metric);\n    const stopListening = () => {\n      if (!reportedMetricIDs[metric.id]) {\n        handleEntries(po.takeRecords());\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, {\n        once: true,\n        capture: true\n      });\n    });\n    onHidden(stopListening, true);\n    return stopListening;\n  }\n  return;\n};\nexport { onLCP };","map":{"version":3,"names":["reportedMetricIDs","onLCP","onReport","visibilityWatcher","getVisibilityWatcher","metric","initMetric","report","handleEntries","entries","lastEntry","length","value","Math","max","startTime","getActivationStart","firstHiddenTime","po","observe","bindReporter","stopListening","id","takeRecords","disconnect","forEach","type","addEventListener","once","capture","onHidden"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/browser/web-vitals/getLCP.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport type { LCPMetric, ReportCallback, StopListening } from './types';\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\n/**\n * Calculates the [LCP](https://web.dev/lcp/) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n */\nexport const onLCP = (onReport: ReportCallback): StopListening | undefined => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const handleEntries = (entries: LCPMetric['entries']): void => {\n    const lastEntry = entries[entries.length - 1] as LargestContentfulPaint;\n    if (lastEntry) {\n      // The startTime attribute returns the value of the renderTime if it is\n      // not 0, and the value of the loadTime otherwise. The activationStart\n      // reference is used because LCP should be relative to page activation\n      // rather than navigation start if the page was prerendered.\n      const value = Math.max(lastEntry.startTime - getActivationStart(), 0);\n\n      // Only report if the page wasn't hidden prior to LCP.\n      if (value < visibilityWatcher.firstHiddenTime) {\n        metric.value = value;\n        metric.entries = [lastEntry];\n        report();\n      }\n    }\n  };\n\n  const po = observe('largest-contentful-paint', handleEntries);\n\n  if (po) {\n    report = bindReporter(onReport, metric);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        handleEntries(po.takeRecords() as LCPMetric['entries']);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n\n    return stopListening;\n  }\n\n  return;\n};\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA,MAAAA,iBAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAAC,KAAA,GAAAC,QAAA;EACA,MAAAC,iBAAA,GAAAC,oBAAA;EACA,MAAAC,MAAA,GAAAC,UAAA;EACA,IAAAC,MAAA;EAEA,MAAAC,aAAA,GAAAC,OAAA;IACA,MAAAC,SAAA,GAAAD,OAAA,CAAAA,OAAA,CAAAE,MAAA;IACA,IAAAD,SAAA;MACA;MACA;MACA;MACA;MACA,MAAAE,KAAA,GAAAC,IAAA,CAAAC,GAAA,CAAAJ,SAAA,CAAAK,SAAA,GAAAC,kBAAA;;MAEA;MACA,IAAAJ,KAAA,GAAAT,iBAAA,CAAAc,eAAA;QACAZ,MAAA,CAAAO,KAAA,GAAAA,KAAA;QACAP,MAAA,CAAAI,OAAA,IAAAC,SAAA;QACAH,MAAA;MACA;IACA;EACA;EAEA,MAAAW,EAAA,GAAAC,OAAA,6BAAAX,aAAA;EAEA,IAAAU,EAAA;IACAX,MAAA,GAAAa,YAAA,CAAAlB,QAAA,EAAAG,MAAA;IAEA,MAAAgB,aAAA,GAAAA,CAAA;MACA,KAAArB,iBAAA,CAAAK,MAAA,CAAAiB,EAAA;QACAd,aAAA,CAAAU,EAAA,CAAAK,WAAA;QACAL,EAAA,CAAAM,UAAA;QACAxB,iBAAA,CAAAK,MAAA,CAAAiB,EAAA;QACAf,MAAA;MACA;IACA;;IAEA;IACA;IACA;IACA,qBAAAkB,OAAA,CAAAC,IAAA;MACAC,gBAAA,CAAAD,IAAA,EAAAL,aAAA;QAAAO,IAAA;QAAAC,OAAA;MAAA;IACA;IAEAC,QAAA,CAAAT,aAAA;IAEA,OAAAA,aAAA;EACA;EAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}