{"ast":null,"code":"import { isString } from './is.js';\nimport { getGlobalObject } from './worldwide.js';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject();\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction htmlTreeAsString(elem) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = !Array.isArray(options) && options.maxStringLength || DEFAULT_MAX_STRING_LENGTH;\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {\n        break;\n      }\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el, keyAttrs) {\n  const elem = el;\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)]) : null;\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nfunction getLocationHref() {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getDomElement(selector) {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector);\n  }\n  return null;\n}\nexport { getDomElement, getLocationHref, htmlTreeAsString };","map":{"version":3,"names":["WINDOW","getGlobalObject","DEFAULT_MAX_STRING_LENGTH","htmlTreeAsString","elem","options","arguments","length","undefined","currentElem","MAX_TRAVERSE_HEIGHT","out","height","len","separator","sepLength","nextStr","keyAttrs","Array","isArray","maxStringLength","_htmlElementAsString","push","parentNode","reverse","join","_oO","el","className","classes","key","attr","i","tagName","toLowerCase","keyAttrPairs","filter","keyAttr","getAttribute","map","forEach","keyAttrPair","id","isString","split","allowedAttrs","getLocationHref","document","location","href","oO","getDomElement","selector","querySelector"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/browser.ts"],"sourcesContent":["import { isString } from './is';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(\n  elem: unknown,\n  options: string[] | { keyAttrs?: string[]; maxStringLength?: number } = {},\n): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getDomElement<E = any>(selector: string): E | null {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector) as unknown as E;\n  }\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}