{"ast":null,"code":"import { logger } from '@sentry/utils';\n\n/** Deduplication filter */\nclass Dedupe {\n  constructor() {\n    Dedupe.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Dedupe';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = Dedupe.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(addGlobalEventProcessor, getCurrentHub) {\n    const eventProcessor = currentEvent => {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return self._previousEvent = currentEvent;\n        }\n        return self._previousEvent = currentEvent;\n      }\n      return currentEvent;\n    };\n    eventProcessor.id = this.name;\n    addGlobalEventProcessor(eventProcessor);\n  }\n}\nDedupe.__initStatic();\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentMessage && !previousMessage || !currentMessage && previousMessage) {\n    return false;\n  }\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n  if (!previousException || !currentException) {\n    return false;\n  }\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentFrames && !previousFrames || !currentFrames && previousFrames) {\n    return false;\n  }\n  currentFrames = currentFrames;\n  previousFrames = previousFrames;\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n    if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {\n    return false;\n  }\n  currentFingerprint = currentFingerprint;\n  previousFingerprint = previousFingerprint;\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event) {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event) {\n  const exception = event.exception;\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\nexport { Dedupe };","map":{"version":3,"names":["Dedupe","constructor","prototype","__init","call","__initStatic","id","name","setupOnce","addGlobalEventProcessor","getCurrentHub","eventProcessor","currentEvent","type","self","getIntegration","_shouldDropEvent","_previousEvent","__SENTRY_DEBUG__","logger","warn","_oO","previousEvent","_isSameMessageEvent","_isSameExceptionEvent","currentMessage","message","previousMessage","_isSameFingerprint","_isSameStacktrace","previousException","_getExceptionFromEvent","currentException","value","currentFrames","_getFramesFromEvent","previousFrames","length","i","frameA","frameB","filename","lineno","colno","function","currentFingerprint","fingerprint","previousFingerprint","join","event","exception","values","stacktrace","frames","undefined"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/src/integrations/dedupe.ts"],"sourcesContent":["import type { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const eventProcessor: EventProcessor = currentEvent => {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            __DEBUG_BUILD__ && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    };\n\n    eventProcessor.id = this.name;\n    addGlobalEventProcessor(eventProcessor);\n  }\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n"],"mappings":";;AAGA;AACA,MAAAA,MAAA;EAAAC,YAAA;IAAAD,MAAA,CAAAE,SAAA,CAAAC,MAAA,CAAAC,IAAA;EAAA;EACA;AACA;AACA;EACA,OAAAC,aAAA;IAAA,KAAAC,EAAA;EAAA;;EAEA;AACA;AACA;EACAH,OAAA;IAAA,KAAAI,IAAA,GAAAP,MAAA,CAAAM,EAAA;EAAA;;EAEA;AACA;AACA;;EAGA;AACA;AACA;EACAE,UAAAC,uBAAA,EAAAC,aAAA;IACA,MAAAC,cAAA,GAAAC,YAAA;MACA;MACA;MACA,IAAAA,YAAA,CAAAC,IAAA;QACA,OAAAD,YAAA;MACA;MAEA,MAAAE,IAAA,GAAAJ,aAAA,GAAAK,cAAA,CAAAf,MAAA;MACA,IAAAc,IAAA;QACA;QACA;UACA,IAAAE,gBAAA,CAAAJ,YAAA,EAAAE,IAAA,CAAAG,cAAA;YACA,QAAAC,gBAAA,oBAAAA,gBAAA,KAAAC,MAAA,CAAAC,IAAA;YACA;UACA;QACA,SAAAC,GAAA;UACA,OAAAP,IAAA,CAAAG,cAAA,GAAAL,YAAA;QACA;QAEA,OAAAE,IAAA,CAAAG,cAAA,GAAAL,YAAA;MACA;MACA,OAAAA,YAAA;IACA;IAEAD,cAAA,CAAAL,EAAA,QAAAC,IAAA;IACAE,uBAAA,CAAAE,cAAA;EACA;AACA;AAAAX,MAAA,CAAAK,YAAA;;AAEA;AACA,SAAAW,iBAAAJ,YAAA,EAAAU,aAAA;EACA,KAAAA,aAAA;IACA;EACA;EAEA,IAAAC,mBAAA,CAAAX,YAAA,EAAAU,aAAA;IACA;EACA;EAEA,IAAAE,qBAAA,CAAAZ,YAAA,EAAAU,aAAA;IACA;EACA;EAEA;AACA;;AAEA;AACA,SAAAC,oBAAAX,YAAA,EAAAU,aAAA;EACA,MAAAG,cAAA,GAAAb,YAAA,CAAAc,OAAA;EACA,MAAAC,eAAA,GAAAL,aAAA,CAAAI,OAAA;;EAEA;EACA,KAAAD,cAAA,KAAAE,eAAA;IACA;EACA;;EAEA;EACA,IAAAF,cAAA,KAAAE,eAAA,KAAAF,cAAA,IAAAE,eAAA;IACA;EACA;EAEA,IAAAF,cAAA,KAAAE,eAAA;IACA;EACA;EAEA,KAAAC,kBAAA,CAAAhB,YAAA,EAAAU,aAAA;IACA;EACA;EAEA,KAAAO,iBAAA,CAAAjB,YAAA,EAAAU,aAAA;IACA;EACA;EAEA;AACA;;AAEA;AACA,SAAAE,sBAAAZ,YAAA,EAAAU,aAAA;EACA,MAAAQ,iBAAA,GAAAC,sBAAA,CAAAT,aAAA;EACA,MAAAU,gBAAA,GAAAD,sBAAA,CAAAnB,YAAA;EAEA,KAAAkB,iBAAA,KAAAE,gBAAA;IACA;EACA;EAEA,IAAAF,iBAAA,CAAAjB,IAAA,KAAAmB,gBAAA,CAAAnB,IAAA,IAAAiB,iBAAA,CAAAG,KAAA,KAAAD,gBAAA,CAAAC,KAAA;IACA;EACA;EAEA,KAAAL,kBAAA,CAAAhB,YAAA,EAAAU,aAAA;IACA;EACA;EAEA,KAAAO,iBAAA,CAAAjB,YAAA,EAAAU,aAAA;IACA;EACA;EAEA;AACA;;AAEA;AACA,SAAAO,kBAAAjB,YAAA,EAAAU,aAAA;EACA,IAAAY,aAAA,GAAAC,mBAAA,CAAAvB,YAAA;EACA,IAAAwB,cAAA,GAAAD,mBAAA,CAAAb,aAAA;;EAEA;EACA,KAAAY,aAAA,KAAAE,cAAA;IACA;EACA;;EAEA;EACA,IAAAF,aAAA,KAAAE,cAAA,KAAAF,aAAA,IAAAE,cAAA;IACA;EACA;EAEAF,aAAA,GAAAA,aAAA;EACAE,cAAA,GAAAA,cAAA;;EAEA;EACA,IAAAA,cAAA,CAAAC,MAAA,KAAAH,aAAA,CAAAG,MAAA;IACA;EACA;;EAEA;EACA,SAAAC,CAAA,MAAAA,CAAA,GAAAF,cAAA,CAAAC,MAAA,EAAAC,CAAA;IACA,MAAAC,MAAA,GAAAH,cAAA,CAAAE,CAAA;IACA,MAAAE,MAAA,GAAAN,aAAA,CAAAI,CAAA;IAEA,IACAC,MAAA,CAAAE,QAAA,KAAAD,MAAA,CAAAC,QAAA,IACAF,MAAA,CAAAG,MAAA,KAAAF,MAAA,CAAAE,MAAA,IACAH,MAAA,CAAAI,KAAA,KAAAH,MAAA,CAAAG,KAAA,IACAJ,MAAA,CAAAK,QAAA,KAAAJ,MAAA,CAAAI,QAAA,EACA;MACA;IACA;EACA;EAEA;AACA;;AAEA;AACA,SAAAhB,mBAAAhB,YAAA,EAAAU,aAAA;EACA,IAAAuB,kBAAA,GAAAjC,YAAA,CAAAkC,WAAA;EACA,IAAAC,mBAAA,GAAAzB,aAAA,CAAAwB,WAAA;;EAEA;EACA,KAAAD,kBAAA,KAAAE,mBAAA;IACA;EACA;;EAEA;EACA,IAAAF,kBAAA,KAAAE,mBAAA,KAAAF,kBAAA,IAAAE,mBAAA;IACA;EACA;EAEAF,kBAAA,GAAAA,kBAAA;EACAE,mBAAA,GAAAA,mBAAA;;EAEA;EACA;IACA,UAAAF,kBAAA,CAAAG,IAAA,SAAAD,mBAAA,CAAAC,IAAA;EACA,SAAA3B,GAAA;IACA;EACA;AACA;;AAEA;AACA,SAAAU,uBAAAkB,KAAA;EACA,OAAAA,KAAA,CAAAC,SAAA,IAAAD,KAAA,CAAAC,SAAA,CAAAC,MAAA,IAAAF,KAAA,CAAAC,SAAA,CAAAC,MAAA;AACA;;AAEA;AACA,SAAAhB,oBAAAc,KAAA;EACA,MAAAC,SAAA,GAAAD,KAAA,CAAAC,SAAA;EAEA,IAAAA,SAAA;IACA;MACA;MACA,OAAAA,SAAA,CAAAC,MAAA,IAAAC,UAAA,CAAAC,MAAA;IACA,SAAAhC,GAAA;MACA,OAAAiC,SAAA;IACA;EACA;EACA,OAAAA,SAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}