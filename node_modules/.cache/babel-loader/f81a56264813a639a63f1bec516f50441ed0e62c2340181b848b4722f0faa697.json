{"ast":null,"code":"import { uuid4, dateTimestampInSeconds, consoleSandbox, logger, GLOBAL_OBJ, getGlobalSingleton } from '@sentry/utils';\nimport { DEFAULT_ENVIRONMENT } from './constants.js';\nimport { Scope } from './scope.js';\nimport { closeSession, makeSession, updateSession } from './session.js';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nconst API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * @inheritDoc\n */\nclass Hub {\n  /** Is a {@link Layer}[] containing the client and scope */\n\n  /** Contains the last event id of a captured event.  */\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  constructor(client) {\n    let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Scope();\n    let _version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : API_VERSION;\n    this._version = _version;\n    this._stack = [{\n      scope\n    }];\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isOlderThan(version) {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  bindClient(client) {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  pushScope() {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  popScope() {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withScope(callback) {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getClient() {\n    return this.getStackTop().client;\n  }\n\n  /** Returns the scope of the top stack. */\n  getScope() {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  getStack() {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  getStackTop() {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureException(exception, hint) {\n    const eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();\n    const syntheticException = new Error('Sentry syntheticException');\n    this._withClient((client, scope) => {\n      client.captureException(exception, {\n        originalException: exception,\n        syntheticException,\n        ...hint,\n        event_id: eventId\n      }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureMessage(message,\n  // eslint-disable-next-line deprecation/deprecation\n  level, hint) {\n    const eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();\n    const syntheticException = new Error(message);\n    this._withClient((client, scope) => {\n      client.captureMessage(message, level, {\n        originalException: message,\n        syntheticException,\n        ...hint,\n        event_id: eventId\n      }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureEvent(event, hint) {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (!event.type) {\n      this._lastEventId = eventId;\n    }\n    this._withClient((client, scope) => {\n      client.captureEvent(event, {\n        ...hint,\n        event_id: eventId\n      }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  lastEventId() {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addBreadcrumb(breadcrumb, hint) {\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    if (!client) return;\n    const {\n      beforeBreadcrumb = null,\n      maxBreadcrumbs = DEFAULT_BREADCRUMBS\n    } = client.getOptions && client.getOptions() || {};\n    if (maxBreadcrumbs <= 0) return;\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = {\n      timestamp,\n      ...breadcrumb\n    };\n    const finalBreadcrumb = beforeBreadcrumb ? consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) : mergedBreadcrumb;\n    if (finalBreadcrumb === null) return;\n    if (client.emit) {\n      client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n    }\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setUser(user) {\n    this.getScope().setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTags(tags) {\n    this.getScope().setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setExtras(extras) {\n    this.getScope().setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTag(key, value) {\n    this.getScope().setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setExtra(key, extra) {\n    this.getScope().setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setContext(name, context) {\n    this.getScope().setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  configureScope(callback) {\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    if (client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  run(callback) {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIntegration(integration) {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  startTransaction(context, customSamplingContext) {\n    const result = this._callExtensionMethod('startTransaction', context, customSamplingContext);\n    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && !result) {\n      // eslint-disable-next-line no-console\n      console.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':\nSentry.addTracingExtensions();\nSentry.init({...});\n`);\n    }\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  traceHeaders() {\n    return this._callExtensionMethod('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureSession() {\n    let endSession = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  endSession() {\n    const layer = this.getStackTop();\n    const scope = layer.scope;\n    const session = scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    scope.setSession();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  startSession(context) {\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    const {\n      release,\n      environment = DEFAULT_ENVIRONMENT\n    } = client && client.getOptions() || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const {\n      userAgent\n    } = GLOBAL_OBJ.navigator || {};\n    const session = makeSession({\n      release,\n      environment,\n      user: scope.getUser(),\n      ...(userAgent && {\n        userAgent\n      }),\n      ...context\n    });\n\n    // End existing session if there's one\n    const currentSession = scope.getSession && scope.getSession();\n    if (currentSession && currentSession.status === 'ok') {\n      updateSession(currentSession, {\n        status: 'exited'\n      });\n    }\n    this.endSession();\n\n    // Afterwards we set the new session on the scope\n    scope.setSession(session);\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   */\n  shouldSendDefaultPii() {\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  _sendSessionUpdate() {\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    const session = scope.getSession();\n    if (session && client && client.captureSession) {\n      client.captureSession(session);\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  _withClient(callback) {\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    if (client) {\n      callback(client, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _callExtensionMethod(method) {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return sentry.extensions[method].apply(this, args);\n    }\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nfunction getMainCarrier() {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nfunction makeMain(hub) {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nfunction getCurrentHub() {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    const hub = registry.__SENTRY__.acs.getCurrentHub();\n    if (hub) {\n      return hub;\n    }\n  }\n\n  // Return hub that lives on a global object\n  return getGlobalHub(registry);\n}\nfunction getGlobalHub() {\n  let registry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getMainCarrier();\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.\n */\nfunction ensureHubOnCarrier(carrier) {\n  let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getGlobalHub();\n  // If there's no hub on current domain, or it's an old API, assign a new one\n  if (!hasHubOnCarrier(carrier) || getHubFromCarrier(carrier).isOlderThan(API_VERSION)) {\n    const globalHubTopStack = parent.getStackTop();\n    setHubOnCarrier(carrier, new Hub(globalHubTopStack.client, Scope.clone(globalHubTopStack.scope)));\n  }\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nfunction setAsyncContextStrategy(strategy) {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  registry.__SENTRY__ = registry.__SENTRY__ || {};\n  registry.__SENTRY__.acs = strategy;\n}\n\n/**\n * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.\n *\n * @param callback The callback to run in its own async context\n * @param options Options to pass to the async context strategy\n * @returns The result of the callback\n */\nfunction runWithAsyncContext(callback) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const registry = getMainCarrier();\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);\n  }\n\n  // if there was no strategy, fallback to just calling the callback\n  return callback();\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier) {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nfunction getHubFromCarrier(carrier) {\n  return getGlobalSingleton('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nfunction setHubOnCarrier(carrier, hub) {\n  if (!carrier) return false;\n  const __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  __SENTRY__.hub = hub;\n  return true;\n}\nexport { API_VERSION, Hub, ensureHubOnCarrier, getCurrentHub, getHubFromCarrier, getMainCarrier, makeMain, runWithAsyncContext, setAsyncContextStrategy, setHubOnCarrier };","map":{"version":3,"names":["API_VERSION","DEFAULT_BREADCRUMBS","Hub","constructor","client","scope","arguments","length","undefined","Scope","_version","_stack","bindClient","isOlderThan","version","top","getStackTop","setupIntegrations","pushScope","clone","getScope","getStack","push","getClient","popScope","pop","withScope","callback","captureException","exception","hint","eventId","_lastEventId","event_id","uuid4","syntheticException","Error","_withClient","originalException","captureMessage","message","level","captureEvent","event","type","lastEventId","addBreadcrumb","breadcrumb","beforeBreadcrumb","maxBreadcrumbs","getOptions","timestamp","dateTimestampInSeconds","mergedBreadcrumb","finalBreadcrumb","consoleSandbox","emit","setUser","user","setTags","tags","setExtras","extras","setTag","key","value","setExtra","extra","setContext","name","context","configureScope","run","oldHub","makeMain","getIntegration","integration","_oO","__SENTRY_DEBUG__","logger","warn","id","startTransaction","customSamplingContext","result","_callExtensionMethod","console","traceHeaders","captureSession","endSession","_sendSessionUpdate","layer","session","getSession","closeSession","setSession","startSession","release","environment","DEFAULT_ENVIRONMENT","userAgent","GLOBAL_OBJ","navigator","makeSession","getUser","currentSession","status","updateSession","shouldSendDefaultPii","options","Boolean","sendDefaultPii","method","carrier","getMainCarrier","sentry","__SENTRY__","extensions","_len","args","Array","_key","apply","hub","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","acs","getGlobalHub","hasHubOnCarrier","ensureHubOnCarrier","parent","globalHubTopStack","setAsyncContextStrategy","strategy","runWithAsyncContext","getGlobalSingleton"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/hub.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { consoleSandbox, dateTimestampInSeconds, getGlobalSingleton, GLOBAL_OBJ, logger, uuid4 } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from './constants';\nimport { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\nexport interface RunWithAsyncContextOptions {\n  /** Whether to reuse an existing async context if one exists. Defaults to false. */\n  reuseExisting?: boolean;\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Strategy used to track async context.\n */\nexport interface AsyncContextStrategy {\n  /**\n   * Gets the current async context. Returns undefined if there is no current async context.\n   */\n  getCurrentHub: () => Hub | undefined;\n  /**\n   * Runs the supplied callback in its own async context.\n   */\n  runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions): T;\n}\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    acs?: AsyncContextStrategy;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this._stack = [{ scope }];\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error('Sentry syntheticException');\n    this._withClient((client, scope) => {\n      client.captureException(\n        exception,\n        {\n          originalException: exception,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n  ): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error(message);\n    this._withClient((client, scope) => {\n      client.captureMessage(\n        message,\n        level,\n        {\n          originalException: message,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (!event.type) {\n      this._lastEventId = eventId;\n    }\n\n    this._withClient((client, scope) => {\n      client.captureEvent(event, { ...hint, event_id: eventId }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!client) return;\n\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    if (client.emit) {\n      client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n    }\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    this.getScope().setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    this.getScope().setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    this.getScope().setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    this.getScope().setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    this.getScope().setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    this.getScope().setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    const result = this._callExtensionMethod<Transaction>('startTransaction', context, customSamplingContext);\n\n    if (__DEBUG_BUILD__ && !result) {\n      // eslint-disable-next-line no-console\n      console.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':\nSentry.addTracingExtensions();\nSentry.init({...});\n`);\n    }\n\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    const layer = this.getStackTop();\n    const scope = layer.scope;\n    const session = scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    scope.setSession();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    const { scope, client } = this.getStackTop();\n    const { release, environment = DEFAULT_ENVIRONMENT } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n    const session = makeSession({\n      release,\n      environment,\n      user: scope.getUser(),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    // End existing session if there's one\n    const currentSession = scope.getSession && scope.getSession();\n    if (currentSession && currentSession.status === 'ok') {\n      updateSession(currentSession, { status: 'exited' });\n    }\n    this.endSession();\n\n    // Afterwards we set the new session on the scope\n    scope.setSession(session);\n\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   */\n  public shouldSendDefaultPii(): boolean {\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    const { scope, client } = this.getStackTop();\n\n    const session = scope.getSession();\n    if (session && client && client.captureSession) {\n      client.captureSession(session);\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  private _withClient(callback: (client: Client, scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(client, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    __DEBUG_BUILD__ && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    const hub = registry.__SENTRY__.acs.getCurrentHub();\n\n    if (hub) {\n      return hub;\n    }\n  }\n\n  // Return hub that lives on a global object\n  return getGlobalHub(registry);\n}\n\nfunction getGlobalHub(registry: Carrier = getMainCarrier()): Hub {\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.\n */\nexport function ensureHubOnCarrier(carrier: Carrier, parent: Hub = getGlobalHub()): void {\n  // If there's no hub on current domain, or it's an old API, assign a new one\n  if (!hasHubOnCarrier(carrier) || getHubFromCarrier(carrier).isOlderThan(API_VERSION)) {\n    const globalHubTopStack = parent.getStackTop();\n    setHubOnCarrier(carrier, new Hub(globalHubTopStack.client, Scope.clone(globalHubTopStack.scope)));\n  }\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nexport function setAsyncContextStrategy(strategy: AsyncContextStrategy | undefined): void {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  registry.__SENTRY__ = registry.__SENTRY__ || {};\n  registry.__SENTRY__.acs = strategy;\n}\n\n/**\n * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.\n *\n * @param callback The callback to run in its own async context\n * @param options Options to pass to the async context strategy\n * @returns The result of the callback\n */\nexport function runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions = {}): T {\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);\n  }\n\n  // if there was no strategy, fallback to just calling the callback\n  return callback();\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  return getGlobalSingleton<Hub>('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n  __SENTRY__.hub = hub;\n  return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}