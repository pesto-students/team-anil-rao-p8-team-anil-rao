{"ast":null,"code":"import { makeDsn, dsnToString, urlEncode } from '@sentry/utils';\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn) {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn) {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn, sdkInfo) {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n    ...(sdkInfo && {\n      sentry_client: `${sdkInfo.name}/${sdkInfo.version}`\n    })\n  });\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nfunction getEnvelopeEndpointWithUrlEncodedAuth(dsn) {\n  let tunnelOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n\n  const tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  const sdkInfo = typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nfunction getReportDialogEndpoint(dsnLike, dialogOptions) {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key])}`;\n    }\n  }\n  return `${endpoint}?${encodedOptions}`;\n}\nexport { getEnvelopeEndpointWithUrlEncodedAuth, getReportDialogEndpoint };","map":{"version":3,"names":["SENTRY_API_VERSION","getBaseApiEndpoint","dsn","protocol","port","host","path","_getIngestEndpoint","projectId","_encodedAuth","sdkInfo","urlEncode","sentry_key","publicKey","sentry_version","sentry_client","name","version","getEnvelopeEndpointWithUrlEncodedAuth","tunnelOrOptions","arguments","length","undefined","tunnel","_metadata","sdk","getReportDialogEndpoint","dsnLike","dialogOptions","makeDsn","endpoint","encodedOptions","dsnToString","key","user","encodeURIComponent","email"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/api.ts"],"sourcesContent":["import type { ClientOptions, DsnComponents, DsnLike, SdkInfo } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n    ...(sdkInfo && { sentry_client: `${sdkInfo.name}/${sdkInfo.version}` }),\n  });\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(\n  dsn: DsnComponents,\n  // TODO (v8): Remove `tunnelOrOptions` in favor of `options`, and use the substitute code below\n  // options: ClientOptions = {} as ClientOptions,\n  tunnelOrOptions: string | ClientOptions = {} as ClientOptions,\n): string {\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n\n  const tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  const sdkInfo =\n    typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n"],"mappings":";AAGA,MAAAA,kBAAA;;AAEA;AACA,SAAAC,mBAAAC,GAAA;EACA,MAAAC,QAAA,GAAAD,GAAA,CAAAC,QAAA,MAAAD,GAAA,CAAAC,QAAA;EACA,MAAAC,IAAA,GAAAF,GAAA,CAAAE,IAAA,OAAAF,GAAA,CAAAE,IAAA;EACA,UAAAD,QAAA,KAAAD,GAAA,CAAAG,IAAA,GAAAD,IAAA,GAAAF,GAAA,CAAAI,IAAA,OAAAJ,GAAA,CAAAI,IAAA;AACA;;AAEA;AACA,SAAAC,mBAAAL,GAAA;EACA,UAAAD,kBAAA,CAAAC,GAAA,IAAAA,GAAA,CAAAM,SAAA;AACA;;AAEA;AACA,SAAAC,aAAAP,GAAA,EAAAQ,OAAA;EACA,OAAAC,SAAA;IACA;IACA;IACAC,UAAA,EAAAV,GAAA,CAAAW,SAAA;IACAC,cAAA,EAAAd,kBAAA;IACA,IAAAU,OAAA;MAAAK,aAAA,KAAAL,OAAA,CAAAM,IAAA,IAAAN,OAAA,CAAAO,OAAA;IAAA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAAC,sCACAhB,GAAA,EAIA;EAAA,IADAiB,eAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;EAEA;EACA;EACA;;EAEA,MAAAG,MAAA,UAAAJ,eAAA,gBAAAA,eAAA,GAAAA,eAAA,CAAAI,MAAA;EACA,MAAAb,OAAA,GACA,OAAAS,eAAA,kBAAAA,eAAA,CAAAK,SAAA,GAAAF,SAAA,GAAAH,eAAA,CAAAK,SAAA,CAAAC,GAAA;EAEA,OAAAF,MAAA,GAAAA,MAAA,MAAAhB,kBAAA,CAAAL,GAAA,KAAAO,YAAA,CAAAP,GAAA,EAAAQ,OAAA;AACA;;AAEA;AACA,SAAAgB,wBACAC,OAAA,EACAC,aAAA,EAKA;EACA,MAAA1B,GAAA,GAAA2B,OAAA,CAAAF,OAAA;EACA,KAAAzB,GAAA;IACA;EACA;EAEA,MAAA4B,QAAA,MAAA7B,kBAAA,CAAAC,GAAA;EAEA,IAAA6B,cAAA,UAAAC,WAAA,CAAA9B,GAAA;EACA,WAAA+B,GAAA,IAAAL,aAAA;IACA,IAAAK,GAAA;MACA;IACA;IAEA,IAAAA,GAAA;MACA,MAAAC,IAAA,GAAAN,aAAA,CAAAM,IAAA;MACA,KAAAA,IAAA;QACA;MACA;MACA,IAAAA,IAAA,CAAAlB,IAAA;QACAe,cAAA,aAAAI,kBAAA,CAAAD,IAAA,CAAAlB,IAAA;MACA;MACA,IAAAkB,IAAA,CAAAE,KAAA;QACAL,cAAA,cAAAI,kBAAA,CAAAD,IAAA,CAAAE,KAAA;MACA;IACA;MACAL,cAAA,QAAAI,kBAAA,CAAAF,GAAA,KAAAE,kBAAA,CAAAP,aAAA,CAAAK,GAAA;IACA;EACA;EAEA,UAAAH,QAAA,IAAAC,cAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}