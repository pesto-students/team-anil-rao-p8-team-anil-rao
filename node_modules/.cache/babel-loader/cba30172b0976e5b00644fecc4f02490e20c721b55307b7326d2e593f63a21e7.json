{"ast":null,"code":"import { isString, isPlainObject } from './is.js';\nimport { normalize } from './normalize.js';\nimport { stripUrlQueryAndFragment } from './url.js';\nconst DEFAULT_INCLUDES = {\n  ip: false,\n  request: true,\n  transaction: true,\n  user: true\n};\nconst DEFAULT_REQUEST_INCLUDES = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\nconst DEFAULT_USER_INCLUDES = ['id', 'username', 'email'];\n\n/**\n * Sets parameterized route as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\nfunction addRequestDataToTransaction(transaction, req, deps) {\n  if (!transaction) return;\n  if (!transaction.metadata.source || transaction.metadata.source === 'url') {\n    // Attempt to grab a parameterized route off of the request\n    transaction.setName(...extractPathForTransaction(req, {\n      path: true,\n      method: true\n    }));\n  }\n  transaction.setData('url', req.originalUrl || req.url);\n  if (req.baseUrl) {\n    transaction.setData('baseUrl', req.baseUrl);\n  }\n  transaction.setData('query', extractQueryParams(req, deps));\n}\n\n/**\n * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.\n * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.\n *\n * Additionally, this function determines and returns the transaction name source\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req A request object\n * @param options What to include in the transaction name (method, path, or a custom route name to be\n *                used instead of the request's route)\n *\n * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')\n */\nfunction extractPathForTransaction(req) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const method = req.method && req.method.toUpperCase();\n  let path = '';\n  let source = 'url';\n\n  // Check to see if there's a parameterized route we can use (as there is in Express)\n  if (options.customRoute || req.route) {\n    path = options.customRoute || `${req.baseUrl || ''}${req.route && req.route.path}`;\n    source = 'route';\n  }\n\n  // Otherwise, just take the original URL\n  else if (req.originalUrl || req.url) {\n    path = stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n  let name = '';\n  if (options.method && method) {\n    name += method;\n  }\n  if (options.method && options.path) {\n    name += ' ';\n  }\n  if (options.path && path) {\n    name += path;\n  }\n  return [name, source];\n}\n\n/** JSDoc */\nfunction extractTransaction(req, type) {\n  switch (type) {\n    case 'path':\n      {\n        return extractPathForTransaction(req, {\n          path: true\n        })[0];\n      }\n    case 'handler':\n      {\n        return req.route && req.route.stack && req.route.stack[0] && req.route.stack[0].name || '<anonymous>';\n      }\n    case 'methodPath':\n    default:\n      {\n        return extractPathForTransaction(req, {\n          path: true,\n          method: true\n        })[0];\n      }\n  }\n}\n\n/** JSDoc */\nfunction extractUserData(user, keys) {\n  const extractedUser = {};\n  const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;\n  attributes.forEach(key => {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n  return extractedUser;\n}\n\n/**\n * Normalize data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param options.include An optional array of keys to include in the normalized data. Defaults to\n * DEFAULT_REQUEST_INCLUDES if not provided.\n * @param options.deps Injected, platform-specific dependencies\n * @returns An object containing normalized request data\n */\nfunction extractRequestData(req, options) {\n  const {\n    include = DEFAULT_REQUEST_INCLUDES,\n    deps\n  } = options || {};\n  const requestData = {};\n\n  // headers:\n  //   node, express, koa, nextjs: req.headers\n  const headers = req.headers || {};\n  // method:\n  //   node, express, koa, nextjs: req.method\n  const method = req.method;\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node, nextjs: req.headers.host\n  const host = req.hostname || req.host || headers.host || '<no host>';\n  // protocol:\n  //   node, nextjs: <n/a>\n  //   express, koa: req.protocol\n  const protocol = req.protocol === 'https' || req.socket && req.socket.encrypted ? 'https' : 'http';\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  const originalUrl = req.originalUrl || req.url || '';\n  // absolute url\n  const absoluteUrl = `${protocol}://${host}${originalUrl}`;\n  include.forEach(key => {\n    switch (key) {\n      case 'headers':\n        {\n          requestData.headers = headers;\n          break;\n        }\n      case 'method':\n        {\n          requestData.method = method;\n          break;\n        }\n      case 'url':\n        {\n          requestData.url = absoluteUrl;\n          break;\n        }\n      case 'cookies':\n        {\n          // cookies:\n          //   node, express, koa: req.headers.cookie\n          //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          requestData.cookies =\n          // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can\n          // come off in v8\n          req.cookies || headers.cookie && deps && deps.cookie && deps.cookie.parse(headers.cookie) || {};\n          break;\n        }\n      case 'query_string':\n        {\n          // query string:\n          //   node: req.url (raw)\n          //   express, koa, nextjs: req.query\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          requestData.query_string = extractQueryParams(req, deps);\n          break;\n        }\n      case 'data':\n        {\n          if (method === 'GET' || method === 'HEAD') {\n            break;\n          }\n          // body data:\n          //   express, koa, nextjs: req.body\n          //\n          //   when using node by itself, you have to read the incoming stream(see\n          //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know\n          //   where they're going to store the final result, so they'll have to capture this data themselves\n          if (req.body !== undefined) {\n            requestData.data = isString(req.body) ? req.body : JSON.stringify(normalize(req.body));\n          }\n          break;\n        }\n      default:\n        {\n          if ({}.hasOwnProperty.call(req, key)) {\n            requestData[key] = req[key];\n          }\n        }\n    }\n  });\n  return requestData;\n}\n\n/**\n * Options deciding what parts of the request to use when enhancing an event\n */\n\n/**\n * Add data from the given request to the given event\n *\n * @param event The event to which the request data will be added\n * @param req Request object\n * @param options.include Flags to control what data is included\n * @param options.deps Injected platform-specific dependencies\n * @hidden\n */\nfunction addRequestDataToEvent(event, req, options) {\n  const include = {\n    ...DEFAULT_INCLUDES,\n    ...(options && options.include)\n  };\n  if (include.request) {\n    const extractedRequestData = Array.isArray(include.request) ? extractRequestData(req, {\n      include: include.request,\n      deps: options && options.deps\n    }) : extractRequestData(req, {\n      deps: options && options.deps\n    });\n    event.request = {\n      ...event.request,\n      ...extractedRequestData\n    };\n  }\n  if (include.user) {\n    const extractedUser = req.user && isPlainObject(req.user) ? extractUserData(req.user, include.user) : {};\n    if (Object.keys(extractedUser).length) {\n      event.user = {\n        ...event.user,\n        ...extractedUser\n      };\n    }\n  }\n\n  // client ip:\n  //   node, nextjs: req.socket.remoteAddress\n  //   express, koa: req.ip\n  if (include.ip) {\n    const ip = req.ip || req.socket && req.socket.remoteAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip\n      };\n    }\n  }\n  if (include.transaction && !event.transaction) {\n    // TODO do we even need this anymore?\n    // TODO make this work for nextjs\n    event.transaction = extractTransaction(req, include.transaction);\n  }\n  return event;\n}\nfunction extractQueryParams(req, deps) {\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  let originalUrl = req.originalUrl || req.url || '';\n  if (!originalUrl) {\n    return;\n  }\n\n  // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n  // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.\n  if (originalUrl.startsWith('/')) {\n    originalUrl = `http://dogs.are.great${originalUrl}`;\n  }\n  return req.query || typeof URL !== undefined && new URL(originalUrl).search.replace('?', '') ||\n  // In Node 8, `URL` isn't in the global scope, so we have to use the built-in module from Node\n  deps && deps.url && deps.url.parse(originalUrl).query || undefined;\n}\nexport { addRequestDataToEvent, addRequestDataToTransaction, extractPathForTransaction, extractRequestData };","map":{"version":3,"names":["DEFAULT_INCLUDES","ip","request","transaction","user","DEFAULT_REQUEST_INCLUDES","DEFAULT_USER_INCLUDES","addRequestDataToTransaction","req","deps","metadata","source","setName","extractPathForTransaction","path","method","setData","originalUrl","url","baseUrl","extractQueryParams","options","arguments","length","undefined","toUpperCase","customRoute","route","stripUrlQueryAndFragment","name","extractTransaction","type","stack","extractUserData","keys","extractedUser","attributes","Array","isArray","forEach","key","extractRequestData","include","requestData","headers","host","hostname","protocol","socket","encrypted","absoluteUrl","cookies","cookie","parse","query_string","body","data","isString","JSON","stringify","normalize","hasOwnProperty","call","addRequestDataToEvent","event","extractedRequestData","isPlainObject","Object","remoteAddress","ip_address","startsWith","query","URL","search","replace"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/requestdata.ts"],"sourcesContent":["// TODO: Remove this file once equivalent integration is used everywhere\n\n/* eslint-disable complexity */\n/**\n * The functions here, which enrich an event with request data, are mostly for use in Node, but are safe for use in a\n * browser context. They live here in `@sentry/utils` rather than in `@sentry/node` so that they can be used in\n * frameworks (like nextjs), which, because of SSR, run the same code in both Node and browser contexts.\n *\n * TODO (v8 / #5257): Remove the note below\n * Note that for now, the tests for this code have to live in `@sentry/node`, since they test both these functions and\n * the backwards-compatibility-preserving wrappers which still live in `handlers.ts` there.\n */\n\n/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type {\n  Event,\n  ExtractedNodeRequestData,\n  PolymorphicRequest,\n  Transaction,\n  TransactionSource,\n} from '@sentry/types';\n\nimport { isPlainObject, isString } from './is';\nimport { normalize } from './normalize';\nimport { stripUrlQueryAndFragment } from './url';\n\nconst DEFAULT_INCLUDES = {\n  ip: false,\n  request: true,\n  transaction: true,\n  user: true,\n};\nconst DEFAULT_REQUEST_INCLUDES = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\nconst DEFAULT_USER_INCLUDES = ['id', 'username', 'email'];\n\ntype InjectedNodeDeps = {\n  cookie: {\n    parse: (cookieStr: string) => Record<string, string>;\n  };\n  url: {\n    parse: (urlStr: string) => {\n      query: string | null;\n    };\n  };\n};\n\n/**\n * Sets parameterized route as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\nexport function addRequestDataToTransaction(\n  transaction: Transaction | undefined,\n  req: PolymorphicRequest,\n  deps?: InjectedNodeDeps,\n): void {\n  if (!transaction) return;\n  if (!transaction.metadata.source || transaction.metadata.source === 'url') {\n    // Attempt to grab a parameterized route off of the request\n    transaction.setName(...extractPathForTransaction(req, { path: true, method: true }));\n  }\n  transaction.setData('url', req.originalUrl || req.url);\n  if (req.baseUrl) {\n    transaction.setData('baseUrl', req.baseUrl);\n  }\n  transaction.setData('query', extractQueryParams(req, deps));\n}\n\n/**\n * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.\n * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.\n *\n * Additionally, this function determines and returns the transaction name source\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req A request object\n * @param options What to include in the transaction name (method, path, or a custom route name to be\n *                used instead of the request's route)\n *\n * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')\n */\nexport function extractPathForTransaction(\n  req: PolymorphicRequest,\n  options: { path?: boolean; method?: boolean; customRoute?: string } = {},\n): [string, TransactionSource] {\n  const method = req.method && req.method.toUpperCase();\n\n  let path = '';\n  let source: TransactionSource = 'url';\n\n  // Check to see if there's a parameterized route we can use (as there is in Express)\n  if (options.customRoute || req.route) {\n    path = options.customRoute || `${req.baseUrl || ''}${req.route && req.route.path}`;\n    source = 'route';\n  }\n\n  // Otherwise, just take the original URL\n  else if (req.originalUrl || req.url) {\n    path = stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n\n  let name = '';\n  if (options.method && method) {\n    name += method;\n  }\n  if (options.method && options.path) {\n    name += ' ';\n  }\n  if (options.path && path) {\n    name += path;\n  }\n\n  return [name, source];\n}\n\ntype TransactionNamingScheme = 'path' | 'methodPath' | 'handler';\n\n/** JSDoc */\nfunction extractTransaction(req: PolymorphicRequest, type: boolean | TransactionNamingScheme): string {\n  switch (type) {\n    case 'path': {\n      return extractPathForTransaction(req, { path: true })[0];\n    }\n    case 'handler': {\n      return (req.route && req.route.stack && req.route.stack[0] && req.route.stack[0].name) || '<anonymous>';\n    }\n    case 'methodPath':\n    default: {\n      return extractPathForTransaction(req, { path: true, method: true })[0];\n    }\n  }\n}\n\n/** JSDoc */\nfunction extractUserData(\n  user: {\n    [key: string]: any;\n  },\n  keys: boolean | string[],\n): { [key: string]: any } {\n  const extractedUser: { [key: string]: any } = {};\n  const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;\n\n  attributes.forEach(key => {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n\n  return extractedUser;\n}\n\n/**\n * Normalize data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param options.include An optional array of keys to include in the normalized data. Defaults to\n * DEFAULT_REQUEST_INCLUDES if not provided.\n * @param options.deps Injected, platform-specific dependencies\n * @returns An object containing normalized request data\n */\nexport function extractRequestData(\n  req: PolymorphicRequest,\n  options?: {\n    include?: string[];\n    deps?: InjectedNodeDeps;\n  },\n): ExtractedNodeRequestData {\n  const { include = DEFAULT_REQUEST_INCLUDES, deps } = options || {};\n  const requestData: { [key: string]: any } = {};\n\n  // headers:\n  //   node, express, koa, nextjs: req.headers\n  const headers = (req.headers || {}) as {\n    host?: string;\n    cookie?: string;\n  };\n  // method:\n  //   node, express, koa, nextjs: req.method\n  const method = req.method;\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node, nextjs: req.headers.host\n  const host = req.hostname || req.host || headers.host || '<no host>';\n  // protocol:\n  //   node, nextjs: <n/a>\n  //   express, koa: req.protocol\n  const protocol = req.protocol === 'https' || (req.socket && req.socket.encrypted) ? 'https' : 'http';\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  const originalUrl = req.originalUrl || req.url || '';\n  // absolute url\n  const absoluteUrl = `${protocol}://${host}${originalUrl}`;\n  include.forEach(key => {\n    switch (key) {\n      case 'headers': {\n        requestData.headers = headers;\n        break;\n      }\n      case 'method': {\n        requestData.method = method;\n        break;\n      }\n      case 'url': {\n        requestData.url = absoluteUrl;\n        break;\n      }\n      case 'cookies': {\n        // cookies:\n        //   node, express, koa: req.headers.cookie\n        //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.cookies =\n          // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can\n          // come off in v8\n          req.cookies || (headers.cookie && deps && deps.cookie && deps.cookie.parse(headers.cookie)) || {};\n        break;\n      }\n      case 'query_string': {\n        // query string:\n        //   node: req.url (raw)\n        //   express, koa, nextjs: req.query\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.query_string = extractQueryParams(req, deps);\n        break;\n      }\n      case 'data': {\n        if (method === 'GET' || method === 'HEAD') {\n          break;\n        }\n        // body data:\n        //   express, koa, nextjs: req.body\n        //\n        //   when using node by itself, you have to read the incoming stream(see\n        //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know\n        //   where they're going to store the final result, so they'll have to capture this data themselves\n        if (req.body !== undefined) {\n          requestData.data = isString(req.body) ? req.body : JSON.stringify(normalize(req.body));\n        }\n        break;\n      }\n      default: {\n        if ({}.hasOwnProperty.call(req, key)) {\n          requestData[key] = (req as { [key: string]: any })[key];\n        }\n      }\n    }\n  });\n\n  return requestData;\n}\n\n/**\n * Options deciding what parts of the request to use when enhancing an event\n */\nexport interface AddRequestDataToEventOptions {\n  /** Flags controlling whether each type of data should be added to the event */\n  include?: {\n    ip?: boolean;\n    request?: boolean | string[];\n    transaction?: boolean | TransactionNamingScheme;\n    user?: boolean | string[];\n  };\n\n  /** Injected platform-specific dependencies */\n  deps?: {\n    cookie: {\n      parse: (cookieStr: string) => Record<string, string>;\n    };\n    url: {\n      parse: (urlStr: string) => {\n        query: string | null;\n      };\n    };\n  };\n}\n\n/**\n * Add data from the given request to the given event\n *\n * @param event The event to which the request data will be added\n * @param req Request object\n * @param options.include Flags to control what data is included\n * @param options.deps Injected platform-specific dependencies\n * @hidden\n */\nexport function addRequestDataToEvent(\n  event: Event,\n  req: PolymorphicRequest,\n  options?: AddRequestDataToEventOptions,\n): Event {\n  const include = {\n    ...DEFAULT_INCLUDES,\n    ...(options && options.include),\n  };\n\n  if (include.request) {\n    const extractedRequestData = Array.isArray(include.request)\n      ? extractRequestData(req, { include: include.request, deps: options && options.deps })\n      : extractRequestData(req, { deps: options && options.deps });\n\n    event.request = {\n      ...event.request,\n      ...extractedRequestData,\n    };\n  }\n\n  if (include.user) {\n    const extractedUser = req.user && isPlainObject(req.user) ? extractUserData(req.user, include.user) : {};\n\n    if (Object.keys(extractedUser).length) {\n      event.user = {\n        ...event.user,\n        ...extractedUser,\n      };\n    }\n  }\n\n  // client ip:\n  //   node, nextjs: req.socket.remoteAddress\n  //   express, koa: req.ip\n  if (include.ip) {\n    const ip = req.ip || (req.socket && req.socket.remoteAddress);\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n\n  if (include.transaction && !event.transaction) {\n    // TODO do we even need this anymore?\n    // TODO make this work for nextjs\n    event.transaction = extractTransaction(req, include.transaction);\n  }\n\n  return event;\n}\n\nfunction extractQueryParams(\n  req: PolymorphicRequest,\n  deps?: InjectedNodeDeps,\n): string | Record<string, unknown> | undefined {\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  let originalUrl = req.originalUrl || req.url || '';\n\n  if (!originalUrl) {\n    return;\n  }\n\n  // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n  // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.\n  if (originalUrl.startsWith('/')) {\n    originalUrl = `http://dogs.are.great${originalUrl}`;\n  }\n\n  return (\n    req.query ||\n    (typeof URL !== undefined && new URL(originalUrl).search.replace('?', '')) ||\n    // In Node 8, `URL` isn't in the global scope, so we have to use the built-in module from Node\n    (deps && deps.url && deps.url.parse(originalUrl).query) ||\n    undefined\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}