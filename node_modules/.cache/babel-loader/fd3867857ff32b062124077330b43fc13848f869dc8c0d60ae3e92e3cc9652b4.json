{"ast":null,"code":"import _createClass from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\n/** An error emitted by Sentry SDKs and related utilities. */\nvar SentryError = /*#__PURE__*/function (_Error) {\n  _inherits(SentryError, _Error);\n  var _super = _createSuper(SentryError);\n  /** Display name of this error instance. */\n\n  function SentryError(message) {\n    var _this;\n    var logLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'warn';\n    _classCallCheck(this, SentryError);\n    _this = _super.call(this, message);\n    _this.message = message;\n    _this.name = (this instanceof SentryError ? this.constructor : void 0).prototype.constructor.name;\n    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n    // instances of `SentryError` fail `obj instanceof SentryError` checks.\n    Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof SentryError ? this.constructor : void 0).prototype);\n    _this.logLevel = logLevel;\n    return _this;\n  }\n  return _createClass(SentryError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nexport { SentryError };","map":{"version":3,"names":["SentryError","_Error","_inherits","_super","_createSuper","message","_this","logLevel","arguments","length","undefined","_classCallCheck","call","name","constructor","prototype","Object","setPrototypeOf","_assertThisInitialized","_createClass","_wrapNativeSuper","Error"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/error.ts"],"sourcesContent":["import type { ConsoleLevel } from './logger';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public logLevel: ConsoleLevel;\n\n  public constructor(public message: string, logLevel: ConsoleLevel = 'warn') {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n    // instances of `SentryError` fail `obj instanceof SentryError` checks.\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.logLevel = logLevel;\n  }\n}\n"],"mappings":";;;;;;AAEA;AAAA,IACAA,WAAA,0BAAAC,MAAA;EAAAC,SAAA,CAAAF,WAAA,EAAAC,MAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,WAAA;EACA;;EAKA,SAAAA,YAAAK,OAAA;IAAA,IAAAC,KAAA;IAAA,IAAAC,QAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;IAAAG,eAAA,OAAAX,WAAA;IACAM,KAAA,GAAAH,MAAA,CAAAS,IAAA,OAAAP,OAAA;IAAAC,KAAA,CAAAD,OAAA,GAAAA,OAAA;IAEAC,KAAA,CAAAO,IAAA,oBAAAb,WAAA,QAAAc,WAAA,WAAAC,SAAA,CAAAD,WAAA,CAAAD,IAAA;IACA;IACA;IACA;IACAG,MAAA,CAAAC,cAAA,CAAAC,sBAAA,CAAAZ,KAAA,oBAAAN,WAAA,QAAAc,WAAA,WAAAC,SAAA;IACAT,KAAA,CAAAC,QAAA,GAAAA,QAAA;IAAA,OAAAD,KAAA;EACA;EAAA,OAAAa,YAAA,CAAAnB,WAAA;AAAA,gBAAAoB,gBAAA,CAfAC,KAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}