{"ast":null,"code":"import _objectSpread from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { isThenable } from '@sentry/utils';\nimport { getCurrentHub } from '../hub.js';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled.js';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n *\n * This function is meant to be used internally and may break at any time. Use at your own risk.\n *\n * @internal\n * @private\n */\nfunction trace(context, callback) {\n  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\n  var ctx = _objectSpread({}, context);\n  // If a name is set and a description is not, set the description to the name.\n  if (ctx.name !== undefined && ctx.description === undefined) {\n    ctx.description = ctx.name;\n  }\n  var hub = getCurrentHub();\n  var scope = hub.getScope();\n  var parentSpan = scope.getSpan();\n  function getActiveSpan() {\n    if (!hasTracingEnabled()) {\n      return undefined;\n    }\n    return parentSpan ? parentSpan.startChild(ctx) : hub.startTransaction(ctx);\n  }\n  var activeSpan = getActiveSpan();\n  scope.setSpan(activeSpan);\n  function finishAndSetSpan() {\n    activeSpan && activeSpan.finish();\n    hub.getScope().setSpan(parentSpan);\n  }\n  var maybePromiseResult;\n  try {\n    maybePromiseResult = callback(activeSpan);\n  } catch (e) {\n    activeSpan && activeSpan.setStatus('internal_error');\n    onError(e);\n    finishAndSetSpan();\n    throw e;\n  }\n  if (isThenable(maybePromiseResult)) {\n    Promise.resolve(maybePromiseResult).then(function () {\n      finishAndSetSpan();\n    }, function (e) {\n      activeSpan && activeSpan.setStatus('internal_error');\n      onError(e);\n      finishAndSetSpan();\n    });\n  } else {\n    finishAndSetSpan();\n  }\n  return maybePromiseResult;\n}\nexport { trace };","map":{"version":3,"names":["trace","context","callback","onError","arguments","length","undefined","ctx","_objectSpread","name","description","hub","getCurrentHub","scope","getScope","parentSpan","getSpan","getActiveSpan","hasTracingEnabled","startChild","startTransaction","activeSpan","setSpan","finishAndSetSpan","finish","maybePromiseResult","e","setStatus","isThenable","Promise","resolve","then"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/tracing/trace.ts"],"sourcesContent":["import type { TransactionContext } from '@sentry/types';\nimport { isThenable } from '@sentry/utils';\n\nimport { getCurrentHub } from '../hub';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled';\nimport type { Span } from './span';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n *\n * This function is meant to be used internally and may break at any time. Use at your own risk.\n *\n * @internal\n * @private\n */\nexport function trace<T>(\n  context: TransactionContext,\n  callback: (span?: Span) => T,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onError: (error: unknown) => void = () => {},\n): T {\n  const ctx = { ...context };\n  // If a name is set and a description is not, set the description to the name.\n  if (ctx.name !== undefined && ctx.description === undefined) {\n    ctx.description = ctx.name;\n  }\n\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n\n  const parentSpan = scope.getSpan();\n\n  function getActiveSpan(): Span | undefined {\n    if (!hasTracingEnabled()) {\n      return undefined;\n    }\n    return parentSpan ? parentSpan.startChild(ctx) : hub.startTransaction(ctx);\n  }\n\n  const activeSpan = getActiveSpan();\n  scope.setSpan(activeSpan);\n\n  function finishAndSetSpan(): void {\n    activeSpan && activeSpan.finish();\n    hub.getScope().setSpan(parentSpan);\n  }\n\n  let maybePromiseResult: T;\n  try {\n    maybePromiseResult = callback(activeSpan);\n  } catch (e) {\n    activeSpan && activeSpan.setStatus('internal_error');\n    onError(e);\n    finishAndSetSpan();\n    throw e;\n  }\n\n  if (isThenable(maybePromiseResult)) {\n    Promise.resolve(maybePromiseResult).then(\n      () => {\n        finishAndSetSpan();\n      },\n      e => {\n        activeSpan && activeSpan.setStatus('internal_error');\n        onError(e);\n        finishAndSetSpan();\n      },\n    );\n  } else {\n    finishAndSetSpan();\n  }\n\n  return maybePromiseResult;\n}\n"],"mappings":";;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAA,MACAC,OAAA,EACAC,QAAA,EAGA;EAAA,IADAC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;EAEA,IAAAG,GAAA,GAAAC,aAAA,KAAAP,OAAA;EACA;EACA,IAAAM,GAAA,CAAAE,IAAA,KAAAH,SAAA,IAAAC,GAAA,CAAAG,WAAA,KAAAJ,SAAA;IACAC,GAAA,CAAAG,WAAA,GAAAH,GAAA,CAAAE,IAAA;EACA;EAEA,IAAAE,GAAA,GAAAC,aAAA;EACA,IAAAC,KAAA,GAAAF,GAAA,CAAAG,QAAA;EAEA,IAAAC,UAAA,GAAAF,KAAA,CAAAG,OAAA;EAEA,SAAAC,cAAA;IACA,KAAAC,iBAAA;MACA,OAAAZ,SAAA;IACA;IACA,OAAAS,UAAA,GAAAA,UAAA,CAAAI,UAAA,CAAAZ,GAAA,IAAAI,GAAA,CAAAS,gBAAA,CAAAb,GAAA;EACA;EAEA,IAAAc,UAAA,GAAAJ,aAAA;EACAJ,KAAA,CAAAS,OAAA,CAAAD,UAAA;EAEA,SAAAE,iBAAA;IACAF,UAAA,IAAAA,UAAA,CAAAG,MAAA;IACAb,GAAA,CAAAG,QAAA,GAAAQ,OAAA,CAAAP,UAAA;EACA;EAEA,IAAAU,kBAAA;EACA;IACAA,kBAAA,GAAAvB,QAAA,CAAAmB,UAAA;EACA,SAAAK,CAAA;IACAL,UAAA,IAAAA,UAAA,CAAAM,SAAA;IACAxB,OAAA,CAAAuB,CAAA;IACAH,gBAAA;IACA,MAAAG,CAAA;EACA;EAEA,IAAAE,UAAA,CAAAH,kBAAA;IACAI,OAAA,CAAAC,OAAA,CAAAL,kBAAA,EAAAM,IAAA,CACA;MACAR,gBAAA;IACA,GACA,UAAAG,CAAA;MACAL,UAAA,IAAAA,UAAA,CAAAM,SAAA;MACAxB,OAAA,CAAAuB,CAAA;MACAH,gBAAA;IACA,CACA;EACA;IACAA,gBAAA;EACA;EAEA,OAAAE,kBAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}