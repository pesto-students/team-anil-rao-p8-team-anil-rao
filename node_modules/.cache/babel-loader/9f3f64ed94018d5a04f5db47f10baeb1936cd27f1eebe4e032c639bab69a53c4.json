{"ast":null,"code":"import { TRACING_DEFAULTS, addTracingExtensions, extractTraceparentData, startIdleTransaction, getActiveTransaction } from '@sentry/core';\nimport { logger, baggageHeaderToDynamicSamplingContext, getDomElement } from '@sentry/utils';\nimport { registerBackgroundTabDetection } from './backgroundtab.js';\nimport { startTrackingWebVitals, startTrackingLongTasks, startTrackingInteractions, addPerformanceEntries } from './metrics/index.js';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request.js';\nimport { instrumentRoutingWithDefaults } from './router.js';\nimport { WINDOW } from './types.js';\nconst BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  ...TRACING_DEFAULTS,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  enableLongTask: true,\n  ...defaultRequestInstrumentationOptions\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nclass BrowserTracing {\n  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n  // integrations.\n\n  /** Browser Tracing integration options */\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = BROWSER_TRACING_INTEGRATION_ID;\n  }\n  __init2() {\n    this._hasSetTracePropagationTargets = false;\n  }\n  constructor(_options) {\n    BrowserTracing.prototype.__init.call(this);\n    BrowserTracing.prototype.__init2.call(this);\n    addTracingExtensions();\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      this._hasSetTracePropagationTargets = !!(_options && (\n      // eslint-disable-next-line deprecation/deprecation\n      _options.tracePropagationTargets || _options.tracingOrigins));\n    }\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options\n    };\n\n    // Special case: enableLongTask can be set in _experiments\n    // TODO (v8): Remove this in v8\n    if (this.options._experiments.enableLongTask !== undefined) {\n      this.options.enableLongTask = this.options._experiments.enableLongTask;\n    }\n\n    // TODO (v8): remove this block after tracingOrigins is removed\n    // Set tracePropagationTargets to tracingOrigins if specified by the user\n    // In case both are specified, tracePropagationTargets takes precedence\n    // eslint-disable-next-line deprecation/deprecation\n    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.options.tracePropagationTargets = _options.tracingOrigins;\n    }\n    this._collectWebVitals = startTrackingWebVitals();\n    if (this.options.enableLongTask) {\n      startTrackingLongTasks();\n    }\n    if (this.options._experiments.enableInteractions) {\n      startTrackingInteractions();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(_, getCurrentHub) {\n    this._getCurrentHub = getCurrentHub;\n    const hub = getCurrentHub();\n    const client = hub.getClient();\n    const clientOptions = client && client.getOptions();\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      shouldCreateSpanForRequest,\n      _experiments\n    } = this.options;\n    const clientOptionsTracePropagationTargets = clientOptions && clientOptions.tracePropagationTargets;\n    // There are three ways to configure tracePropagationTargets:\n    // 1. via top level client option `tracePropagationTargets`\n    // 2. via BrowserTracing option `tracePropagationTargets`\n    // 3. via BrowserTracing option `tracingOrigins` (deprecated)\n    //\n    // To avoid confusion, favour top level client option `tracePropagationTargets`, and fallback to\n    // BrowserTracing option `tracePropagationTargets` and then `tracingOrigins` (deprecated).\n    // This is done as it minimizes bundle size (we don't have to have undefined checks).\n    //\n    // If both 1 and either one of 2 or 3 are set (from above), we log out a warning.\n    const tracePropagationTargets = clientOptionsTracePropagationTargets || this.options.tracePropagationTargets;\n    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && this._hasSetTracePropagationTargets && clientOptionsTracePropagationTargets) {\n      logger.warn('[Tracing] The `tracePropagationTargets` option was set in the BrowserTracing integration and top level `Sentry.init`. The top level `Sentry.init` value is being used.');\n    }\n    instrumentRouting(context => {\n      const transaction = this._createRouteTransaction(context);\n      this.options._experiments.onStartRouteTransaction && this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);\n      return transaction;\n    }, startTransactionOnPageLoad, startTransactionOnLocationChange);\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n    if (_experiments.enableInteractions) {\n      this._registerInteractionListener();\n    }\n    instrumentOutgoingRequests({\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest,\n      _experiments: {\n        enableHTTPTimings: _experiments.enableHTTPTimings\n      }\n    });\n  }\n\n  /** Create routing idle transaction. */\n  _createRouteTransaction(context) {\n    if (!this._getCurrentHub) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n    const {\n      beforeNavigate,\n      idleTimeout,\n      finalTimeout,\n      heartbeatInterval\n    } = this.options;\n    const isPageloadTransaction = context.op === 'pageload';\n    const sentryTraceMetaTagValue = isPageloadTransaction ? getMetaContent('sentry-trace') : null;\n    const baggageMetaTagValue = isPageloadTransaction ? getMetaContent('baggage') : null;\n    const traceParentData = sentryTraceMetaTagValue ? extractTraceparentData(sentryTraceMetaTagValue) : undefined;\n    const dynamicSamplingContext = baggageMetaTagValue ? baggageHeaderToDynamicSamplingContext(baggageMetaTagValue) : undefined;\n    const expandedContext = {\n      ...context,\n      ...traceParentData,\n      metadata: {\n        ...context.metadata,\n        dynamicSamplingContext: traceParentData && !dynamicSamplingContext ? {} : dynamicSamplingContext\n      },\n      trimEnd: true\n    };\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? {\n      ...expandedContext,\n      sampled: false\n    } : modifiedContext;\n\n    // If `beforeNavigate` set a custom name, record that fact\n    finalContext.metadata = finalContext.name !== expandedContext.name ? {\n      ...finalContext.metadata,\n      source: 'custom'\n    } : finalContext.metadata;\n    this._latestRouteName = finalContext.name;\n    this._latestRouteSource = finalContext.metadata && finalContext.metadata.source;\n    if (finalContext.sampled === false) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n    const hub = this._getCurrentHub();\n    const {\n      location\n    } = WINDOW;\n    const idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, finalTimeout, true, {\n      location\n    },\n    // for use in the tracesSampler\n    heartbeatInterval);\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      this._collectWebVitals();\n      addPerformanceEntries(transaction);\n    });\n    return idleTransaction;\n  }\n\n  /** Start listener for interaction transactions */\n  _registerInteractionListener() {\n    let inflightInteractionTransaction;\n    const registerInteractionTransaction = () => {\n      const {\n        idleTimeout,\n        finalTimeout,\n        heartbeatInterval\n      } = this.options;\n      const op = 'ui.action.click';\n      const currentTransaction = getActiveTransaction();\n      if (currentTransaction && currentTransaction.op && ['navigation', 'pageload'].includes(currentTransaction.op)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Did not create ${op} transaction because a pageload or navigation transaction is in progress.`);\n        return undefined;\n      }\n      if (inflightInteractionTransaction) {\n        inflightInteractionTransaction.setFinishReason('interactionInterrupted');\n        inflightInteractionTransaction.finish();\n        inflightInteractionTransaction = undefined;\n      }\n      if (!this._getCurrentHub) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Did not create ${op} transaction because _getCurrentHub is invalid.`);\n        return undefined;\n      }\n      if (!this._latestRouteName) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n        return undefined;\n      }\n      const hub = this._getCurrentHub();\n      const {\n        location\n      } = WINDOW;\n      const context = {\n        name: this._latestRouteName,\n        op,\n        trimEnd: true,\n        metadata: {\n          source: this._latestRouteSource || 'url'\n        }\n      };\n      inflightInteractionTransaction = startIdleTransaction(hub, context, idleTimeout, finalTimeout, true, {\n        location\n      },\n      // for use in the tracesSampler\n      heartbeatInterval);\n    };\n    ['click'].forEach(type => {\n      addEventListener(type, registerInteractionTransaction, {\n        once: false,\n        capture: true\n      });\n    });\n  }\n}\n\n/** Returns the value of a meta tag */\nfunction getMetaContent(metaName) {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  const metaTag = getDomElement(`meta[name=${metaName}]`);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : null;\n}\nexport { BROWSER_TRACING_INTEGRATION_ID, BrowserTracing, getMetaContent };","map":{"version":3,"names":["BROWSER_TRACING_INTEGRATION_ID","DEFAULT_BROWSER_TRACING_OPTIONS","TRACING_DEFAULTS","markBackgroundTransactions","routingInstrumentation","instrumentRoutingWithDefaults","startTransactionOnLocationChange","startTransactionOnPageLoad","enableLongTask","defaultRequestInstrumentationOptions","BrowserTracing","__init","name","__init2","_hasSetTracePropagationTargets","constructor","_options","prototype","call","addTracingExtensions","__SENTRY_DEBUG__","tracePropagationTargets","tracingOrigins","options","_experiments","undefined","_collectWebVitals","startTrackingWebVitals","startTrackingLongTasks","enableInteractions","startTrackingInteractions","setupOnce","_","getCurrentHub","_getCurrentHub","hub","client","getClient","clientOptions","getOptions","instrumentRouting","traceFetch","traceXHR","shouldCreateSpanForRequest","clientOptionsTracePropagationTargets","logger","warn","context","transaction","_createRouteTransaction","onStartRouteTransaction","registerBackgroundTabDetection","_registerInteractionListener","instrumentOutgoingRequests","enableHTTPTimings","op","beforeNavigate","idleTimeout","finalTimeout","heartbeatInterval","isPageloadTransaction","sentryTraceMetaTagValue","getMetaContent","baggageMetaTagValue","traceParentData","extractTraceparentData","dynamicSamplingContext","baggageHeaderToDynamicSamplingContext","expandedContext","metadata","trimEnd","modifiedContext","finalContext","sampled","source","_latestRouteName","_latestRouteSource","log","location","WINDOW","idleTransaction","startIdleTransaction","registerBeforeFinishCallback","addPerformanceEntries","inflightInteractionTransaction","registerInteractionTransaction","currentTransaction","getActiveTransaction","includes","setFinishReason","finish","forEach","type","addEventListener","once","capture","metaName","metaTag","getDomElement","getAttribute"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/browser/browsertracing.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type { Hub, IdleTransaction } from '@sentry/core';\nimport {\n  addTracingExtensions,\n  extractTraceparentData,\n  getActiveTransaction,\n  startIdleTransaction,\n  TRACING_DEFAULTS,\n} from '@sentry/core';\nimport type { EventProcessor, Integration, Transaction, TransactionContext, TransactionSource } from '@sentry/types';\nimport { baggageHeaderToDynamicSamplingContext, getDomElement, logger } from '@sentry/utils';\n\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport {\n  addPerformanceEntries,\n  startTrackingInteractions,\n  startTrackingLongTasks,\n  startTrackingWebVitals,\n} from './metrics';\nimport type { RequestInstrumentationOptions } from './request';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request';\nimport { instrumentRoutingWithDefaults } from './router';\nimport { WINDOW } from './types';\n\nexport const BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished during an idle state. An idle state is defined\n   * by a moment where there are no in-progress spans.\n   *\n   * The transaction will use the end timestamp of the last finished span as the endtime for the transaction.\n   * If there are still active spans when this the `idleTimeout` is set, the `idleTimeout` will get reset.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * The max duration for a transaction. If a transaction duration hits the `finalTimeout` value, it\n   * will be finished.\n   * Time is in ms.\n   *\n   * Default: 30000\n   */\n  finalTimeout: number;\n\n  /**\n   * The heartbeat interval. If no new spans are started or open spans are finished within 3 heartbeats,\n   * the transaction will be finished.\n   * Time is in ms.\n   *\n   * Default: 5000\n   */\n  heartbeatInterval: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * If true, Sentry will capture long tasks and add them to the corresponding transaction.\n   *\n   * Default: true\n   */\n  enableLongTask: boolean;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{\n    /**\n     * @deprecated This property no longer has any effect and will be removed in v8.\n     */\n    _reportAllChanges: boolean;\n  }>;\n\n  /**\n   * _experiments allows the user to send options to define how this integration works.\n   * Note that the `enableLongTask` options is deprecated in favor of the option at the top level, and will be removed in v8.\n   *\n   * TODO (v8): Remove enableLongTask\n   *\n   * Default: undefined\n   */\n  _experiments: Partial<{\n    enableLongTask: boolean;\n    enableInteractions: boolean;\n    enableHTTPTimings: boolean;\n    onStartRouteTransaction: (t: Transaction | undefined, ctx: TransactionContext, getCurrentHub: () => Hub) => void;\n  }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(this: void, context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    this: void,\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS: BrowserTracingOptions = {\n  ...TRACING_DEFAULTS,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  enableLongTask: true,\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n  // integrations.\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BROWSER_TRACING_INTEGRATION_ID;\n\n  private _getCurrentHub?: () => Hub;\n\n  private _latestRouteName?: string;\n  private _latestRouteSource?: TransactionSource;\n\n  private _collectWebVitals: () => void;\n\n  private _hasSetTracePropagationTargets: boolean = false;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    addTracingExtensions();\n\n    if (__DEBUG_BUILD__) {\n      this._hasSetTracePropagationTargets = !!(\n        _options &&\n        // eslint-disable-next-line deprecation/deprecation\n        (_options.tracePropagationTargets || _options.tracingOrigins)\n      );\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n    };\n\n    // Special case: enableLongTask can be set in _experiments\n    // TODO (v8): Remove this in v8\n    if (this.options._experiments.enableLongTask !== undefined) {\n      this.options.enableLongTask = this.options._experiments.enableLongTask;\n    }\n\n    // TODO (v8): remove this block after tracingOrigins is removed\n    // Set tracePropagationTargets to tracingOrigins if specified by the user\n    // In case both are specified, tracePropagationTargets takes precedence\n    // eslint-disable-next-line deprecation/deprecation\n    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.options.tracePropagationTargets = _options.tracingOrigins;\n    }\n\n    this._collectWebVitals = startTrackingWebVitals();\n    if (this.options.enableLongTask) {\n      startTrackingLongTasks();\n    }\n    if (this.options._experiments.enableInteractions) {\n      startTrackingInteractions();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n    const hub = getCurrentHub();\n    const client = hub.getClient();\n    const clientOptions = client && client.getOptions();\n\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      shouldCreateSpanForRequest,\n      _experiments,\n    } = this.options;\n\n    const clientOptionsTracePropagationTargets = clientOptions && clientOptions.tracePropagationTargets;\n    // There are three ways to configure tracePropagationTargets:\n    // 1. via top level client option `tracePropagationTargets`\n    // 2. via BrowserTracing option `tracePropagationTargets`\n    // 3. via BrowserTracing option `tracingOrigins` (deprecated)\n    //\n    // To avoid confusion, favour top level client option `tracePropagationTargets`, and fallback to\n    // BrowserTracing option `tracePropagationTargets` and then `tracingOrigins` (deprecated).\n    // This is done as it minimizes bundle size (we don't have to have undefined checks).\n    //\n    // If both 1 and either one of 2 or 3 are set (from above), we log out a warning.\n    const tracePropagationTargets = clientOptionsTracePropagationTargets || this.options.tracePropagationTargets;\n    if (__DEBUG_BUILD__ && this._hasSetTracePropagationTargets && clientOptionsTracePropagationTargets) {\n      logger.warn(\n        '[Tracing] The `tracePropagationTargets` option was set in the BrowserTracing integration and top level `Sentry.init`. The top level `Sentry.init` value is being used.',\n      );\n    }\n\n    instrumentRouting(\n      (context: TransactionContext) => {\n        const transaction = this._createRouteTransaction(context);\n\n        this.options._experiments.onStartRouteTransaction &&\n          this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);\n\n        return transaction;\n      },\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    if (_experiments.enableInteractions) {\n      this._registerInteractionListener();\n    }\n\n    instrumentOutgoingRequests({\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest,\n      _experiments: {\n        enableHTTPTimings: _experiments.enableHTTPTimings,\n      },\n    });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      __DEBUG_BUILD__ &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    const { beforeNavigate, idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n\n    const isPageloadTransaction = context.op === 'pageload';\n\n    const sentryTraceMetaTagValue = isPageloadTransaction ? getMetaContent('sentry-trace') : null;\n    const baggageMetaTagValue = isPageloadTransaction ? getMetaContent('baggage') : null;\n\n    const traceParentData = sentryTraceMetaTagValue ? extractTraceparentData(sentryTraceMetaTagValue) : undefined;\n    const dynamicSamplingContext = baggageMetaTagValue\n      ? baggageHeaderToDynamicSamplingContext(baggageMetaTagValue)\n      : undefined;\n\n    const expandedContext: TransactionContext = {\n      ...context,\n      ...traceParentData,\n      metadata: {\n        ...context.metadata,\n        dynamicSamplingContext: traceParentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n      },\n      trimEnd: true,\n    };\n\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    // If `beforeNavigate` set a custom name, record that fact\n    finalContext.metadata =\n      finalContext.name !== expandedContext.name\n        ? { ...finalContext.metadata, source: 'custom' }\n        : finalContext.metadata;\n\n    this._latestRouteName = finalContext.name;\n    this._latestRouteSource = finalContext.metadata && finalContext.metadata.source;\n\n    if (finalContext.sampled === false) {\n      __DEBUG_BUILD__ &&\n        logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const hub = this._getCurrentHub();\n    const { location } = WINDOW;\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      finalTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n      heartbeatInterval,\n    );\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      this._collectWebVitals();\n      addPerformanceEntries(transaction);\n    });\n\n    return idleTransaction as Transaction;\n  }\n\n  /** Start listener for interaction transactions */\n  private _registerInteractionListener(): void {\n    let inflightInteractionTransaction: IdleTransaction | undefined;\n    const registerInteractionTransaction = (): void => {\n      const { idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n      const op = 'ui.action.click';\n\n      const currentTransaction = getActiveTransaction();\n      if (currentTransaction && currentTransaction.op && ['navigation', 'pageload'].includes(currentTransaction.op)) {\n        __DEBUG_BUILD__ &&\n          logger.warn(\n            `[Tracing] Did not create ${op} transaction because a pageload or navigation transaction is in progress.`,\n          );\n        return undefined;\n      }\n\n      if (inflightInteractionTransaction) {\n        inflightInteractionTransaction.setFinishReason('interactionInterrupted');\n        inflightInteractionTransaction.finish();\n        inflightInteractionTransaction = undefined;\n      }\n\n      if (!this._getCurrentHub) {\n        __DEBUG_BUILD__ && logger.warn(`[Tracing] Did not create ${op} transaction because _getCurrentHub is invalid.`);\n        return undefined;\n      }\n\n      if (!this._latestRouteName) {\n        __DEBUG_BUILD__ &&\n          logger.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n        return undefined;\n      }\n\n      const hub = this._getCurrentHub();\n      const { location } = WINDOW;\n\n      const context: TransactionContext = {\n        name: this._latestRouteName,\n        op,\n        trimEnd: true,\n        metadata: {\n          source: this._latestRouteSource || 'url',\n        },\n      };\n\n      inflightInteractionTransaction = startIdleTransaction(\n        hub,\n        context,\n        idleTimeout,\n        finalTimeout,\n        true,\n        { location }, // for use in the tracesSampler\n        heartbeatInterval,\n      );\n    };\n\n    ['click'].forEach(type => {\n      addEventListener(type, registerInteractionTransaction, { once: false, capture: true });\n    });\n  }\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  const metaTag = getDomElement(`meta[name=${metaName}]`);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}