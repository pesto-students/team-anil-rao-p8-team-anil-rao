{"ast":null,"code":"import { bindReporter } from './lib/bindReporter.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Calculates the [FID](https://web.dev/fid/) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nvar onFID = function onFID(onReport) {\n  var visibilityWatcher = getVisibilityWatcher();\n  var metric = initMetric('FID');\n  // eslint-disable-next-line prefer-const\n  var report;\n  var handleEntry = function handleEntry(entry) {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n  var handleEntries = function handleEntries(entries) {\n    entries.forEach(handleEntry);\n  };\n  var po = observe('first-input', handleEntries);\n  report = bindReporter(onReport, metric);\n  if (po) {\n    onHidden(function () {\n      handleEntries(po.takeRecords());\n      po.disconnect();\n    }, true);\n  }\n};\nexport { onFID };","map":{"version":3,"names":["onFID","onReport","visibilityWatcher","getVisibilityWatcher","metric","initMetric","report","handleEntry","entry","startTime","firstHiddenTime","value","processingStart","entries","push","handleEntries","forEach","po","observe","bindReporter","onHidden","takeRecords","disconnect"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/browser/web-vitals/getFID.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport type { FIDMetric, PerformanceEventTiming, ReportCallback } from './types';\n\n/**\n * Calculates the [FID](https://web.dev/fid/) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nexport const onFID = (onReport: ReportCallback): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  // eslint-disable-next-line prefer-const\n  let report: ReturnType<typeof bindReporter>;\n\n  const handleEntry = (entry: PerformanceEventTiming): void => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const handleEntries = (entries: FIDMetric['entries']): void => {\n    (entries as PerformanceEventTiming[]).forEach(handleEntry);\n  };\n\n  const po = observe('first-input', handleEntries);\n  report = bindReporter(onReport, metric);\n\n  if (po) {\n    onHidden(() => {\n      handleEntries(po.takeRecords() as FIDMetric['entries']);\n      po.disconnect();\n    }, true);\n  }\n};\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAA,KAAA,YAAAA,MAAAC,QAAA;EACA,IAAAC,iBAAA,GAAAC,oBAAA;EACA,IAAAC,MAAA,GAAAC,UAAA;EACA;EACA,IAAAC,MAAA;EAEA,IAAAC,WAAA,YAAAA,YAAAC,KAAA;IACA;IACA,IAAAA,KAAA,CAAAC,SAAA,GAAAP,iBAAA,CAAAQ,eAAA;MACAN,MAAA,CAAAO,KAAA,GAAAH,KAAA,CAAAI,eAAA,GAAAJ,KAAA,CAAAC,SAAA;MACAL,MAAA,CAAAS,OAAA,CAAAC,IAAA,CAAAN,KAAA;MACAF,MAAA;IACA;EACA;EAEA,IAAAS,aAAA,YAAAA,cAAAF,OAAA;IACAA,OAAA,CAAAG,OAAA,CAAAT,WAAA;EACA;EAEA,IAAAU,EAAA,GAAAC,OAAA,gBAAAH,aAAA;EACAT,MAAA,GAAAa,YAAA,CAAAlB,QAAA,EAAAG,MAAA;EAEA,IAAAa,EAAA;IACAG,QAAA;MACAL,aAAA,CAAAE,EAAA,CAAAI,WAAA;MACAJ,EAAA,CAAAK,UAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}