{"ast":null,"code":"import { BaseClient, SDK_VERSION } from '@sentry/core';\nimport { getSDKSource, logger, createClientReportEnvelope, dsnToString } from '@sentry/utils';\nimport { eventFromException, eventFromMessage } from './eventbuilder.js';\nimport { WINDOW } from './helpers.js';\nimport { BREADCRUMB_INTEGRATION_ID } from './integrations/breadcrumbs.js';\nimport { createUserFeedbackEnvelope } from './userfeedback.js';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nclass BrowserClient extends BaseClient {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  constructor(options) {\n    const sdkSource = WINDOW.SENTRY_SDK_SOURCE || getSDKSource();\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [{\n        name: `${sdkSource}:@sentry/browser`,\n        version: SDK_VERSION\n      }],\n      version: SDK_VERSION\n    };\n    super(options);\n    if (options.sendClientReports && WINDOW.document) {\n      WINDOW.document.addEventListener('visibilitychange', () => {\n        if (WINDOW.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  eventFromException(exception, hint) {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  eventFromMessage(message) {\n    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';\n    let hint = arguments.length > 2 ? arguments[2] : undefined;\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  sendEvent(event, hint) {\n    // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and\n    // activated its `sentry` option.\n    // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in\n    // bundles, if it is not used by the SDK.\n    // This all sadly is a bit ugly, but we currently don't have a \"pre-send\" hook on the integrations so we do it this\n    // way for now.\n    const breadcrumbIntegration = this.getIntegrationById(BREADCRUMB_INTEGRATION_ID);\n    // We check for definedness of `addSentryBreadcrumb` in case users provided their own integration with id\n    // \"Breadcrumbs\" that does not have this function.\n    if (breadcrumbIntegration && breadcrumbIntegration.addSentryBreadcrumb) {\n      breadcrumbIntegration.addSentryBreadcrumb(event);\n    }\n    super.sendEvent(event, hint);\n  }\n\n  /**\n   * Sends user feedback to Sentry.\n   */\n  captureUserFeedback(feedback) {\n    if (!this._isEnabled()) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('SDK not enabled, will not capture user feedback.');\n      return;\n    }\n    const envelope = createUserFeedbackEnvelope(feedback, {\n      metadata: this.getSdkMetadata(),\n      dsn: this.getDsn(),\n      tunnel: this.getOptions().tunnel\n    });\n    void this._sendEnvelope(envelope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _prepareEvent(event, hint, scope) {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  _flushOutcomes() {\n    const outcomes = this._clearOutcomes();\n    if (outcomes.length === 0) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('No outcomes to send');\n      return;\n    }\n    if (!this._dsn) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Sending outcomes:', outcomes);\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n    void this._sendEnvelope(envelope);\n  }\n}\nexport { BrowserClient };","map":{"version":3,"names":["BrowserClient","BaseClient","constructor","options","sdkSource","WINDOW","SENTRY_SDK_SOURCE","getSDKSource","_metadata","sdk","name","packages","version","SDK_VERSION","sendClientReports","document","addEventListener","visibilityState","_flushOutcomes","eventFromException","exception","hint","_options","stackParser","attachStacktrace","eventFromMessage","message","level","arguments","length","undefined","sendEvent","event","breadcrumbIntegration","getIntegrationById","BREADCRUMB_INTEGRATION_ID","addSentryBreadcrumb","captureUserFeedback","feedback","_isEnabled","__SENTRY_DEBUG__","logger","warn","envelope","createUserFeedbackEnvelope","metadata","getSdkMetadata","dsn","getDsn","tunnel","getOptions","_sendEnvelope","_prepareEvent","scope","platform","outcomes","_clearOutcomes","log","_dsn","createClientReportEnvelope","dsnToString"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/src/client.ts"],"sourcesContent":["import type { Scope } from '@sentry/core';\nimport { BaseClient, SDK_VERSION } from '@sentry/core';\nimport type {\n  BrowserClientReplayOptions,\n  ClientOptions,\n  Event,\n  EventHint,\n  Options,\n  Severity,\n  SeverityLevel,\n  UserFeedback,\n} from '@sentry/types';\nimport { createClientReportEnvelope, dsnToString, getSDKSource, logger } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { WINDOW } from './helpers';\nimport type { Breadcrumbs } from './integrations';\nimport { BREADCRUMB_INTEGRATION_ID } from './integrations/breadcrumbs';\nimport type { BrowserTransportOptions } from './transports/types';\nimport { createUserFeedbackEnvelope } from './userfeedback';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\nexport type BrowserOptions = Options<BrowserTransportOptions> & BrowserClientReplayOptions;\n\n/**\n * Configuration options for the Sentry Browser SDK Client class\n * @see BrowserClient for more information.\n */\nexport type BrowserClientOptions = ClientOptions<BrowserTransportOptions>;\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserClientOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserClientOptions) {\n    const sdkSource = WINDOW.SENTRY_SDK_SOURCE || getSDKSource();\n\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: `${sdkSource}:@sentry/browser`,\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(options);\n\n    if (options.sendClientReports && WINDOW.document) {\n      WINDOW.document.addEventListener('visibilitychange', () => {\n        if (WINDOW.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint?: EventHint): void {\n    // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and\n    // activated its `sentry` option.\n    // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in\n    // bundles, if it is not used by the SDK.\n    // This all sadly is a bit ugly, but we currently don't have a \"pre-send\" hook on the integrations so we do it this\n    // way for now.\n    const breadcrumbIntegration = this.getIntegrationById(BREADCRUMB_INTEGRATION_ID) as Breadcrumbs | undefined;\n    // We check for definedness of `addSentryBreadcrumb` in case users provided their own integration with id\n    // \"Breadcrumbs\" that does not have this function.\n    if (breadcrumbIntegration && breadcrumbIntegration.addSentryBreadcrumb) {\n      breadcrumbIntegration.addSentryBreadcrumb(event);\n    }\n\n    super.sendEvent(event, hint);\n  }\n\n  /**\n   * Sends user feedback to Sentry.\n   */\n  public captureUserFeedback(feedback: UserFeedback): void {\n    if (!this._isEnabled()) {\n      __DEBUG_BUILD__ && logger.warn('SDK not enabled, will not capture user feedback.');\n      return;\n    }\n\n    const envelope = createUserFeedbackEnvelope(feedback, {\n      metadata: this.getSdkMetadata(),\n      dsn: this.getDsn(),\n      tunnel: this.getOptions().tunnel,\n    });\n    void this._sendEnvelope(envelope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  private _flushOutcomes(): void {\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      __DEBUG_BUILD__ && logger.log('No outcomes to send');\n      return;\n    }\n\n    if (!this._dsn) {\n      __DEBUG_BUILD__ && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('Sending outcomes:', outcomes);\n\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n    void this._sendEnvelope(envelope);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}