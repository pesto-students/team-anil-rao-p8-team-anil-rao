{"ast":null,"code":"import { getCurrentHub, showReportDialog, withScope, captureException } from '@sentry/browser';\nimport { isError, logger } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nconst _jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/errorboundary.tsx\";\nfunction isAtLeastReact17(version) {\n  const major = version.match(/^([^.]+)/);\n  return major !== null && parseInt(major[0]) >= 17;\n}\nconst UNKNOWN_COMPONENT = 'unknown';\nconst INITIAL_STATE = {\n  componentStack: null,\n  error: null,\n  eventId: null\n};\nfunction setCause(error, cause) {\n  const seenErrors = new WeakMap();\n  function recurse(error, cause) {\n    // If we've already seen the error, there is a recursive loop somewhere in the error's\n    // cause chain. Let's just bail out then to prevent a stack overflow.\n    if (seenErrors.has(error)) {\n      return;\n    }\n    if (error.cause) {\n      seenErrors.set(error, true);\n      return recurse(error.cause, cause);\n    }\n    error.cause = cause;\n  }\n  recurse(error, cause);\n}\n\n/**\n * A ErrorBoundary component that logs errors to Sentry. Requires React >= 16.\n * NOTE: If you are a Sentry user, and you are seeing this stack frame, it means the\n * Sentry React SDK ErrorBoundary caught an error invoking your application code. This\n * is expected behavior and NOT indicative of a bug with the Sentry React SDK.\n */\nclass ErrorBoundary extends React.Component {\n  __init() {\n    this.state = INITIAL_STATE;\n  }\n  __init2() {\n    this._openFallbackReportDialog = true;\n  }\n  constructor(props) {\n    super(props);\n    ErrorBoundary.prototype.__init.call(this);\n    ErrorBoundary.prototype.__init2.call(this);\n    ErrorBoundary.prototype.__init3.call(this);\n    const client = getCurrentHub().getClient();\n    if (client && client.on && props.showDialog) {\n      this._openFallbackReportDialog = false;\n      client.on('afterSendEvent', event => {\n        if (!event.type && event.event_id === this._lastEventId) {\n          showReportDialog({\n            ...props.dialogOptions,\n            eventId: this._lastEventId\n          });\n        }\n      });\n    }\n  }\n  componentDidCatch(error, _ref) {\n    let {\n      componentStack\n    } = _ref;\n    const {\n      beforeCapture,\n      onError,\n      showDialog,\n      dialogOptions\n    } = this.props;\n    withScope(scope => {\n      // If on React version >= 17, create stack trace from componentStack param and links\n      // to to the original error using `error.cause` otherwise relies on error param for stacktrace.\n      // Linking errors requires the `LinkedErrors` integration be enabled.\n      // See: https://reactjs.org/blog/2020/08/10/react-v17-rc.html#native-component-stacks\n      //\n      // Although `componentDidCatch` is typed to accept an `Error` object, it can also be invoked\n      // with non-error objects. This is why we need to check if the error is an error-like object.\n      // See: https://github.com/getsentry/sentry-javascript/issues/6167\n      if (isAtLeastReact17(React.version) && isError(error)) {\n        const errorBoundaryError = new Error(error.message);\n        errorBoundaryError.name = `React ErrorBoundary ${errorBoundaryError.name}`;\n        errorBoundaryError.stack = componentStack;\n\n        // Using the `LinkedErrors` integration to link the errors together.\n        setCause(error, errorBoundaryError);\n      }\n      if (beforeCapture) {\n        beforeCapture(scope, error, componentStack);\n      }\n      const eventId = captureException(error, {\n        contexts: {\n          react: {\n            componentStack\n          }\n        }\n      });\n      if (onError) {\n        onError(error, componentStack, eventId);\n      }\n      if (showDialog) {\n        this._lastEventId = eventId;\n        if (this._openFallbackReportDialog) {\n          showReportDialog({\n            ...dialogOptions,\n            eventId\n          });\n        }\n      }\n\n      // componentDidCatch is used over getDerivedStateFromError\n      // so that componentStack is accessible through state.\n      this.setState({\n        error,\n        componentStack,\n        eventId\n      });\n    });\n  }\n  componentDidMount() {\n    const {\n      onMount\n    } = this.props;\n    if (onMount) {\n      onMount();\n    }\n  }\n  componentWillUnmount() {\n    const {\n      error,\n      componentStack,\n      eventId\n    } = this.state;\n    const {\n      onUnmount\n    } = this.props;\n    if (onUnmount) {\n      onUnmount(error, componentStack, eventId);\n    }\n  }\n  __init3() {\n    this.resetErrorBoundary = () => {\n      const {\n        onReset\n      } = this.props;\n      const {\n        error,\n        componentStack,\n        eventId\n      } = this.state;\n      if (onReset) {\n        onReset(error, componentStack, eventId);\n      }\n      this.setState(INITIAL_STATE);\n    };\n  }\n  render() {\n    const {\n      fallback,\n      children\n    } = this.props;\n    const state = this.state;\n    if (state.error) {\n      let element = undefined;\n      if (typeof fallback === 'function') {\n        element = fallback({\n          error: state.error,\n          componentStack: state.componentStack,\n          resetError: this.resetErrorBoundary,\n          eventId: state.eventId\n        });\n      } else {\n        element = fallback;\n      }\n      if (React.isValidElement(element)) {\n        return element;\n      }\n      if (fallback) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('fallback did not produce a valid ReactElement');\n      }\n\n      // Fail gracefully if no fallback provided or is not valid\n      return null;\n    }\n    if (typeof children === 'function') {\n      return children();\n    }\n    return children;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary(WrappedComponent, errorBoundaryOptions) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const componentDisplayName = WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n  const Wrapped = props => React.createElement(ErrorBoundary, {\n    ...errorBoundaryOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    }\n  }, React.createElement(WrappedComponent, {\n    ...props,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    }\n  }));\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  Wrapped.displayName = `errorBoundary(${componentDisplayName})`;\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\nexport { ErrorBoundary, UNKNOWN_COMPONENT, isAtLeastReact17, withErrorBoundary };","map":{"version":3,"names":["_jsxFileName","isAtLeastReact17","version","major","match","parseInt","UNKNOWN_COMPONENT","INITIAL_STATE","componentStack","error","eventId","setCause","cause","seenErrors","WeakMap","recurse","has","set","ErrorBoundary","React","Component","__init","state","__init2","_openFallbackReportDialog","constructor","props","prototype","call","__init3","client","getCurrentHub","getClient","on","showDialog","event","type","event_id","_lastEventId","showReportDialog","dialogOptions","componentDidCatch","_ref","beforeCapture","onError","withScope","scope","isError","errorBoundaryError","Error","message","name","stack","captureException","contexts","react","setState","componentDidMount","onMount","componentWillUnmount","onUnmount","resetErrorBoundary","onReset","render","fallback","children","element","undefined","resetError","isValidElement","__SENTRY_DEBUG__","logger","warn","withErrorBoundary","WrappedComponent","errorBoundaryOptions","componentDisplayName","displayName","Wrapped","createElement","__self","__source","fileName","lineNumber","hoistNonReactStatics"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/errorboundary.tsx"],"sourcesContent":["import type { ReportDialogOptions, Scope } from '@sentry/browser';\nimport { captureException, getCurrentHub, showReportDialog, withScope } from '@sentry/browser';\nimport { isError, logger } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\n\nexport function isAtLeastReact17(version: string): boolean {\n  const major = version.match(/^([^.]+)/);\n  return major !== null && parseInt(major[0]) >= 17;\n}\n\nexport const UNKNOWN_COMPONENT = 'unknown';\n\nexport type FallbackRender = (errorData: {\n  error: Error;\n  componentStack: string;\n  eventId: string;\n  resetError(): void;\n}) => React.ReactElement;\n\nexport type ErrorBoundaryProps = {\n  children?: React.ReactNode | (() => React.ReactNode);\n  /** If a Sentry report dialog should be rendered on error */\n  showDialog?: boolean;\n  /**\n   * Options to be passed into the Sentry report dialog.\n   * No-op if {@link showDialog} is false.\n   */\n  dialogOptions?: ReportDialogOptions;\n  /**\n   * A fallback component that gets rendered when the error boundary encounters an error.\n   *\n   * Can either provide a React Component, or a function that returns React Component as\n   * a valid fallback prop. If a function is provided, the function will be called with\n   * the error, the component stack, and an function that resets the error boundary on error.\n   *\n   */\n  fallback?: React.ReactElement | FallbackRender;\n  /** Called when the error boundary encounters an error */\n  onError?(error: Error, componentStack: string, eventId: string): void;\n  /** Called on componentDidMount() */\n  onMount?(): void;\n  /** Called if resetError() is called from the fallback render props function  */\n  onReset?(error: Error | null, componentStack: string | null, eventId: string | null): void;\n  /** Called on componentWillUnmount() */\n  onUnmount?(error: Error | null, componentStack: string | null, eventId: string | null): void;\n  /** Called before the error is captured by Sentry, allows for you to add tags or context using the scope */\n  beforeCapture?(scope: Scope, error: Error | null, componentStack: string | null): void;\n};\n\ntype ErrorBoundaryState =\n  | {\n      componentStack: null;\n      error: null;\n      eventId: null;\n    }\n  | {\n      componentStack: React.ErrorInfo['componentStack'];\n      error: Error;\n      eventId: string;\n    };\n\nconst INITIAL_STATE = {\n  componentStack: null,\n  error: null,\n  eventId: null,\n};\n\nfunction setCause(error: Error & { cause?: Error }, cause: Error): void {\n  const seenErrors = new WeakMap<Error, boolean>();\n\n  function recurse(error: Error & { cause?: Error }, cause: Error): void {\n    // If we've already seen the error, there is a recursive loop somewhere in the error's\n    // cause chain. Let's just bail out then to prevent a stack overflow.\n    if (seenErrors.has(error)) {\n      return;\n    }\n    if (error.cause) {\n      seenErrors.set(error, true);\n      return recurse(error.cause, cause);\n    }\n    error.cause = cause;\n  }\n\n  recurse(error, cause);\n}\n\n/**\n * A ErrorBoundary component that logs errors to Sentry. Requires React >= 16.\n * NOTE: If you are a Sentry user, and you are seeing this stack frame, it means the\n * Sentry React SDK ErrorBoundary caught an error invoking your application code. This\n * is expected behavior and NOT indicative of a bug with the Sentry React SDK.\n */\nclass ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  public state: ErrorBoundaryState = INITIAL_STATE;\n\n  private readonly _openFallbackReportDialog: boolean = true;\n\n  private _lastEventId?: string;\n\n  public constructor(props: ErrorBoundaryProps) {\n    super(props);\n\n    const client = getCurrentHub().getClient();\n    if (client && client.on && props.showDialog) {\n      this._openFallbackReportDialog = false;\n      client.on('afterSendEvent', event => {\n        if (!event.type && event.event_id === this._lastEventId) {\n          showReportDialog({ ...props.dialogOptions, eventId: this._lastEventId });\n        }\n      });\n    }\n  }\n\n  public componentDidCatch(error: Error & { cause?: Error }, { componentStack }: React.ErrorInfo): void {\n    const { beforeCapture, onError, showDialog, dialogOptions } = this.props;\n    withScope(scope => {\n      // If on React version >= 17, create stack trace from componentStack param and links\n      // to to the original error using `error.cause` otherwise relies on error param for stacktrace.\n      // Linking errors requires the `LinkedErrors` integration be enabled.\n      // See: https://reactjs.org/blog/2020/08/10/react-v17-rc.html#native-component-stacks\n      //\n      // Although `componentDidCatch` is typed to accept an `Error` object, it can also be invoked\n      // with non-error objects. This is why we need to check if the error is an error-like object.\n      // See: https://github.com/getsentry/sentry-javascript/issues/6167\n      if (isAtLeastReact17(React.version) && isError(error)) {\n        const errorBoundaryError = new Error(error.message);\n        errorBoundaryError.name = `React ErrorBoundary ${errorBoundaryError.name}`;\n        errorBoundaryError.stack = componentStack;\n\n        // Using the `LinkedErrors` integration to link the errors together.\n        setCause(error, errorBoundaryError);\n      }\n\n      if (beforeCapture) {\n        beforeCapture(scope, error, componentStack);\n      }\n      const eventId = captureException(error, { contexts: { react: { componentStack } } });\n      if (onError) {\n        onError(error, componentStack, eventId);\n      }\n      if (showDialog) {\n        this._lastEventId = eventId;\n        if (this._openFallbackReportDialog) {\n          showReportDialog({ ...dialogOptions, eventId });\n        }\n      }\n\n      // componentDidCatch is used over getDerivedStateFromError\n      // so that componentStack is accessible through state.\n      this.setState({ error, componentStack, eventId });\n    });\n  }\n\n  public componentDidMount(): void {\n    const { onMount } = this.props;\n    if (onMount) {\n      onMount();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { error, componentStack, eventId } = this.state;\n    const { onUnmount } = this.props;\n    if (onUnmount) {\n      onUnmount(error, componentStack, eventId);\n    }\n  }\n\n  public resetErrorBoundary: () => void = () => {\n    const { onReset } = this.props;\n    const { error, componentStack, eventId } = this.state;\n    if (onReset) {\n      onReset(error, componentStack, eventId);\n    }\n    this.setState(INITIAL_STATE);\n  };\n\n  public render(): React.ReactNode {\n    const { fallback, children } = this.props;\n    const state = this.state;\n\n    if (state.error) {\n      let element: React.ReactElement | undefined = undefined;\n      if (typeof fallback === 'function') {\n        element = fallback({\n          error: state.error,\n          componentStack: state.componentStack,\n          resetError: this.resetErrorBoundary,\n          eventId: state.eventId,\n        });\n      } else {\n        element = fallback;\n      }\n\n      if (React.isValidElement(element)) {\n        return element;\n      }\n\n      if (fallback) {\n        __DEBUG_BUILD__ && logger.warn('fallback did not produce a valid ReactElement');\n      }\n\n      // Fail gracefully if no fallback provided or is not valid\n      return null;\n    }\n\n    if (typeof children === 'function') {\n      return (children as () => React.ReactNode)();\n    }\n    return children;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary<P extends Record<string, any>>(\n  WrappedComponent: React.ComponentType<P>,\n  errorBoundaryOptions: ErrorBoundaryProps,\n): React.FC<P> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const componentDisplayName = WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  const Wrapped: React.FC<P> = (props: P) => (\n    <ErrorBoundary {...errorBoundaryOptions}>\n      <WrappedComponent {...props} />\n    </ErrorBoundary>\n  );\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  Wrapped.displayName = `errorBoundary(${componentDisplayName})`;\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\nexport { ErrorBoundary, withErrorBoundary };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}