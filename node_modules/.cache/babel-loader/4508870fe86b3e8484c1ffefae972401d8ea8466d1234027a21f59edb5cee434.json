{"ast":null,"code":"import _toConsumableArray from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isPlainObject, dateTimestampInSeconds, SyncPromise, logger, isThenable, arrayify, getGlobalSingleton } from '@sentry/utils';\nimport { updateSession } from './session.js';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nvar DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nvar Scope = /*#__PURE__*/function () {\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n\n  /** Transaction Name */\n\n  /** Span */\n\n  /** Session */\n\n  /** Request Mode Session Status */\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  function Scope() {\n    _classCallCheck(this, Scope);\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  _createClass(Scope, [{\n    key: \"addScopeListener\",\n    value:\n    /**\n     * Add internal on change listener. Used for sub SDKs that need to store the scope.\n     * @hidden\n     */\n    function addScopeListener(callback) {\n      this._scopeListeners.push(callback);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"addEventProcessor\",\n    value: function addEventProcessor(callback) {\n      this._eventProcessors.push(callback);\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setUser\",\n    value: function setUser(user) {\n      this._user = user || {};\n      if (this._session) {\n        updateSession(this._session, {\n          user: user\n        });\n      }\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getUser\",\n    value: function getUser() {\n      return this._user;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getRequestSession\",\n    value: function getRequestSession() {\n      return this._requestSession;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setRequestSession\",\n    value: function setRequestSession(requestSession) {\n      this._requestSession = requestSession;\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTags\",\n    value: function setTags(tags) {\n      this._tags = _objectSpread(_objectSpread({}, this._tags), tags);\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTag\",\n    value: function setTag(key, value) {\n      this._tags = _objectSpread(_objectSpread({}, this._tags), {}, _defineProperty({}, key, value));\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setExtras\",\n    value: function setExtras(extras) {\n      this._extra = _objectSpread(_objectSpread({}, this._extra), extras);\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, extra) {\n      this._extra = _objectSpread(_objectSpread({}, this._extra), {}, _defineProperty({}, key, extra));\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setFingerprint\",\n    value: function setFingerprint(fingerprint) {\n      this._fingerprint = fingerprint;\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setLevel\",\n    value: function setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level) {\n      this._level = level;\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTransactionName\",\n    value: function setTransactionName(name) {\n      this._transactionName = name;\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setContext\",\n    value: function setContext(key, context) {\n      if (context === null) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete this._contexts[key];\n      } else {\n        this._contexts[key] = context;\n      }\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setSpan\",\n    value: function setSpan(span) {\n      this._span = span;\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getSpan\",\n    value: function getSpan() {\n      return this._span;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction() {\n      // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n      // have a pointer to the currently-active transaction.\n      var span = this.getSpan();\n      return span && span.transaction;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setSession\",\n    value: function setSession(session) {\n      if (!session) {\n        delete this._session;\n      } else {\n        this._session = session;\n      }\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getSession\",\n    value: function getSession() {\n      return this._session;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"update\",\n    value: function update(captureContext) {\n      if (!captureContext) {\n        return this;\n      }\n      if (typeof captureContext === 'function') {\n        var updatedScope = captureContext(this);\n        return updatedScope instanceof Scope ? updatedScope : this;\n      }\n      if (captureContext instanceof Scope) {\n        this._tags = _objectSpread(_objectSpread({}, this._tags), captureContext._tags);\n        this._extra = _objectSpread(_objectSpread({}, this._extra), captureContext._extra);\n        this._contexts = _objectSpread(_objectSpread({}, this._contexts), captureContext._contexts);\n        if (captureContext._user && Object.keys(captureContext._user).length) {\n          this._user = captureContext._user;\n        }\n        if (captureContext._level) {\n          this._level = captureContext._level;\n        }\n        if (captureContext._fingerprint) {\n          this._fingerprint = captureContext._fingerprint;\n        }\n        if (captureContext._requestSession) {\n          this._requestSession = captureContext._requestSession;\n        }\n      } else if (isPlainObject(captureContext)) {\n        // eslint-disable-next-line no-param-reassign\n        captureContext = captureContext;\n        this._tags = _objectSpread(_objectSpread({}, this._tags), captureContext.tags);\n        this._extra = _objectSpread(_objectSpread({}, this._extra), captureContext.extra);\n        this._contexts = _objectSpread(_objectSpread({}, this._contexts), captureContext.contexts);\n        if (captureContext.user) {\n          this._user = captureContext.user;\n        }\n        if (captureContext.level) {\n          this._level = captureContext.level;\n        }\n        if (captureContext.fingerprint) {\n          this._fingerprint = captureContext.fingerprint;\n        }\n        if (captureContext.requestSession) {\n          this._requestSession = captureContext.requestSession;\n        }\n      }\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._breadcrumbs = [];\n      this._tags = {};\n      this._extra = {};\n      this._user = {};\n      this._contexts = {};\n      this._level = undefined;\n      this._transactionName = undefined;\n      this._fingerprint = undefined;\n      this._requestSession = undefined;\n      this._span = undefined;\n      this._session = undefined;\n      this._notifyScopeListeners();\n      this._attachments = [];\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"addBreadcrumb\",\n    value: function addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n      var maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n      // No data has been changed, so don't notify scope listeners\n      if (maxCrumbs <= 0) {\n        return this;\n      }\n      var mergedBreadcrumb = _objectSpread({\n        timestamp: dateTimestampInSeconds()\n      }, breadcrumb);\n      this._breadcrumbs = [].concat(_toConsumableArray(this._breadcrumbs), [mergedBreadcrumb]).slice(-maxCrumbs);\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getLastBreadcrumb\",\n    value: function getLastBreadcrumb() {\n      return this._breadcrumbs[this._breadcrumbs.length - 1];\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"clearBreadcrumbs\",\n    value: function clearBreadcrumbs() {\n      this._breadcrumbs = [];\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"addAttachment\",\n    value: function addAttachment(attachment) {\n      this._attachments.push(attachment);\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getAttachments\",\n    value: function getAttachments() {\n      return this._attachments;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"clearAttachments\",\n    value: function clearAttachments() {\n      this._attachments = [];\n      return this;\n    }\n\n    /**\n     * Applies data from the scope to the event and runs all event processors on it.\n     *\n     * @param event Event\n     * @param hint Object containing additional information about the original exception, for use by the event processors.\n     * @hidden\n     */\n  }, {\n    key: \"applyToEvent\",\n    value: function applyToEvent(event) {\n      var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (this._extra && Object.keys(this._extra).length) {\n        event.extra = _objectSpread(_objectSpread({}, this._extra), event.extra);\n      }\n      if (this._tags && Object.keys(this._tags).length) {\n        event.tags = _objectSpread(_objectSpread({}, this._tags), event.tags);\n      }\n      if (this._user && Object.keys(this._user).length) {\n        event.user = _objectSpread(_objectSpread({}, this._user), event.user);\n      }\n      if (this._contexts && Object.keys(this._contexts).length) {\n        event.contexts = _objectSpread(_objectSpread({}, this._contexts), event.contexts);\n      }\n      if (this._level) {\n        event.level = this._level;\n      }\n      if (this._transactionName) {\n        event.transaction = this._transactionName;\n      }\n\n      // We want to set the trace context for normal events only if there isn't already\n      // a trace context on the event. There is a product feature in place where we link\n      // errors with transaction and it relies on that.\n      if (this._span) {\n        event.contexts = _objectSpread({\n          trace: this._span.getTraceContext()\n        }, event.contexts);\n        var transaction = this._span.transaction;\n        if (transaction) {\n          event.sdkProcessingMetadata = _objectSpread({\n            dynamicSamplingContext: transaction.getDynamicSamplingContext()\n          }, event.sdkProcessingMetadata);\n          var transactionName = transaction.name;\n          if (transactionName) {\n            event.tags = _objectSpread({\n              transaction: transactionName\n            }, event.tags);\n          }\n        }\n      }\n      this._applyFingerprint(event);\n      event.breadcrumbs = [].concat(_toConsumableArray(event.breadcrumbs || []), _toConsumableArray(this._breadcrumbs));\n      event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n      event.sdkProcessingMetadata = _objectSpread(_objectSpread({}, event.sdkProcessingMetadata), this._sdkProcessingMetadata);\n      return this._notifyEventProcessors([].concat(_toConsumableArray(getGlobalEventProcessors()), _toConsumableArray(this._eventProcessors)), event, hint);\n    }\n\n    /**\n     * Add data which will be accessible during event processing but won't get sent to Sentry\n     */\n  }, {\n    key: \"setSDKProcessingMetadata\",\n    value: function setSDKProcessingMetadata(newData) {\n      this._sdkProcessingMetadata = _objectSpread(_objectSpread({}, this._sdkProcessingMetadata), newData);\n      return this;\n    }\n\n    /**\n     * This will be called after {@link applyToEvent} is finished.\n     */\n  }, {\n    key: \"_notifyEventProcessors\",\n    value: function _notifyEventProcessors(processors, event, hint) {\n      var _this = this;\n      var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      return new SyncPromise(function (resolve, reject) {\n        var processor = processors[index];\n        if (event === null || typeof processor !== 'function') {\n          resolve(event);\n        } else {\n          var result = processor(_objectSpread({}, event), hint);\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && processor.id && result === null && logger.log(\"Event processor \\\"\".concat(processor.id, \"\\\" dropped event\"));\n          if (isThenable(result)) {\n            void result.then(function (final) {\n              return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);\n            }).then(null, reject);\n          } else {\n            void _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n          }\n        }\n      });\n    }\n\n    /**\n     * This will be called on every set call.\n     */\n  }, {\n    key: \"_notifyScopeListeners\",\n    value: function _notifyScopeListeners() {\n      var _this2 = this;\n      // We need this check for this._notifyingListeners to be able to work on scope during updates\n      // If this check is not here we'll produce endless recursion when something is done with the scope\n      // during the callback.\n      if (!this._notifyingListeners) {\n        this._notifyingListeners = true;\n        this._scopeListeners.forEach(function (callback) {\n          callback(_this2);\n        });\n        this._notifyingListeners = false;\n      }\n    }\n\n    /**\n     * Applies fingerprint from the scope to the event if there's one,\n     * uses message if there's one instead or get rid of empty fingerprint\n     */\n  }, {\n    key: \"_applyFingerprint\",\n    value: function _applyFingerprint(event) {\n      // Make sure it's an array first and we actually have something in place\n      event.fingerprint = event.fingerprint ? arrayify(event.fingerprint) : [];\n\n      // If we have something on the scope, then merge it with event\n      if (this._fingerprint) {\n        event.fingerprint = event.fingerprint.concat(this._fingerprint);\n      }\n\n      // If we have no data at all, remove empty array default\n      if (event.fingerprint && !event.fingerprint.length) {\n        delete event.fingerprint;\n      }\n    }\n  }], [{\n    key: \"clone\",\n    value: function clone(scope) {\n      var newScope = new Scope();\n      if (scope) {\n        newScope._breadcrumbs = _toConsumableArray(scope._breadcrumbs);\n        newScope._tags = _objectSpread({}, scope._tags);\n        newScope._extra = _objectSpread({}, scope._extra);\n        newScope._contexts = _objectSpread({}, scope._contexts);\n        newScope._user = scope._user;\n        newScope._level = scope._level;\n        newScope._span = scope._span;\n        newScope._session = scope._session;\n        newScope._transactionName = scope._transactionName;\n        newScope._fingerprint = scope._fingerprint;\n        newScope._eventProcessors = _toConsumableArray(scope._eventProcessors);\n        newScope._requestSession = scope._requestSession;\n        newScope._attachments = _toConsumableArray(scope._attachments);\n        newScope._sdkProcessingMetadata = _objectSpread({}, scope._sdkProcessingMetadata);\n      }\n      return newScope;\n    }\n  }]);\n  return Scope;\n}();\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors() {\n  return getGlobalSingleton('globalEventProcessors', function () {\n    return [];\n  });\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nfunction addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}\nexport { Scope, addGlobalEventProcessor };","map":{"version":3,"names":["DEFAULT_MAX_BREADCRUMBS","Scope","_classCallCheck","_notifyingListeners","_scopeListeners","_eventProcessors","_breadcrumbs","_attachments","_user","_tags","_extra","_contexts","_sdkProcessingMetadata","_createClass","key","value","addScopeListener","callback","push","addEventProcessor","setUser","user","_session","updateSession","_notifyScopeListeners","getUser","getRequestSession","_requestSession","setRequestSession","requestSession","setTags","tags","_objectSpread","setTag","_defineProperty","setExtras","extras","setExtra","extra","setFingerprint","fingerprint","_fingerprint","setLevel","level","_level","setTransactionName","name","_transactionName","setContext","context","setSpan","span","_span","getSpan","getTransaction","transaction","setSession","session","getSession","update","captureContext","updatedScope","Object","keys","length","isPlainObject","contexts","clear","undefined","addBreadcrumb","breadcrumb","maxBreadcrumbs","maxCrumbs","mergedBreadcrumb","timestamp","dateTimestampInSeconds","concat","_toConsumableArray","slice","getLastBreadcrumb","clearBreadcrumbs","addAttachment","attachment","getAttachments","clearAttachments","applyToEvent","event","hint","arguments","trace","getTraceContext","sdkProcessingMetadata","dynamicSamplingContext","getDynamicSamplingContext","transactionName","_applyFingerprint","breadcrumbs","_notifyEventProcessors","getGlobalEventProcessors","setSDKProcessingMetadata","newData","processors","_this","index","SyncPromise","resolve","reject","processor","result","__SENTRY_DEBUG__","id","logger","log","isThenable","then","final","_this2","forEach","arrayify","clone","scope","newScope","getGlobalSingleton","addGlobalEventProcessor"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/scope.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Attachment,\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Session,\n  Severity,\n  SeverityLevel,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport {\n  arrayify,\n  dateTimestampInSeconds,\n  getGlobalSingleton,\n  isPlainObject,\n  isThenable,\n  logger,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { updateSession } from './session';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: { [key: string]: unknown };\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n  protected _level?: Severity | SeverityLevel;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n      newScope._attachments = [...scope._attachments];\n      newScope._sdkProcessingMetadata = { ...scope._sdkProcessingMetadata };\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel,\n  ): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this.getSpan();\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getLastBreadcrumb(): Breadcrumb | undefined {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getAttachments(): Attachment[] {\n    return this._attachments;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Applies data from the scope to the event and runs all event processors on it.\n   *\n   * @param event Event\n   * @param hint Object containing additional information about the original exception, for use by the event processors.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint: EventHint = {}): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transaction = this._span.transaction;\n      if (transaction) {\n        event.sdkProcessingMetadata = {\n          dynamicSamplingContext: transaction.getDynamicSamplingContext(),\n          ...event.sdkProcessingMetadata,\n        };\n        const transactionName = transaction.name;\n        if (transactionName) {\n          event.tags = { transaction: transactionName, ...event.tags };\n        }\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    event.sdkProcessingMetadata = { ...event.sdkProcessingMetadata, ...this._sdkProcessingMetadata };\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  public setSDKProcessingMetadata(newData: { [key: string]: unknown }): this {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };\n\n    return this;\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n\n        __DEBUG_BUILD__ &&\n          processor.id &&\n          result === null &&\n          logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n        if (isThenable(result)) {\n          void result\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? arrayify(event.fingerprint) : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  return getGlobalSingleton<EventProcessor[]>('globalEventProcessors', () => []);\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n"],"mappings":";;;;;;;;AAmCA;AACA;AACA;AACA,IAAAA,uBAAA;;AAEA;AACA;AACA;AACA;AAHA,IAIAC,KAAA;EACA;;EAGA;;EAGA;;EAGA;;EAGA;;EAGA;;EAGA;;EAGA;;EAGA;;EAGA;AACA;AACA;AACA;;EAGA;;EAGA;EACA;;EAGA;;EAGA;;EAGA;;EAGA;;EAGA;;EAEA,SAAAA,MAAA;IAAAC,eAAA,OAAAD,KAAA;IACA,KAAAE,mBAAA;IACA,KAAAC,eAAA;IACA,KAAAC,gBAAA;IACA,KAAAC,YAAA;IACA,KAAAC,YAAA;IACA,KAAAC,KAAA;IACA,KAAAC,KAAA;IACA,KAAAC,MAAA;IACA,KAAAC,SAAA;IACA,KAAAC,sBAAA;EACA;;EAEA;AACA;AACA;AACA;EAHAC,YAAA,CAAAZ,KAAA;IAAAa,GAAA;IAAAC,KAAA;IAyBA;AACA;AACA;AACA;IACA,SAAAC,iBAAAC,QAAA;MACA,KAAAb,eAAA,CAAAc,IAAA,CAAAD,QAAA;IACA;;IAEA;AACA;AACA;EAFA;IAAAH,GAAA;IAAAC,KAAA,EAGA,SAAAI,kBAAAF,QAAA;MACA,KAAAZ,gBAAA,CAAAa,IAAA,CAAAD,QAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAH,GAAA;IAAAC,KAAA,EAGA,SAAAK,QAAAC,IAAA;MACA,KAAAb,KAAA,GAAAa,IAAA;MACA,SAAAC,QAAA;QACAC,aAAA,MAAAD,QAAA;UAAAD,IAAA,EAAAA;QAAA;MACA;MACA,KAAAG,qBAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAAU,QAAA;MACA,YAAAjB,KAAA;IACA;;IAEA;AACA;AACA;EAFA;IAAAM,GAAA;IAAAC,KAAA,EAGA,SAAAW,kBAAA;MACA,YAAAC,eAAA;IACA;;IAEA;AACA;AACA;EAFA;IAAAb,GAAA;IAAAC,KAAA,EAGA,SAAAa,kBAAAC,cAAA;MACA,KAAAF,eAAA,GAAAE,cAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAf,GAAA;IAAAC,KAAA,EAGA,SAAAe,QAAAC,IAAA;MACA,KAAAtB,KAAA,GAAAuB,aAAA,CAAAA,aAAA,KACA,KAAAvB,KAAA,GACAsB,IAAA,CACA;MACA,KAAAP,qBAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAAkB,OAAAnB,GAAA,EAAAC,KAAA;MACA,KAAAN,KAAA,GAAAuB,aAAA,CAAAA,aAAA,UAAAvB,KAAA,OAAAyB,eAAA,KAAApB,GAAA,EAAAC,KAAA;MACA,KAAAS,qBAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAAoB,UAAAC,MAAA;MACA,KAAA1B,MAAA,GAAAsB,aAAA,CAAAA,aAAA,KACA,KAAAtB,MAAA,GACA0B,MAAA,CACA;MACA,KAAAZ,qBAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAAsB,SAAAvB,GAAA,EAAAwB,KAAA;MACA,KAAA5B,MAAA,GAAAsB,aAAA,CAAAA,aAAA,UAAAtB,MAAA,OAAAwB,eAAA,KAAApB,GAAA,EAAAwB,KAAA;MACA,KAAAd,qBAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAAwB,eAAAC,WAAA;MACA,KAAAC,YAAA,GAAAD,WAAA;MACA,KAAAhB,qBAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAA2B;IACA;IACAC,KAAA,EACA;MACA,KAAAC,MAAA,GAAAD,KAAA;MACA,KAAAnB,qBAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAA8B,mBAAAC,IAAA;MACA,KAAAC,gBAAA,GAAAD,IAAA;MACA,KAAAtB,qBAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAAiC,WAAAlC,GAAA,EAAAmC,OAAA;MACA,IAAAA,OAAA;QACA;QACA,YAAAtC,SAAA,CAAAG,GAAA;MACA;QACA,KAAAH,SAAA,CAAAG,GAAA,IAAAmC,OAAA;MACA;MAEA,KAAAzB,qBAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAAmC,QAAAC,IAAA;MACA,KAAAC,KAAA,GAAAD,IAAA;MACA,KAAA3B,qBAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAAsC,QAAA;MACA,YAAAD,KAAA;IACA;;IAEA;AACA;AACA;EAFA;IAAAtC,GAAA;IAAAC,KAAA,EAGA,SAAAuC,eAAA;MACA;MACA;MACA,IAAAH,IAAA,QAAAE,OAAA;MACA,OAAAF,IAAA,IAAAA,IAAA,CAAAI,WAAA;IACA;;IAEA;AACA;AACA;EAFA;IAAAzC,GAAA;IAAAC,KAAA,EAGA,SAAAyC,WAAAC,OAAA;MACA,KAAAA,OAAA;QACA,YAAAnC,QAAA;MACA;QACA,KAAAA,QAAA,GAAAmC,OAAA;MACA;MACA,KAAAjC,qBAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAA2C,WAAA;MACA,YAAApC,QAAA;IACA;;IAEA;AACA;AACA;EAFA;IAAAR,GAAA;IAAAC,KAAA,EAGA,SAAA4C,OAAAC,cAAA;MACA,KAAAA,cAAA;QACA;MACA;MAEA,WAAAA,cAAA;QACA,IAAAC,YAAA,GAAAD,cAAA;QACA,OAAAC,YAAA,YAAA5D,KAAA,GAAA4D,YAAA;MACA;MAEA,IAAAD,cAAA,YAAA3D,KAAA;QACA,KAAAQ,KAAA,GAAAuB,aAAA,CAAAA,aAAA,UAAAvB,KAAA,GAAAmD,cAAA,CAAAnD,KAAA;QACA,KAAAC,MAAA,GAAAsB,aAAA,CAAAA,aAAA,UAAAtB,MAAA,GAAAkD,cAAA,CAAAlD,MAAA;QACA,KAAAC,SAAA,GAAAqB,aAAA,CAAAA,aAAA,UAAArB,SAAA,GAAAiD,cAAA,CAAAjD,SAAA;QACA,IAAAiD,cAAA,CAAApD,KAAA,IAAAsD,MAAA,CAAAC,IAAA,CAAAH,cAAA,CAAApD,KAAA,EAAAwD,MAAA;UACA,KAAAxD,KAAA,GAAAoD,cAAA,CAAApD,KAAA;QACA;QACA,IAAAoD,cAAA,CAAAhB,MAAA;UACA,KAAAA,MAAA,GAAAgB,cAAA,CAAAhB,MAAA;QACA;QACA,IAAAgB,cAAA,CAAAnB,YAAA;UACA,KAAAA,YAAA,GAAAmB,cAAA,CAAAnB,YAAA;QACA;QACA,IAAAmB,cAAA,CAAAjC,eAAA;UACA,KAAAA,eAAA,GAAAiC,cAAA,CAAAjC,eAAA;QACA;MACA,WAAAsC,aAAA,CAAAL,cAAA;QACA;QACAA,cAAA,GAAAA,cAAA;QACA,KAAAnD,KAAA,GAAAuB,aAAA,CAAAA,aAAA,UAAAvB,KAAA,GAAAmD,cAAA,CAAA7B,IAAA;QACA,KAAArB,MAAA,GAAAsB,aAAA,CAAAA,aAAA,UAAAtB,MAAA,GAAAkD,cAAA,CAAAtB,KAAA;QACA,KAAA3B,SAAA,GAAAqB,aAAA,CAAAA,aAAA,UAAArB,SAAA,GAAAiD,cAAA,CAAAM,QAAA;QACA,IAAAN,cAAA,CAAAvC,IAAA;UACA,KAAAb,KAAA,GAAAoD,cAAA,CAAAvC,IAAA;QACA;QACA,IAAAuC,cAAA,CAAAjB,KAAA;UACA,KAAAC,MAAA,GAAAgB,cAAA,CAAAjB,KAAA;QACA;QACA,IAAAiB,cAAA,CAAApB,WAAA;UACA,KAAAC,YAAA,GAAAmB,cAAA,CAAApB,WAAA;QACA;QACA,IAAAoB,cAAA,CAAA/B,cAAA;UACA,KAAAF,eAAA,GAAAiC,cAAA,CAAA/B,cAAA;QACA;MACA;MAEA;IACA;;IAEA;AACA;AACA;EAFA;IAAAf,GAAA;IAAAC,KAAA,EAGA,SAAAoD,MAAA;MACA,KAAA7D,YAAA;MACA,KAAAG,KAAA;MACA,KAAAC,MAAA;MACA,KAAAF,KAAA;MACA,KAAAG,SAAA;MACA,KAAAiC,MAAA,GAAAwB,SAAA;MACA,KAAArB,gBAAA,GAAAqB,SAAA;MACA,KAAA3B,YAAA,GAAA2B,SAAA;MACA,KAAAzC,eAAA,GAAAyC,SAAA;MACA,KAAAhB,KAAA,GAAAgB,SAAA;MACA,KAAA9C,QAAA,GAAA8C,SAAA;MACA,KAAA5C,qBAAA;MACA,KAAAjB,YAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAO,GAAA;IAAAC,KAAA,EAGA,SAAAsD,cAAAC,UAAA,EAAAC,cAAA;MACA,IAAAC,SAAA,UAAAD,cAAA,gBAAAA,cAAA,GAAAvE,uBAAA;;MAEA;MACA,IAAAwE,SAAA;QACA;MACA;MAEA,IAAAC,gBAAA,GAAAzC,aAAA;QACA0C,SAAA,EAAAC,sBAAA;MAAA,GACAL,UAAA,CACA;MACA,KAAAhE,YAAA,MAAAsE,MAAA,CAAAC,kBAAA,MAAAvE,YAAA,IAAAmE,gBAAA,GAAAK,KAAA,EAAAN,SAAA;MACA,KAAAhD,qBAAA;MAEA;IACA;;IAEA;AACA;AACA;EAFA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAAgE,kBAAA;MACA,YAAAzE,YAAA,MAAAA,YAAA,CAAA0D,MAAA;IACA;;IAEA;AACA;AACA;EAFA;IAAAlD,GAAA;IAAAC,KAAA,EAGA,SAAAiE,iBAAA;MACA,KAAA1E,YAAA;MACA,KAAAkB,qBAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAAV,GAAA;IAAAC,KAAA,EAGA,SAAAkE,cAAAC,UAAA;MACA,KAAA3E,YAAA,CAAAW,IAAA,CAAAgE,UAAA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAApE,GAAA;IAAAC,KAAA,EAGA,SAAAoE,eAAA;MACA,YAAA5E,YAAA;IACA;;IAEA;AACA;AACA;EAFA;IAAAO,GAAA;IAAAC,KAAA,EAGA,SAAAqE,iBAAA;MACA,KAAA7E,YAAA;MACA;IACA;;IAEA;AACA;AACA;AACA;AACA;AACA;AACA;EANA;IAAAO,GAAA;IAAAC,KAAA,EAOA,SAAAsE,aAAAC,KAAA;MAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAApB,SAAA,GAAAoB,SAAA;MACA,SAAA9E,MAAA,IAAAoD,MAAA,CAAAC,IAAA,MAAArD,MAAA,EAAAsD,MAAA;QACAsB,KAAA,CAAAhD,KAAA,GAAAN,aAAA,CAAAA,aAAA,UAAAtB,MAAA,GAAA4E,KAAA,CAAAhD,KAAA;MACA;MACA,SAAA7B,KAAA,IAAAqD,MAAA,CAAAC,IAAA,MAAAtD,KAAA,EAAAuD,MAAA;QACAsB,KAAA,CAAAvD,IAAA,GAAAC,aAAA,CAAAA,aAAA,UAAAvB,KAAA,GAAA6E,KAAA,CAAAvD,IAAA;MACA;MACA,SAAAvB,KAAA,IAAAsD,MAAA,CAAAC,IAAA,MAAAvD,KAAA,EAAAwD,MAAA;QACAsB,KAAA,CAAAjE,IAAA,GAAAW,aAAA,CAAAA,aAAA,UAAAxB,KAAA,GAAA8E,KAAA,CAAAjE,IAAA;MACA;MACA,SAAAV,SAAA,IAAAmD,MAAA,CAAAC,IAAA,MAAApD,SAAA,EAAAqD,MAAA;QACAsB,KAAA,CAAApB,QAAA,GAAAlC,aAAA,CAAAA,aAAA,UAAArB,SAAA,GAAA2E,KAAA,CAAApB,QAAA;MACA;MACA,SAAAtB,MAAA;QACA0C,KAAA,CAAA3C,KAAA,QAAAC,MAAA;MACA;MACA,SAAAG,gBAAA;QACAuC,KAAA,CAAA/B,WAAA,QAAAR,gBAAA;MACA;;MAEA;MACA;MACA;MACA,SAAAK,KAAA;QACAkC,KAAA,CAAApB,QAAA,GAAAlC,aAAA;UAAAyD,KAAA,OAAArC,KAAA,CAAAsC,eAAA;QAAA,GAAAJ,KAAA,CAAApB,QAAA;QACA,IAAAX,WAAA,QAAAH,KAAA,CAAAG,WAAA;QACA,IAAAA,WAAA;UACA+B,KAAA,CAAAK,qBAAA,GAAA3D,aAAA;YACA4D,sBAAA,EAAArC,WAAA,CAAAsC,yBAAA;UAAA,GACAP,KAAA,CAAAK,qBAAA,CACA;UACA,IAAAG,eAAA,GAAAvC,WAAA,CAAAT,IAAA;UACA,IAAAgD,eAAA;YACAR,KAAA,CAAAvD,IAAA,GAAAC,aAAA;cAAAuB,WAAA,EAAAuC;YAAA,GAAAR,KAAA,CAAAvD,IAAA;UACA;QACA;MACA;MAEA,KAAAgE,iBAAA,CAAAT,KAAA;MAEAA,KAAA,CAAAU,WAAA,MAAApB,MAAA,CAAAC,kBAAA,CAAAS,KAAA,CAAAU,WAAA,SAAAnB,kBAAA,MAAAvE,YAAA;MACAgF,KAAA,CAAAU,WAAA,GAAAV,KAAA,CAAAU,WAAA,CAAAhC,MAAA,OAAAsB,KAAA,CAAAU,WAAA,GAAA5B,SAAA;MAEAkB,KAAA,CAAAK,qBAAA,GAAA3D,aAAA,CAAAA,aAAA,KAAAsD,KAAA,CAAAK,qBAAA,QAAA/E,sBAAA;MAEA,YAAAqF,sBAAA,IAAArB,MAAA,CAAAC,kBAAA,CAAAqB,wBAAA,KAAArB,kBAAA,MAAAxE,gBAAA,IAAAiF,KAAA,EAAAC,IAAA;IACA;;IAEA;AACA;AACA;EAFA;IAAAzE,GAAA;IAAAC,KAAA,EAGA,SAAAoF,yBAAAC,OAAA;MACA,KAAAxF,sBAAA,GAAAoB,aAAA,CAAAA,aAAA,UAAApB,sBAAA,GAAAwF,OAAA;MAEA;IACA;;IAEA;AACA;AACA;EAFA;IAAAtF,GAAA;IAAAC,KAAA,EAGA,SAAAkF,uBACAI,UAAA,EACAf,KAAA,EACAC,IAAA,EAEA;MAAA,IAAAe,KAAA;MAAA,IADAC,KAAA,GAAAf,SAAA,CAAAxB,MAAA,QAAAwB,SAAA,QAAApB,SAAA,GAAAoB,SAAA;MAEA,WAAAgB,WAAA,WAAAC,OAAA,EAAAC,MAAA;QACA,IAAAC,SAAA,GAAAN,UAAA,CAAAE,KAAA;QACA,IAAAjB,KAAA,oBAAAqB,SAAA;UACAF,OAAA,CAAAnB,KAAA;QACA;UACA,IAAAsB,MAAA,GAAAD,SAAA,CAAA3E,aAAA,KAAAsD,KAAA,GAAAC,IAAA;UAEA,QAAAsB,gBAAA,oBAAAA,gBAAA,KACAF,SAAA,CAAAG,EAAA,IACAF,MAAA,aACAG,MAAA,CAAAC,GAAA,sBAAApC,MAAA,CAAA+B,SAAA,CAAAG,EAAA;UAEA,IAAAG,UAAA,CAAAL,MAAA;YACA,KAAAA,MAAA,CACAM,IAAA,WAAAC,KAAA;cAAA,OAAAb,KAAA,CAAAL,sBAAA,CAAAI,UAAA,EAAAc,KAAA,EAAA5B,IAAA,EAAAgB,KAAA,MAAAW,IAAA,CAAAT,OAAA;YAAA,GACAS,IAAA,OAAAR,MAAA;UACA;YACA,KAAAJ,KAAA,CAAAL,sBAAA,CAAAI,UAAA,EAAAO,MAAA,EAAArB,IAAA,EAAAgB,KAAA,MACAW,IAAA,CAAAT,OAAA,EACAS,IAAA,OAAAR,MAAA;UACA;QACA;MACA;IACA;;IAEA;AACA;AACA;EAFA;IAAA5F,GAAA;IAAAC,KAAA,EAGA,SAAAS,sBAAA;MAAA,IAAA4F,MAAA;MACA;MACA;MACA;MACA,UAAAjH,mBAAA;QACA,KAAAA,mBAAA;QACA,KAAAC,eAAA,CAAAiH,OAAA,WAAApG,QAAA;UACAA,QAAA,CAAAmG,MAAA;QACA;QACA,KAAAjH,mBAAA;MACA;IACA;;IAEA;AACA;AACA;AACA;EAHA;IAAAW,GAAA;IAAAC,KAAA,EAIA,SAAAgF,kBAAAT,KAAA;MACA;MACAA,KAAA,CAAA9C,WAAA,GAAA8C,KAAA,CAAA9C,WAAA,GAAA8E,QAAA,CAAAhC,KAAA,CAAA9C,WAAA;;MAEA;MACA,SAAAC,YAAA;QACA6C,KAAA,CAAA9C,WAAA,GAAA8C,KAAA,CAAA9C,WAAA,CAAAoC,MAAA,MAAAnC,YAAA;MACA;;MAEA;MACA,IAAA6C,KAAA,CAAA9C,WAAA,KAAA8C,KAAA,CAAA9C,WAAA,CAAAwB,MAAA;QACA,OAAAsB,KAAA,CAAA9C,WAAA;MACA;IACA;EAAA;IAAA1B,GAAA;IAAAC,KAAA,EAndA,SAAAwG,MAAAC,KAAA;MACA,IAAAC,QAAA,OAAAxH,KAAA;MACA,IAAAuH,KAAA;QACAC,QAAA,CAAAnH,YAAA,GAAAuE,kBAAA,CAAA2C,KAAA,CAAAlH,YAAA;QACAmH,QAAA,CAAAhH,KAAA,GAAAuB,aAAA,KAAAwF,KAAA,CAAA/G,KAAA;QACAgH,QAAA,CAAA/G,MAAA,GAAAsB,aAAA,KAAAwF,KAAA,CAAA9G,MAAA;QACA+G,QAAA,CAAA9G,SAAA,GAAAqB,aAAA,KAAAwF,KAAA,CAAA7G,SAAA;QACA8G,QAAA,CAAAjH,KAAA,GAAAgH,KAAA,CAAAhH,KAAA;QACAiH,QAAA,CAAA7E,MAAA,GAAA4E,KAAA,CAAA5E,MAAA;QACA6E,QAAA,CAAArE,KAAA,GAAAoE,KAAA,CAAApE,KAAA;QACAqE,QAAA,CAAAnG,QAAA,GAAAkG,KAAA,CAAAlG,QAAA;QACAmG,QAAA,CAAA1E,gBAAA,GAAAyE,KAAA,CAAAzE,gBAAA;QACA0E,QAAA,CAAAhF,YAAA,GAAA+E,KAAA,CAAA/E,YAAA;QACAgF,QAAA,CAAApH,gBAAA,GAAAwE,kBAAA,CAAA2C,KAAA,CAAAnH,gBAAA;QACAoH,QAAA,CAAA9F,eAAA,GAAA6F,KAAA,CAAA7F,eAAA;QACA8F,QAAA,CAAAlH,YAAA,GAAAsE,kBAAA,CAAA2C,KAAA,CAAAjH,YAAA;QACAkH,QAAA,CAAA7G,sBAAA,GAAAoB,aAAA,KAAAwF,KAAA,CAAA5G,sBAAA;MACA;MACA,OAAA6G,QAAA;IACA;EAAA;EAAA,OAAAxH,KAAA;AAAA;AAmcA;AACA;AACA;AACA,SAAAiG,yBAAA;EACA,OAAAwB,kBAAA;IAAA;EAAA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAAC,wBAAA1G,QAAA;EACAiF,wBAAA,GAAAhF,IAAA,CAAAD,QAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}