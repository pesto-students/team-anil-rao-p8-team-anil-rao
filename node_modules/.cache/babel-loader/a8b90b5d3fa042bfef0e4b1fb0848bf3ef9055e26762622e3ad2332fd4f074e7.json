{"ast":null,"code":"import _classCallCheck from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { trace, getCurrentHub } from '@sentry/core';\nimport { addNonEnumerableProperty, logger } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\nfunction isValidPrismaClient(possibleClient) {\n  return !!possibleClient && !!possibleClient['$use'];\n}\n\n/** Tracing integration for @prisma/client package */\nvar Prisma = /*#__PURE__*/function () {\n  /**\n   * @inheritDoc\n   */\n  function Prisma() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Prisma);\n    Prisma.prototype.__init.call(this);\n    // We instrument the PrismaClient inside the constructor and not inside `setupOnce` because in some cases of server-side\n    // bundling (Next.js) multiple Prisma clients can be instantiated, even though users don't intend to. When instrumenting\n    // in setupOnce we can only ever instrument one client.\n    // https://github.com/getsentry/sentry-javascript/issues/7216#issuecomment-1602375012\n    // In the future we might explore providing a dedicated PrismaClient middleware instead of this hack.\n    if (isValidPrismaClient(options.client) && !options.client._sentryInstrumented) {\n      addNonEnumerableProperty(options.client, '_sentryInstrumented', true);\n      options.client.$use(function (params, next) {\n        if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n          return next(params);\n        }\n        var action = params.action;\n        var model = params.model;\n        return trace({\n          name: model ? \"\".concat(model, \" \").concat(action) : action,\n          op: 'db.sql.prisma',\n          data: {\n            'db.system': 'prisma'\n          }\n        }, function () {\n          return next(params);\n        });\n      });\n    } else {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Unsupported Prisma client provided to PrismaIntegration. Provided client: \".concat(JSON.stringify(options.client)));\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(Prisma, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Prisma.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      // Noop - here for backwards compatibility\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Prisma';\n    }\n  }]);\n  return Prisma;\n}();\nPrisma.__initStatic();\nexport { Prisma };","map":{"version":3,"names":["isValidPrismaClient","possibleClient","Prisma","options","arguments","length","undefined","_classCallCheck","prototype","__init","call","client","_sentryInstrumented","addNonEnumerableProperty","$use","params","next","shouldDisableAutoInstrumentation","getCurrentHub","action","model","trace","name","concat","op","data","__SENTRY_DEBUG__","logger","warn","JSON","stringify","_createClass","key","value","id","setupOnce","__initStatic"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/node/integrations/prisma.ts"],"sourcesContent":["import { getCurrentHub, trace } from '@sentry/core';\nimport type { Integration } from '@sentry/types';\nimport { addNonEnumerableProperty, logger } from '@sentry/utils';\n\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ntype PrismaAction =\n  | 'findUnique'\n  | 'findMany'\n  | 'findFirst'\n  | 'create'\n  | 'createMany'\n  | 'update'\n  | 'updateMany'\n  | 'upsert'\n  | 'delete'\n  | 'deleteMany'\n  | 'executeRaw'\n  | 'queryRaw'\n  | 'aggregate'\n  | 'count'\n  | 'runCommandRaw';\n\ninterface PrismaMiddlewareParams {\n  model?: unknown;\n  action: PrismaAction;\n  args: unknown;\n  dataPath: string[];\n  runInTransaction: boolean;\n}\n\ntype PrismaMiddleware<T = unknown> = (\n  params: PrismaMiddlewareParams,\n  next: (params: PrismaMiddlewareParams) => Promise<T>,\n) => Promise<T>;\n\ninterface PrismaClient {\n  _sentryInstrumented?: boolean;\n  $use: (cb: PrismaMiddleware) => void;\n}\n\nfunction isValidPrismaClient(possibleClient: unknown): possibleClient is PrismaClient {\n  return !!possibleClient && !!(possibleClient as PrismaClient)['$use'];\n}\n\n/** Tracing integration for @prisma/client package */\nexport class Prisma implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Prisma';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Prisma.id;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { client?: unknown } = {}) {\n    // We instrument the PrismaClient inside the constructor and not inside `setupOnce` because in some cases of server-side\n    // bundling (Next.js) multiple Prisma clients can be instantiated, even though users don't intend to. When instrumenting\n    // in setupOnce we can only ever instrument one client.\n    // https://github.com/getsentry/sentry-javascript/issues/7216#issuecomment-1602375012\n    // In the future we might explore providing a dedicated PrismaClient middleware instead of this hack.\n    if (isValidPrismaClient(options.client) && !options.client._sentryInstrumented) {\n      addNonEnumerableProperty(options.client as any, '_sentryInstrumented', true);\n\n      options.client.$use((params, next: (params: PrismaMiddlewareParams) => Promise<unknown>) => {\n        if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n          return next(params);\n        }\n\n        const action = params.action;\n        const model = params.model;\n        return trace(\n          { name: model ? `${model} ${action}` : action, op: 'db.sql.prisma', data: { 'db.system': 'prisma' } },\n          () => next(params),\n        );\n      });\n    } else {\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          `Unsupported Prisma client provided to PrismaIntegration. Provided client: ${JSON.stringify(options.client)}`,\n        );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // Noop - here for backwards compatibility\n  }\n}\n"],"mappings":";;;;;AAyCA,SAAAA,oBAAAC,cAAA;EACA,SAAAA,cAAA,MAAAA,cAAA;AACA;;AAEA;AAAA,IACAC,MAAA;EAWA;AACA;AACA;EACA,SAAAA,OAAA;IAAA,IAAAC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;IAAAG,eAAA,OAAAL,MAAA;IAAAA,MAAA,CAAAM,SAAA,CAAAC,MAAA,CAAAC,IAAA;IACA;IACA;IACA;IACA;IACA;IACA,IAAAV,mBAAA,CAAAG,OAAA,CAAAQ,MAAA,MAAAR,OAAA,CAAAQ,MAAA,CAAAC,mBAAA;MACAC,wBAAA,CAAAV,OAAA,CAAAQ,MAAA;MAEAR,OAAA,CAAAQ,MAAA,CAAAG,IAAA,WAAAC,MAAA,EAAAC,IAAA;QACA,IAAAC,gCAAA,CAAAC,aAAA;UACA,OAAAF,IAAA,CAAAD,MAAA;QACA;QAEA,IAAAI,MAAA,GAAAJ,MAAA,CAAAI,MAAA;QACA,IAAAC,KAAA,GAAAL,MAAA,CAAAK,KAAA;QACA,OAAAC,KAAA,CACA;UAAAC,IAAA,EAAAF,KAAA,MAAAG,MAAA,CAAAH,KAAA,OAAAG,MAAA,CAAAJ,MAAA,IAAAA,MAAA;UAAAK,EAAA;UAAAC,IAAA;YAAA;UAAA;QAAA,GACA;UAAA,OAAAT,IAAA,CAAAD,MAAA;QAAA,CACA;MACA;IACA;MACA,QAAAW,gBAAA,oBAAAA,gBAAA,KACAC,MAAA,CAAAC,IAAA,8EAAAL,MAAA,CACAM,IAAA,CAAAC,SAAA,CAAA3B,OAAA,CAAAQ,MAAA,EACA;IACA;EACA;;EAEA;AACA;AACA;EAFAoB,YAAA,CAAA7B,MAAA;IAAA8B,GAAA;IAAAC,KAAA;IArCA;AACA;AACA;IACA,SAAAxB,OAAA;MAAA,KAAAa,IAAA,GAAApB,MAAA,CAAAgC,EAAA;IAAA;EAAA;IAAAF,GAAA;IAAAC,KAAA,EAqCA,SAAAE,UAAA;MACA;IAAA;EACA;IAAAH,GAAA;IAAAC,KAAA;IA/CA;AACA;AACA;IACA,SAAAG,aAAA;MAAA,KAAAF,EAAA;IAAA;EAAA;EAAA,OAAAhC,MAAA;AAAA;AA6CAA,MAAA,CAAAkC,YAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}