{"ast":null,"code":"import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { hasTracingEnabled, getCurrentHub } from '@sentry/core';\nimport { addInstrumentationHandler, browserPerformanceTimeOrigin, dynamicSamplingContextToSentryBaggageHeader, isInstanceOf, BAGGAGE_HEADER_NAME, SENTRY_XHR_DATA_KEY, stringMatchesSomePattern } from '@sentry/utils';\n\n/* eslint-disable max-lines */\n\nconst DEFAULT_TRACE_PROPAGATION_TARGETS = ['localhost', /^\\/(?!\\/)/];\n\n/** Options for Request Instrumentation */\n\nconst defaultRequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  // TODO (v8): Remove this property\n  tracingOrigins: DEFAULT_TRACE_PROPAGATION_TARGETS,\n  tracePropagationTargets: DEFAULT_TRACE_PROPAGATION_TARGETS,\n  _experiments: {}\n};\n\n/** Registers span creators for xhr and fetch requests  */\nfunction instrumentOutgoingRequests(_options) {\n  // eslint-disable-next-line deprecation/deprecation\n  const {\n    traceFetch,\n    traceXHR,\n    tracePropagationTargets,\n    tracingOrigins,\n    shouldCreateSpanForRequest,\n    _experiments\n  } = {\n    traceFetch: defaultRequestInstrumentationOptions.traceFetch,\n    traceXHR: defaultRequestInstrumentationOptions.traceXHR,\n    ..._options\n  };\n  const shouldCreateSpan = typeof shouldCreateSpanForRequest === 'function' ? shouldCreateSpanForRequest : _ => true;\n\n  // TODO(v8) Remove tracingOrigins here\n  // The only reason we're passing it in here is because this instrumentOutgoingRequests function is publicly exported\n  // and we don't want to break the API. We can remove it in v8.\n  const shouldAttachHeadersWithTargets = url => shouldAttachHeaders(url, tracePropagationTargets || tracingOrigins);\n  const spans = {};\n  if (traceFetch) {\n    addInstrumentationHandler('fetch', handlerData => {\n      const createdSpan = fetchCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (_optionalChain([_experiments, 'optionalAccess', _2 => _2.enableHTTPTimings]) && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n  if (traceXHR) {\n    addInstrumentationHandler('xhr', handlerData => {\n      const createdSpan = xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (_optionalChain([_experiments, 'optionalAccess', _3 => _3.enableHTTPTimings]) && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n}\n\n/**\n * Creates a temporary observer to listen to the next fetch/xhr resourcing timings,\n * so that when timings hit their per-browser limit they don't need to be removed.\n *\n * @param span A span that has yet to be finished, must contain `url` on data.\n */\nfunction addHTTPTimings(span) {\n  const url = span.data.url;\n  const observer = new PerformanceObserver(list => {\n    const entries = list.getEntries();\n    entries.forEach(entry => {\n      if ((entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest') && entry.name.endsWith(url)) {\n        const spanData = resourceTimingEntryToSpanData(entry);\n        spanData.forEach(data => span.setData(...data));\n        observer.disconnect();\n      }\n    });\n  });\n  observer.observe({\n    entryTypes: ['resource']\n  });\n}\nfunction resourceTimingEntryToSpanData(resourceTiming) {\n  const version = resourceTiming.nextHopProtocol.split('/')[1] || 'none';\n  const timingSpanData = [];\n  if (version) {\n    timingSpanData.push(['network.protocol.version', version]);\n  }\n  if (!browserPerformanceTimeOrigin) {\n    return timingSpanData;\n  }\n  return [...timingSpanData, ['http.request.connect_start', (browserPerformanceTimeOrigin + resourceTiming.connectStart) / 1000], ['http.request.request_start', (browserPerformanceTimeOrigin + resourceTiming.requestStart) / 1000], ['http.request.response_start', (browserPerformanceTimeOrigin + resourceTiming.responseStart) / 1000]];\n}\n\n/**\n * A function that determines whether to attach tracing headers to a request.\n * This was extracted from `instrumentOutgoingRequests` to make it easier to test shouldAttachHeaders.\n * We only export this fuction for testing purposes.\n */\nfunction shouldAttachHeaders(url, tracePropagationTargets) {\n  return stringMatchesSomePattern(url, tracePropagationTargets || DEFAULT_TRACE_PROPAGATION_TARGETS);\n}\n\n/**\n * Create and track fetch request spans\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction fetchCallback(handlerData, shouldCreateSpan, shouldAttachHeaders, spans) {\n  if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n    const span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n        const contentLength =\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');\n        const contentLengthNum = parseInt(contentLength);\n        if (contentLengthNum > 0) {\n          span.setData('http.response_content_length', contentLengthNum);\n        }\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n  const currentSpan = getCurrentHub().getScope().getSpan();\n  const activeTransaction = currentSpan && currentSpan.transaction;\n  if (currentSpan && activeTransaction) {\n    const {\n      method,\n      url\n    } = handlerData.fetchData;\n    const span = currentSpan.startChild({\n      data: {\n        url,\n        type: 'fetch',\n        'http.method': method\n      },\n      description: `${method} ${url}`,\n      op: 'http.client'\n    });\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n    const request = handlerData.args[0];\n\n    // In case the user hasn't set the second argument of a fetch call we default it to `{}`.\n    handlerData.args[1] = handlerData.args[1] || {};\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = handlerData.args[1];\n    if (shouldAttachHeaders(handlerData.fetchData.url)) {\n      options.headers = addTracingHeadersToFetchRequest(request, activeTransaction.getDynamicSamplingContext(), span, options);\n    }\n    return span;\n  }\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers\n */\nfunction addTracingHeadersToFetchRequest(request,\n// unknown is actually type Request but we can't export DOM types from this package,\ndynamicSamplingContext, span, options) {\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n  const sentryTraceHeader = span.toTraceparent();\n  const headers = typeof Request !== 'undefined' && isInstanceOf(request, Request) ? request.headers : options.headers;\n  if (!headers) {\n    return {\n      'sentry-trace': sentryTraceHeader,\n      baggage: sentryBaggageHeader\n    };\n  } else if (typeof Headers !== 'undefined' && isInstanceOf(headers, Headers)) {\n    const newHeaders = new Headers(headers);\n    newHeaders.append('sentry-trace', sentryTraceHeader);\n    if (sentryBaggageHeader) {\n      // If the same header is appended multiple times the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.append(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n    return newHeaders;\n  } else if (Array.isArray(headers)) {\n    const newHeaders = [...headers, ['sentry-trace', sentryTraceHeader]];\n    if (sentryBaggageHeader) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push([BAGGAGE_HEADER_NAME, sentryBaggageHeader]);\n    }\n    return newHeaders;\n  } else {\n    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    const newBaggageHeaders = [];\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders.push(...existingBaggageHeader);\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(existingBaggageHeader);\n    }\n    if (sentryBaggageHeader) {\n      newBaggageHeaders.push(sentryBaggageHeader);\n    }\n    return {\n      ...headers,\n      'sentry-trace': sentryTraceHeader,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined\n    };\n  }\n}\n\n/**\n * Create and track xhr request spans\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeaders, spans) {\n  const xhr = handlerData.xhr;\n  const sentryXhrData = xhr && xhr[SENTRY_XHR_DATA_KEY];\n  if (!hasTracingEnabled() || xhr && xhr.__sentry_own_request__ || !(xhr && sentryXhrData && shouldCreateSpan(sentryXhrData.url))) {\n    return;\n  }\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp) {\n    const spanId = xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n    const span = spans[spanId];\n    if (span) {\n      span.setHttpStatus(sentryXhrData.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n  const currentSpan = getCurrentHub().getScope().getSpan();\n  const activeTransaction = currentSpan && currentSpan.transaction;\n  if (currentSpan && activeTransaction) {\n    const span = currentSpan.startChild({\n      data: {\n        ...sentryXhrData.data,\n        type: 'xhr',\n        'http.method': sentryXhrData.method,\n        url: sentryXhrData.url\n      },\n      description: `${sentryXhrData.method} ${sentryXhrData.url}`,\n      op: 'http.client'\n    });\n    xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[xhr.__sentry_xhr_span_id__] = span;\n    if (xhr.setRequestHeader && shouldAttachHeaders(sentryXhrData.url)) {\n      try {\n        xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n        const dynamicSamplingContext = activeTransaction.getDynamicSamplingContext();\n        const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n        if (sentryBaggageHeader) {\n          // From MDN: \"If this method is called several times with the same header, the values are merged into one single request header.\"\n          // We can therefore simply set a baggage header without checking what was there before\n          // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\n          xhr.setRequestHeader(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n        }\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n    return span;\n  }\n}\nexport { DEFAULT_TRACE_PROPAGATION_TARGETS, addTracingHeadersToFetchRequest, defaultRequestInstrumentationOptions, instrumentOutgoingRequests, shouldAttachHeaders };","map":{"version":3,"names":["DEFAULT_TRACE_PROPAGATION_TARGETS","defaultRequestInstrumentationOptions","traceFetch","traceXHR","tracingOrigins","tracePropagationTargets","_experiments","instrumentOutgoingRequests","_options","shouldCreateSpanForRequest","shouldCreateSpan","_","shouldAttachHeadersWithTargets","url","shouldAttachHeaders","spans","addInstrumentationHandler","handlerData","createdSpan","fetchCallback","_optionalChain","_2","enableHTTPTimings","addHTTPTimings","xhrCallback","_3","span","data","observer","PerformanceObserver","list","entries","getEntries","forEach","entry","initiatorType","name","endsWith","spanData","resourceTimingEntryToSpanData","setData","disconnect","observe","entryTypes","resourceTiming","version","nextHopProtocol","split","timingSpanData","push","browserPerformanceTimeOrigin","connectStart","requestStart","responseStart","stringMatchesSomePattern","hasTracingEnabled","fetchData","endTimestamp","spanId","__span","response","setHttpStatus","status","contentLength","headers","get","contentLengthNum","parseInt","error","setStatus","finish","currentSpan","getCurrentHub","getScope","getSpan","activeTransaction","transaction","method","startChild","type","description","op","request","args","options","addTracingHeadersToFetchRequest","getDynamicSamplingContext","dynamicSamplingContext","sentryBaggageHeader","dynamicSamplingContextToSentryBaggageHeader","sentryTraceHeader","toTraceparent","Request","isInstanceOf","baggage","Headers","newHeaders","append","BAGGAGE_HEADER_NAME","Array","isArray","existingBaggageHeader","undefined","newBaggageHeaders","length","join","xhr","sentryXhrData","SENTRY_XHR_DATA_KEY","__sentry_own_request__","__sentry_xhr_span_id__","status_code","setRequestHeader"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/browser/request.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { getCurrentHub, hasTracingEnabled } from '@sentry/core';\nimport type { DynamicSamplingContext, Span } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  BAGGAGE_HEADER_NAME,\n  browserPerformanceTimeOrigin,\n  dynamicSamplingContextToSentryBaggageHeader,\n  isInstanceOf,\n  SENTRY_XHR_DATA_KEY,\n  stringMatchesSomePattern,\n} from '@sentry/utils';\n\nexport const DEFAULT_TRACE_PROPAGATION_TARGETS = ['localhost', /^\\/(?!\\/)/];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * Allow experiments for the request instrumentation.\n   */\n  _experiments: Partial<{\n    enableHTTPTimings: boolean;\n  }>;\n\n  /**\n   * @deprecated Will be removed in v8.\n   * Use `shouldCreateSpanForRequest` to control span creation and `tracePropagationTargets` to control\n   * trace header attachment.\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * List of strings and/or regexes used to determine which outgoing requests will have `sentry-trace` and `baggage`\n   * headers attached.\n   *\n   * Default: ['localhost', /^\\//] {@see DEFAULT_TRACE_PROPAGATION_TARGETS}\n   */\n  tracePropagationTargets: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * Default: (url: string) => true\n   */\n  shouldCreateSpanForRequest?(this: void, url: string): boolean;\n}\n\n/** Data returned from fetch callback */\nexport interface FetchData {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[]; // the arguments passed to the fetch call itself\n  fetchData?: {\n    method: string;\n    url: string;\n    // span_id\n    __span?: string;\n  };\n\n  // TODO Should this be unknown instead? If we vendor types, make it a Response\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  response?: any;\n  error?: unknown;\n\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    [SENTRY_XHR_DATA_KEY]?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    getRequestHeader?: (key: string) => string;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\ntype PolymorphicRequestHeaders =\n  | Record<string, string | undefined>\n  | Array<[string, string]>\n  // the below is not preicsely the Header type used in Request, but it'll pass duck-typing\n  | {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      append: (key: string, value: string) => void;\n      get: (key: string) => string | null | undefined;\n    };\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  // TODO (v8): Remove this property\n  tracingOrigins: DEFAULT_TRACE_PROPAGATION_TARGETS,\n  tracePropagationTargets: DEFAULT_TRACE_PROPAGATION_TARGETS,\n  _experiments: {},\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function instrumentOutgoingRequests(_options?: Partial<RequestInstrumentationOptions>): void {\n  // eslint-disable-next-line deprecation/deprecation\n  const { traceFetch, traceXHR, tracePropagationTargets, tracingOrigins, shouldCreateSpanForRequest, _experiments } = {\n    traceFetch: defaultRequestInstrumentationOptions.traceFetch,\n    traceXHR: defaultRequestInstrumentationOptions.traceXHR,\n    ..._options,\n  };\n\n  const shouldCreateSpan =\n    typeof shouldCreateSpanForRequest === 'function' ? shouldCreateSpanForRequest : (_: string) => true;\n\n  // TODO(v8) Remove tracingOrigins here\n  // The only reason we're passing it in here is because this instrumentOutgoingRequests function is publicly exported\n  // and we don't want to break the API. We can remove it in v8.\n  const shouldAttachHeadersWithTargets = (url: string): boolean =>\n    shouldAttachHeaders(url, tracePropagationTargets || tracingOrigins);\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler('fetch', (handlerData: FetchData) => {\n      const createdSpan = fetchCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (_experiments?.enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler('xhr', (handlerData: XHRData) => {\n      const createdSpan = xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (_experiments?.enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n}\n\n/**\n * Creates a temporary observer to listen to the next fetch/xhr resourcing timings,\n * so that when timings hit their per-browser limit they don't need to be removed.\n *\n * @param span A span that has yet to be finished, must contain `url` on data.\n */\nfunction addHTTPTimings(span: Span): void {\n  const url = span.data.url;\n  const observer = new PerformanceObserver(list => {\n    const entries = list.getEntries() as PerformanceResourceTiming[];\n    entries.forEach(entry => {\n      if ((entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest') && entry.name.endsWith(url)) {\n        const spanData = resourceTimingEntryToSpanData(entry);\n        spanData.forEach(data => span.setData(...data));\n        observer.disconnect();\n      }\n    });\n  });\n  observer.observe({\n    entryTypes: ['resource'],\n  });\n}\n\nfunction resourceTimingEntryToSpanData(resourceTiming: PerformanceResourceTiming): [string, string | number][] {\n  const version = resourceTiming.nextHopProtocol.split('/')[1] || 'none';\n\n  const timingSpanData: [string, string | number][] = [];\n  if (version) {\n    timingSpanData.push(['network.protocol.version', version]);\n  }\n\n  if (!browserPerformanceTimeOrigin) {\n    return timingSpanData;\n  }\n  return [\n    ...timingSpanData,\n    ['http.request.connect_start', (browserPerformanceTimeOrigin + resourceTiming.connectStart) / 1000],\n    ['http.request.request_start', (browserPerformanceTimeOrigin + resourceTiming.requestStart) / 1000],\n    ['http.request.response_start', (browserPerformanceTimeOrigin + resourceTiming.responseStart) / 1000],\n  ];\n}\n\n/**\n * A function that determines whether to attach tracing headers to a request.\n * This was extracted from `instrumentOutgoingRequests` to make it easier to test shouldAttachHeaders.\n * We only export this fuction for testing purposes.\n */\nexport function shouldAttachHeaders(url: string, tracePropagationTargets: (string | RegExp)[] | undefined): boolean {\n  return stringMatchesSomePattern(url, tracePropagationTargets || DEFAULT_TRACE_PROPAGATION_TARGETS);\n}\n\n/**\n * Create and track fetch request spans\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction fetchCallback(\n  handlerData: FetchData,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n): Span | void {\n  if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {\n    return;\n  }\n\n  if (handlerData.endTimestamp) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      if (handlerData.response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(handlerData.response.status);\n\n        const contentLength: string =\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');\n\n        const contentLengthNum = parseInt(contentLength);\n        if (contentLengthNum > 0) {\n          span.setData('http.response_content_length', contentLengthNum);\n        }\n      } else if (handlerData.error) {\n        span.setStatus('internal_error');\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  const currentSpan = getCurrentHub().getScope().getSpan();\n  const activeTransaction = currentSpan && currentSpan.transaction;\n\n  if (currentSpan && activeTransaction) {\n    const { method, url } = handlerData.fetchData;\n    const span = currentSpan.startChild({\n      data: {\n        url,\n        type: 'fetch',\n        'http.method': method,\n      },\n      description: `${method} ${url}`,\n      op: 'http.client',\n    });\n\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n\n    const request: string | Request = handlerData.args[0];\n\n    // In case the user hasn't set the second argument of a fetch call we default it to `{}`.\n    handlerData.args[1] = handlerData.args[1] || {};\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options: { [key: string]: any } = handlerData.args[1];\n\n    if (shouldAttachHeaders(handlerData.fetchData.url)) {\n      options.headers = addTracingHeadersToFetchRequest(\n        request,\n        activeTransaction.getDynamicSamplingContext(),\n        span,\n        options,\n      );\n    }\n    return span;\n  }\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers\n */\nexport function addTracingHeadersToFetchRequest(\n  request: string | unknown, // unknown is actually type Request but we can't export DOM types from this package,\n  dynamicSamplingContext: Partial<DynamicSamplingContext>,\n  span: Span,\n  options: {\n    headers?:\n      | {\n          [key: string]: string[] | string | undefined;\n        }\n      | PolymorphicRequestHeaders;\n  },\n): PolymorphicRequestHeaders {\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n  const sentryTraceHeader = span.toTraceparent();\n\n  const headers =\n    typeof Request !== 'undefined' && isInstanceOf(request, Request) ? (request as Request).headers : options.headers;\n\n  if (!headers) {\n    return { 'sentry-trace': sentryTraceHeader, baggage: sentryBaggageHeader };\n  } else if (typeof Headers !== 'undefined' && isInstanceOf(headers, Headers)) {\n    const newHeaders = new Headers(headers as Headers);\n\n    newHeaders.append('sentry-trace', sentryTraceHeader);\n\n    if (sentryBaggageHeader) {\n      // If the same header is appended multiple times the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.append(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else if (Array.isArray(headers)) {\n    const newHeaders = [...headers, ['sentry-trace', sentryTraceHeader]];\n\n    if (sentryBaggageHeader) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push([BAGGAGE_HEADER_NAME, sentryBaggageHeader]);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else {\n    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    const newBaggageHeaders: string[] = [];\n\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders.push(...existingBaggageHeader);\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(existingBaggageHeader);\n    }\n\n    if (sentryBaggageHeader) {\n      newBaggageHeaders.push(sentryBaggageHeader);\n    }\n\n    return {\n      ...(headers as Exclude<typeof headers, Headers>),\n      'sentry-trace': sentryTraceHeader,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n\n/**\n * Create and track xhr request spans\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n): Span | void {\n  const xhr = handlerData.xhr;\n  const sentryXhrData = xhr && xhr[SENTRY_XHR_DATA_KEY];\n\n  if (\n    !hasTracingEnabled() ||\n    (xhr && xhr.__sentry_own_request__) ||\n    !(xhr && sentryXhrData && shouldCreateSpan(sentryXhrData.url))\n  ) {\n    return;\n  }\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp) {\n    const spanId = xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      span.setHttpStatus(sentryXhrData.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return;\n  }\n\n  const currentSpan = getCurrentHub().getScope().getSpan();\n  const activeTransaction = currentSpan && currentSpan.transaction;\n\n  if (currentSpan && activeTransaction) {\n    const span = currentSpan.startChild({\n      data: {\n        ...sentryXhrData.data,\n        type: 'xhr',\n        'http.method': sentryXhrData.method,\n        url: sentryXhrData.url,\n      },\n      description: `${sentryXhrData.method} ${sentryXhrData.url}`,\n      op: 'http.client',\n    });\n\n    xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[xhr.__sentry_xhr_span_id__] = span;\n\n    if (xhr.setRequestHeader && shouldAttachHeaders(sentryXhrData.url)) {\n      try {\n        xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n\n        const dynamicSamplingContext = activeTransaction.getDynamicSamplingContext();\n        const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n\n        if (sentryBaggageHeader) {\n          // From MDN: \"If this method is called several times with the same header, the values are merged into one single request header.\"\n          // We can therefore simply set a baggage header without checking what was there before\n          // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\n          xhr.setRequestHeader(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n        }\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n\n    return span;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}