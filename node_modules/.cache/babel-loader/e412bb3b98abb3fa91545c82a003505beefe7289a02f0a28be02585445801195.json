{"ast":null,"code":"import _classCallCheck from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { loadModule, logger, fill, arrayify, isThenable } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\n\n/** Tracing integration for Apollo */\nvar Apollo = /*#__PURE__*/function () {\n  /**\n   * @inheritDoc\n   */\n  function Apollo() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      useNestjs: false\n    };\n    _classCallCheck(this, Apollo);\n    Apollo.prototype.__init.call(this);\n    this._useNest = !!options.useNestjs;\n  }\n\n  /** @inheritdoc */\n  _createClass(Apollo, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Apollo.id;\n    }\n  }, {\n    key: \"loadDependency\",\n    value: function loadDependency() {\n      if (this._useNest) {\n        this._module = this._module || loadModule('@nestjs/graphql');\n      } else {\n        this._module = this._module || loadModule('apollo-server-core');\n      }\n      return this._module;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(_, getCurrentHub) {\n      if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Apollo Integration is skipped because of instrumenter configuration.');\n        return;\n      }\n      if (this._useNest) {\n        var pkg = this.loadDependency();\n        if (!pkg) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Apollo-NestJS Integration was unable to require @nestjs/graphql package.');\n          return;\n        }\n\n        /**\n         * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.\n         */\n        fill(pkg.GraphQLFactory.prototype, 'mergeWithSchema', function (orig) {\n          return function () {\n            fill(this.resolversExplorerService, 'explore', function (orig) {\n              return function () {\n                var resolvers = arrayify(orig.call(this));\n                var instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);\n                return instrumentedResolvers;\n              };\n            });\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            return orig.call.apply(orig, [this].concat(args));\n          };\n        });\n      } else {\n        var _pkg = this.loadDependency();\n        if (!_pkg) {\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Apollo Integration was unable to require apollo-server-core package.');\n          return;\n        }\n\n        /**\n         * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n         */\n        fill(_pkg.ApolloServerBase.prototype, 'constructSchema', function (orig) {\n          return function () {\n            if (!this.config.resolvers) {\n              if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n                if (this.config.schema) {\n                  logger.warn('Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.' + 'If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.');\n                  logger.warn();\n                } else if (this.config.modules) {\n                  logger.warn('Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.');\n                }\n                logger.error('Skipping tracing as no resolvers found on the `ApolloServer` instance.');\n              }\n              return orig.call(this);\n            }\n            var resolvers = arrayify(this.config.resolvers);\n            this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);\n            return orig.call(this);\n          };\n        });\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'Apollo';\n    }\n  }]);\n  return Apollo;\n}();\nApollo.__initStatic();\nfunction instrumentResolvers(resolvers, getCurrentHub) {\n  return resolvers.map(function (model) {\n    Object.keys(model).forEach(function (resolverGroupName) {\n      Object.keys(model[resolverGroupName]).forEach(function (resolverName) {\n        if (typeof model[resolverGroupName][resolverName] !== 'function') {\n          return;\n        }\n        wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n      });\n    });\n    return model;\n  });\n}\n\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\nfunction wrapResolver(model, resolverGroupName, resolverName, getCurrentHub) {\n  fill(model[resolverGroupName], resolverName, function (orig) {\n    return function () {\n      var scope = getCurrentHub().getScope();\n      var parentSpan = _optionalChain([scope, 'optionalAccess', function (_2) {\n        return _2.getSpan;\n      }, 'call', function (_3) {\n        return _3();\n      }]);\n      var span = _optionalChain([parentSpan, 'optionalAccess', function (_4) {\n        return _4.startChild;\n      }, 'call', function (_5) {\n        return _5({\n          description: \"\".concat(resolverGroupName, \".\").concat(resolverName),\n          op: 'graphql.resolve'\n        });\n      }]);\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      var rv = orig.call.apply(orig, [this].concat(args));\n      if (isThenable(rv)) {\n        return rv.then(function (res) {\n          _optionalChain([span, 'optionalAccess', function (_6) {\n            return _6.finish;\n          }, 'call', function (_7) {\n            return _7();\n          }]);\n          return res;\n        });\n      }\n      _optionalChain([span, 'optionalAccess', function (_8) {\n        return _8.finish;\n      }, 'call', function (_9) {\n        return _9();\n      }]);\n      return rv;\n    };\n  });\n}\nexport { Apollo };","map":{"version":3,"names":["Apollo","options","arguments","length","undefined","useNestjs","_classCallCheck","prototype","__init","call","_useNest","_createClass","key","value","name","id","loadDependency","_module","loadModule","setupOnce","_","getCurrentHub","shouldDisableAutoInstrumentation","__SENTRY_DEBUG__","logger","log","pkg","error","fill","GraphQLFactory","orig","resolversExplorerService","resolvers","arrayify","instrumentedResolvers","instrumentResolvers","_len","args","Array","_key","apply","concat","ApolloServerBase","config","schema","warn","modules","__initStatic","map","model","Object","keys","forEach","resolverGroupName","resolverName","wrapResolver","scope","getScope","parentSpan","_optionalChain","_2","getSpan","_3","span","_4","startChild","_5","description","op","_len2","_key2","rv","isThenable","then","res","_6","finish","_7","_8","_9"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/node/integrations/apollo.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor } from '@sentry/types';\nimport { arrayify, fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport type { LazyLoadedIntegration } from './lazy';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ninterface ApolloOptions {\n  useNestjs?: boolean;\n}\n\ntype ApolloResolverGroup = {\n  [key: string]: () => unknown;\n};\n\ntype ApolloModelResolvers = {\n  [key: string]: ApolloResolverGroup;\n};\n\ntype GraphQLModule = {\n  GraphQLFactory: {\n    prototype: {\n      create: (resolvers: ApolloModelResolvers[]) => unknown;\n    };\n  };\n};\n\ntype ApolloModule = {\n  ApolloServerBase: {\n    prototype: {\n      constructSchema: (config: unknown) => unknown;\n    };\n  };\n};\n\n/** Tracing integration for Apollo */\nexport class Apollo implements LazyLoadedIntegration<GraphQLModule & ApolloModule> {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Apollo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Apollo.id;\n\n  private readonly _useNest: boolean;\n\n  private _module?: GraphQLModule & ApolloModule;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    options: ApolloOptions = {\n      useNestjs: false,\n    },\n  ) {\n    this._useNest = !!options.useNestjs;\n  }\n\n  /** @inheritdoc */\n  public loadDependency(): (GraphQLModule & ApolloModule) | undefined {\n    if (this._useNest) {\n      this._module = this._module || loadModule('@nestjs/graphql');\n    } else {\n      this._module = this._module || loadModule('apollo-server-core');\n    }\n\n    return this._module;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      __DEBUG_BUILD__ && logger.log('Apollo Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    if (this._useNest) {\n      const pkg = this.loadDependency();\n\n      if (!pkg) {\n        __DEBUG_BUILD__ && logger.error('Apollo-NestJS Integration was unable to require @nestjs/graphql package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.\n       */\n      fill(\n        pkg.GraphQLFactory.prototype,\n        'mergeWithSchema',\n        function (orig: (this: unknown, ...args: unknown[]) => unknown) {\n          return function (\n            this: { resolversExplorerService: { explore: () => ApolloModelResolvers[] } },\n            ...args: unknown[]\n          ) {\n            fill(this.resolversExplorerService, 'explore', function (orig: () => ApolloModelResolvers[]) {\n              return function (this: unknown) {\n                const resolvers = arrayify(orig.call(this));\n\n                const instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);\n\n                return instrumentedResolvers;\n              };\n            });\n\n            return orig.call(this, ...args);\n          };\n        },\n      );\n    } else {\n      const pkg = this.loadDependency();\n\n      if (!pkg) {\n        __DEBUG_BUILD__ && logger.error('Apollo Integration was unable to require apollo-server-core package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n       */\n      fill(pkg.ApolloServerBase.prototype, 'constructSchema', function (orig: (config: unknown) => unknown) {\n        return function (this: {\n          config: { resolvers?: ApolloModelResolvers[]; schema?: unknown; modules?: unknown };\n        }) {\n          if (!this.config.resolvers) {\n            if (__DEBUG_BUILD__) {\n              if (this.config.schema) {\n                logger.warn(\n                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.' +\n                    'If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.',\n                );\n                logger.warn();\n              } else if (this.config.modules) {\n                logger.warn(\n                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.',\n                );\n              }\n\n              logger.error('Skipping tracing as no resolvers found on the `ApolloServer` instance.');\n            }\n\n            return orig.call(this);\n          }\n\n          const resolvers = arrayify(this.config.resolvers);\n\n          this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);\n\n          return orig.call(this);\n        };\n      });\n    }\n  }\n}\n\nfunction instrumentResolvers(resolvers: ApolloModelResolvers[], getCurrentHub: () => Hub): ApolloModelResolvers[] {\n  return resolvers.map(model => {\n    Object.keys(model).forEach(resolverGroupName => {\n      Object.keys(model[resolverGroupName]).forEach(resolverName => {\n        if (typeof model[resolverGroupName][resolverName] !== 'function') {\n          return;\n        }\n\n        wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n      });\n    });\n\n    return model;\n  });\n}\n\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\nfunction wrapResolver(\n  model: ApolloModelResolvers,\n  resolverGroupName: string,\n  resolverName: string,\n  getCurrentHub: () => Hub,\n): void {\n  fill(model[resolverGroupName], resolverName, function (orig: () => unknown | Promise<unknown>) {\n    return function (this: unknown, ...args: unknown[]) {\n      const scope = getCurrentHub().getScope();\n      const parentSpan = scope?.getSpan();\n      const span = parentSpan?.startChild({\n        description: `${resolverGroupName}.${resolverName}`,\n        op: 'graphql.resolve',\n      });\n\n      const rv = orig.call(this, ...args);\n\n      if (isThenable(rv)) {\n        return rv.then((res: unknown) => {\n          span?.finish();\n          return res;\n        });\n      }\n\n      span?.finish();\n\n      return rv;\n    };\n  });\n}\n"],"mappings":";;;;;;AAmCA;AAAA,IACAA,MAAA;EAeA;;;EAGA,SAAAA,OAAA,EAIA;IAAA,IAHAC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;MACAG,SAAA;IACA;IAAAC,eAAA,OAAAN,MAAA;IACAA,MAAA,CAAAO,SAAA,CAAAC,MAAA,CAAAC,IAAA;IACA,KAAAC,QAAA,KAAAT,OAAA,CAAAI,SAAA;EACA;;EAEA;EAAAM,YAAA,CAAAX,MAAA;IAAAY,GAAA;IAAAC,KAAA;IApBA;;;IAGA,SAAAL,OAAA;MAAA,KAAAM,IAAA,GAAAd,MAAA,CAAAe,EAAA;IAAA;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAkBA,SAAAG,eAAA;MACA,SAAAN,QAAA;QACA,KAAAO,OAAA,QAAAA,OAAA,IAAAC,UAAA;MACA;QACA,KAAAD,OAAA,QAAAA,OAAA,IAAAC,UAAA;MACA;MAEA,YAAAD,OAAA;IACA;;IAEA;;;EAAA;IAAAL,GAAA;IAAAC,KAAA,EAGA,SAAAM,UAAAC,CAAA,EAAAC,aAAA;MACA,IAAAC,gCAAA,CAAAD,aAAA;QACA,QAAAE,gBAAA,oBAAAA,gBAAA,KAAAC,MAAA,CAAAC,GAAA;QACA;MACA;MAEA,SAAAf,QAAA;QACA,IAAAgB,GAAA,QAAAV,cAAA;QAEA,KAAAU,GAAA;UACA,QAAAH,gBAAA,oBAAAA,gBAAA,KAAAC,MAAA,CAAAG,KAAA;UACA;QACA;;QAEA;;;QAGAC,IAAA,CACAF,GAAA,CAAAG,cAAA,CAAAtB,SAAA,EACA,mBACA,UAAAuB,IAAA;UACA,mBAGA;YACAF,IAAA,MAAAG,wBAAA,uBAAAD,IAAA;cACA;gBACA,IAAAE,SAAA,GAAAC,QAAA,CAAAH,IAAA,CAAArB,IAAA;gBAEA,IAAAyB,qBAAA,GAAAC,mBAAA,CAAAH,SAAA,EAAAX,aAAA;gBAEA,OAAAa,qBAAA;cACA;YACA;YAAA,SAAAE,IAAA,GAAAlC,SAAA,CAAAC,MAAA,EAVAkC,IAAA,OAAAC,KAAA,CAAAF,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;cAAAF,IAAA,CAAAE,IAAA,IAAArC,SAAA,CAAAqC,IAAA;YAAA;YAYA,OAAAT,IAAA,CAAArB,IAAA,CAAA+B,KAAA,CAAAV,IAAA,SAAAW,MAAA,CAAAJ,IAAA;UACA;QACA,CACA;MACA;QACA,IAAAX,IAAA,QAAAV,cAAA;QAEA,KAAAU,IAAA;UACA,QAAAH,gBAAA,oBAAAA,gBAAA,KAAAC,MAAA,CAAAG,KAAA;UACA;QACA;;QAEA;;;QAGAC,IAAA,CAAAF,IAAA,CAAAgB,gBAAA,CAAAnC,SAAA,+BAAAuB,IAAA;UACA,mBAEA;YACA,UAAAa,MAAA,CAAAX,SAAA;cACA,WAAAT,gBAAA,oBAAAA,gBAAA;gBACA,SAAAoB,MAAA,CAAAC,MAAA;kBACApB,MAAA,CAAAqB,IAAA,CACA,wGACA,4GACA;kBACArB,MAAA,CAAAqB,IAAA;gBACA,gBAAAF,MAAA,CAAAG,OAAA;kBACAtB,MAAA,CAAAqB,IAAA,CACA,sGACA;gBACA;gBAEArB,MAAA,CAAAG,KAAA;cACA;cAEA,OAAAG,IAAA,CAAArB,IAAA;YACA;YAEA,IAAAuB,SAAA,GAAAC,QAAA,MAAAU,MAAA,CAAAX,SAAA;YAEA,KAAAW,MAAA,CAAAX,SAAA,GAAAG,mBAAA,CAAAH,SAAA,EAAAX,aAAA;YAEA,OAAAS,IAAA,CAAArB,IAAA;UACA;QACA;MACA;IACA;EAAA;IAAAG,GAAA;IAAAC,KAAA;IAzHA;;;IAGA,SAAAkC,aAAA;MAAA,KAAAhC,EAAA;IAAA;EAAA;EAAA,OAAAf,MAAA;AAAA;AAuHAA,MAAA,CAAA+C,YAAA;AAEA,SAAAZ,oBAAAH,SAAA,EAAAX,aAAA;EACA,OAAAW,SAAA,CAAAgB,GAAA,WAAAC,KAAA;IACAC,MAAA,CAAAC,IAAA,CAAAF,KAAA,EAAAG,OAAA,WAAAC,iBAAA;MACAH,MAAA,CAAAC,IAAA,CAAAF,KAAA,CAAAI,iBAAA,GAAAD,OAAA,WAAAE,YAAA;QACA,WAAAL,KAAA,CAAAI,iBAAA,EAAAC,YAAA;UACA;QACA;QAEAC,YAAA,CAAAN,KAAA,EAAAI,iBAAA,EAAAC,YAAA,EAAAjC,aAAA;MACA;IACA;IAEA,OAAA4B,KAAA;EACA;AACA;;AAEA;;;AAGA,SAAAM,aACAN,KAAA,EACAI,iBAAA,EACAC,YAAA,EACAjC,aAAA,EACA;EACAO,IAAA,CAAAqB,KAAA,CAAAI,iBAAA,GAAAC,YAAA,YAAAxB,IAAA;IACA;MACA,IAAA0B,KAAA,GAAAnC,aAAA,GAAAoC,QAAA;MACA,IAAAC,UAAA,GAAAC,cAAA,EAAAH,KAAA,8BAAAI,EAAA;QAAA,OAAAA,EAAA,CAAAC,OAAA;MAAA,qBAAAC,EAAA;QAAA,OAAAA,EAAA;MAAA;MACA,IAAAC,IAAA,GAAAJ,cAAA,EAAAD,UAAA,8BAAAM,EAAA;QAAA,OAAAA,EAAA,CAAAC,UAAA;MAAA,qBAAAC,EAAA;QAAA,OAAAA,EAAA;UACAC,WAAA,KAAA1B,MAAA,CAAAY,iBAAA,OAAAZ,MAAA,CAAAa,YAAA;UACAc,EAAA;QACA;MAAA;MAAA,SAAAC,KAAA,GAAAnE,SAAA,CAAAC,MAAA,EANAkC,IAAA,OAAAC,KAAA,CAAA+B,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAAjC,IAAA,CAAAiC,KAAA,IAAApE,SAAA,CAAAoE,KAAA;MAAA;MAQA,IAAAC,EAAA,GAAAzC,IAAA,CAAArB,IAAA,CAAA+B,KAAA,CAAAV,IAAA,SAAAW,MAAA,CAAAJ,IAAA;MAEA,IAAAmC,UAAA,CAAAD,EAAA;QACA,OAAAA,EAAA,CAAAE,IAAA,WAAAC,GAAA;UACAf,cAAA,EAAAI,IAAA,8BAAAY,EAAA;YAAA,OAAAA,EAAA,CAAAC,MAAA;UAAA,qBAAAC,EAAA;YAAA,OAAAA,EAAA;UAAA;UACA,OAAAH,GAAA;QACA;MACA;MAEAf,cAAA,EAAAI,IAAA,8BAAAe,EAAA;QAAA,OAAAA,EAAA,CAAAF,MAAA;MAAA,qBAAAG,EAAA;QAAA,OAAAA,EAAA;MAAA;MAEA,OAAAR,EAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}