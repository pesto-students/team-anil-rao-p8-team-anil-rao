{"ast":null,"code":"// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/** JSDoc */\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\nfunction splitPath(filename) {\n  var parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nfunction resolve() {\n  var resolvedPath = '';\n  var resolvedAbsolute = false;\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = i >= 0 ? i < 0 || arguments.length <= i ? undefined : arguments[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n    resolvedPath = \"\".concat(path, \"/\").concat(resolvedPath);\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(resolvedPath.split('/').filter(function (p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr) {\n  var start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n  var end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nfunction relative(from, to) {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).slice(1);\n  to = resolve(to).slice(1);\n  /* eslint-enable no-param-reassign */\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n  var outputParts = [];\n  for (var _i = samePartsLength; _i < fromParts.length; _i++) {\n    outputParts.push('..');\n  }\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nfunction normalizePath(path) {\n  var isPathAbsolute = isAbsolute(path);\n  var trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  var normalizedPath = normalizeArray(path.split('/').filter(function (p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nfunction isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nfunction join() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nfunction dirname(path) {\n  var result = splitPath(path);\n  var root = result[0];\n  var dir = result[1];\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.slice(0, dir.length - 1);\n  }\n  return root + dir;\n}\n\n/** JSDoc */\nfunction basename(path, ext) {\n  var f = splitPath(path)[2];\n  if (ext && f.slice(ext.length * -1) === ext) {\n    f = f.slice(0, f.length - ext.length);\n  }\n  return f;\n}\nexport { basename, dirname, isAbsolute, join, normalizePath, relative, resolve };","map":{"version":3,"names":["normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","splitPathRe","splitPath","filename","exec","slice","resolve","resolvedPath","resolvedAbsolute","arguments","path","undefined","concat","charAt","split","filter","p","join","trim","arr","start","end","relative","from","to","fromParts","toParts","Math","min","samePartsLength","outputParts","push","normalizePath","isPathAbsolute","isAbsolute","trailingSlash","normalizedPath","_len","args","Array","_key","dirname","result","root","dir","basename","ext","f"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/path.ts"],"sourcesContent":["// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  const parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).slice(1);\n  to = resolve(to).slice(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0];\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.slice(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2];\n  if (ext && f.slice(ext.length * -1) === ext) {\n    f = f.slice(0, f.length - ext.length);\n  }\n  return f;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}