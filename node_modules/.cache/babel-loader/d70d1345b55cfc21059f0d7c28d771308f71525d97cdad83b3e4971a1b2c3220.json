{"ast":null,"code":"import { addTracingExtensions, getMainCarrier } from '@sentry/core';\nimport { isNodeEnv, loadModule, dynamicRequire } from '@sentry/utils';\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations() {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  const packageToIntegrationMapping = {\n    mongodb() {\n      const integration = dynamicRequire(module, './node/integrations/mongo');\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './node/integrations/mongo');\n      return new integration.Mongo();\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './node/integrations/mysql');\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './node/integrations/postgres');\n      return new integration.Postgres();\n    }\n  };\n  const mappedPackages = Object.keys(packageToIntegrationMapping).filter(moduleName => !!loadModule(moduleName)).map(pkg => {\n    try {\n      return packageToIntegrationMapping[pkg]();\n    } catch (e) {\n      return undefined;\n    }\n  }).filter(p => p);\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nfunction addExtensionMethods() {\n  addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n}\nexport { addExtensionMethods };","map":{"version":3,"names":["_autoloadDatabaseIntegrations","carrier","getMainCarrier","__SENTRY__","packageToIntegrationMapping","mongodb","integration","dynamicRequire","module","Mongo","mongoose","mysql","Mysql","pg","Postgres","mappedPackages","Object","keys","filter","moduleName","loadModule","map","pkg","e","undefined","p","length","integrations","addExtensionMethods","addTracingExtensions","isNodeEnv"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry-internal/src/extensions.ts"],"sourcesContent":["import { addTracingExtensions, getMainCarrier } from '@sentry/core';\nimport type { Integration, IntegrationClass } from '@sentry/types';\nimport { dynamicRequire, isNodeEnv, loadModule } from '@sentry/utils';\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './node/integrations/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './node/integrations/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './node/integrations/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './node/integrations/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n}\n"],"mappings":";;;AAIA;AACA;AACA;AACA,SAAAA,8BAAA;EACA,MAAAC,OAAA,GAAAC,cAAA;EACA,KAAAD,OAAA,CAAAE,UAAA;IACA;EACA;EAEA,MAAAC,2BAAA;IACAC,QAAA;MACA,MAAAC,WAAA,GAAAC,cAAA,CAAAC,MAAA;MAGA,WAAAF,WAAA,CAAAG,KAAA;IACA;IACAC,SAAA;MACA,MAAAJ,WAAA,GAAAC,cAAA,CAAAC,MAAA;MAGA,WAAAF,WAAA,CAAAG,KAAA;IACA;IACAE,MAAA;MACA,MAAAL,WAAA,GAAAC,cAAA,CAAAC,MAAA;MAGA,WAAAF,WAAA,CAAAM,KAAA;IACA;IACAC,GAAA;MACA,MAAAP,WAAA,GAAAC,cAAA,CAAAC,MAAA;MAGA,WAAAF,WAAA,CAAAQ,QAAA;IACA;EACA;EAEA,MAAAC,cAAA,GAAAC,MAAA,CAAAC,IAAA,CAAAb,2BAAA,EACAc,MAAA,CAAAC,UAAA,MAAAC,UAAA,CAAAD,UAAA,GACAE,GAAA,CAAAC,GAAA;IACA;MACA,OAAAlB,2BAAA,CAAAkB,GAAA;IACA,SAAAC,CAAA;MACA,OAAAC,SAAA;IACA;EACA,GACAN,MAAA,CAAAO,CAAA,IAAAA,CAAA;EAEA,IAAAV,cAAA,CAAAW,MAAA;IACAzB,OAAA,CAAAE,UAAA,CAAAwB,YAAA,QAAA1B,OAAA,CAAAE,UAAA,CAAAwB,YAAA,YAAAZ,cAAA;EACA;AACA;;AAEA;AACA;AACA;AACA,SAAAa,oBAAA;EACAC,oBAAA;;EAEA;EACA,IAAAC,SAAA;IACA9B,6BAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}