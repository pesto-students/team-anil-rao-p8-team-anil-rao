{"ast":null,"code":"import { configureScope, getCurrentHub } from '@sentry/browser';\nimport { addNonEnumerableProperty } from '@sentry/utils';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nconst ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nconst ACTION_BREADCRUMB_TYPE = 'info';\nconst defaultOptions = {\n  actionTransformer: action => action,\n  stateTransformer: state => state || null\n};\n\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\nfunction createReduxEnhancer(enhancerOptions) {\n  // Note: We return an any type as to not have type conflicts.\n  const options = {\n    ...defaultOptions,\n    ...enhancerOptions\n  };\n  return next => (reducer, initialState) => {\n    const sentryReducer = (state, action) => {\n      const newState = reducer(state, action);\n      configureScope(scope => {\n        /* Action breadcrumbs */\n        const transformedAction = options.actionTransformer(action);\n        if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n          scope.addBreadcrumb({\n            category: ACTION_BREADCRUMB_CATEGORY,\n            data: transformedAction,\n            type: ACTION_BREADCRUMB_TYPE\n          });\n        }\n\n        /* Set latest state to scope */\n        const transformedState = options.stateTransformer(newState);\n        if (typeof transformedState !== 'undefined' && transformedState !== null) {\n          const client = getCurrentHub().getClient();\n          const options = client && client.getOptions();\n          const normalizationDepth = options && options.normalizeDepth || 3; // default state normalization depth to 3\n\n          // Set the normalization depth of the redux state to the configured `normalizeDepth` option or a sane number as a fallback\n          const newStateContext = {\n            state: {\n              type: 'redux',\n              value: transformedState\n            }\n          };\n          addNonEnumerableProperty(newStateContext, '__sentry_override_normalization_depth__', 3 +\n          // 3 layers for `state.value.transformedState`\n          normalizationDepth // rest for the actual state\n          );\n\n          scope.setContext('state', newStateContext);\n        } else {\n          scope.setContext('state', null);\n        }\n\n        /* Allow user to configure scope with latest state */\n        const {\n          configureScopeWithState\n        } = options;\n        if (typeof configureScopeWithState === 'function') {\n          configureScopeWithState(scope, newState);\n        }\n      });\n      return newState;\n    };\n    return next(sentryReducer, initialState);\n  };\n}\nexport { createReduxEnhancer };","map":{"version":3,"names":["ACTION_BREADCRUMB_CATEGORY","ACTION_BREADCRUMB_TYPE","defaultOptions","actionTransformer","action","stateTransformer","state","createReduxEnhancer","enhancerOptions","options","next","reducer","initialState","sentryReducer","newState","configureScope","scope","transformedAction","addBreadcrumb","category","data","type","transformedState","client","getCurrentHub","getClient","getOptions","normalizationDepth","normalizeDepth","newStateContext","value","addNonEnumerableProperty","setContext","configureScopeWithState"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/redux.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { configureScope, getCurrentHub } from '@sentry/browser';\nimport type { Scope } from '@sentry/types';\nimport { addNonEnumerableProperty } from '@sentry/utils';\n\ninterface Action<T = any> {\n  type: T;\n}\n\ninterface AnyAction extends Action {\n  [extraProps: string]: any;\n}\n\ntype Reducer<S = any, A extends Action = AnyAction> = (state: S | undefined, action: A) => S;\n\ntype Dispatch<A extends Action = AnyAction> = <T extends A>(action: T, ...extraArgs: any[]) => T;\n\ntype ExtendState<State, Extension> = [Extension] extends [never] ? State : State & Extension;\n\ntype Unsubscribe = () => void;\n\ninterface Store<S = any, A extends Action = AnyAction, StateExt = never, Ext = Record<string, unknown>> {\n  dispatch: Dispatch<A>;\n  getState(): S;\n  subscribe(listener: () => void): Unsubscribe;\n  replaceReducer<NewState, NewActions extends Action>(\n    nextReducer: Reducer<NewState, NewActions>,\n  ): Store<ExtendState<NewState, StateExt>, NewActions, StateExt, Ext> & Ext;\n}\n\ndeclare const $CombinedState: unique symbol;\n\ntype CombinedState<S> = { readonly [$CombinedState]?: undefined } & S;\n\ntype PreloadedState<S> = Required<S> extends {\n  [$CombinedState]: undefined;\n}\n  ? S extends CombinedState<infer S1>\n    ? { [K in keyof S1]?: S1[K] extends Record<string, unknown> ? PreloadedState<S1[K]> : S1[K] }\n    : never\n  : { [K in keyof S]: S[K] extends string | number | boolean | symbol ? S[K] : PreloadedState<S[K]> };\n\ntype StoreEnhancerStoreCreator<Ext = Record<string, unknown>, StateExt = never> = <\n  S = any,\n  A extends Action = AnyAction,\n>(\n  reducer: Reducer<S, A>,\n  preloadedState?: PreloadedState<S>,\n) => Store<ExtendState<S, StateExt>, A, StateExt, Ext> & Ext;\n\nexport interface SentryEnhancerOptions<S = any> {\n  /**\n   * Transforms the state before attaching it to an event.\n   * Use this to remove any private data before sending it to Sentry.\n   * Return null to not attach the state.\n   */\n  stateTransformer(state: S | undefined): (S & any) | null;\n  /**\n   * Transforms the action before sending it as a breadcrumb.\n   * Use this to remove any private data before sending it to Sentry.\n   * Return null to not send the breadcrumb.\n   */\n  actionTransformer(action: AnyAction): AnyAction | null;\n  /**\n   * Called on every state update, configure the Sentry Scope with the redux state.\n   */\n  configureScopeWithState?(scope: Scope, state: S): void;\n}\n\nconst ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nconst ACTION_BREADCRUMB_TYPE = 'info';\n\nconst defaultOptions: SentryEnhancerOptions = {\n  actionTransformer: action => action,\n  stateTransformer: state => state || null,\n};\n\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\nfunction createReduxEnhancer(enhancerOptions?: Partial<SentryEnhancerOptions>): any {\n  // Note: We return an any type as to not have type conflicts.\n  const options = {\n    ...defaultOptions,\n    ...enhancerOptions,\n  };\n\n  return (next: StoreEnhancerStoreCreator): StoreEnhancerStoreCreator =>\n    <S = any, A extends Action = AnyAction>(reducer: Reducer<S, A>, initialState?: PreloadedState<S>) => {\n      const sentryReducer: Reducer<S, A> = (state, action): S => {\n        const newState = reducer(state, action);\n\n        configureScope(scope => {\n          /* Action breadcrumbs */\n          const transformedAction = options.actionTransformer(action);\n          if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n            scope.addBreadcrumb({\n              category: ACTION_BREADCRUMB_CATEGORY,\n              data: transformedAction,\n              type: ACTION_BREADCRUMB_TYPE,\n            });\n          }\n\n          /* Set latest state to scope */\n          const transformedState = options.stateTransformer(newState);\n          if (typeof transformedState !== 'undefined' && transformedState !== null) {\n            const client = getCurrentHub().getClient();\n            const options = client && client.getOptions();\n            const normalizationDepth = (options && options.normalizeDepth) || 3; // default state normalization depth to 3\n\n            // Set the normalization depth of the redux state to the configured `normalizeDepth` option or a sane number as a fallback\n            const newStateContext = { state: { type: 'redux', value: transformedState } };\n            addNonEnumerableProperty(\n              newStateContext,\n              '__sentry_override_normalization_depth__',\n              3 + // 3 layers for `state.value.transformedState`\n                normalizationDepth, // rest for the actual state\n            );\n\n            scope.setContext('state', newStateContext);\n          } else {\n            scope.setContext('state', null);\n          }\n\n          /* Allow user to configure scope with latest state */\n          const { configureScopeWithState } = options;\n          if (typeof configureScopeWithState === 'function') {\n            configureScopeWithState(scope, newState);\n          }\n        });\n\n        return newState;\n      };\n\n      return next(sentryReducer, initialState);\n    };\n}\n\nexport { createReduxEnhancer };\n"],"mappings":";;;AAAA;;AAqEA,MAAAA,0BAAA;AACA,MAAAC,sBAAA;AAEA,MAAAC,cAAA;EACAC,iBAAA,EAAAC,MAAA,IAAAA,MAAA;EACAC,gBAAA,EAAAC,KAAA,IAAAA,KAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAAC,oBAAAC,eAAA;EACA;EACA,MAAAC,OAAA;IACA,GAAAP,cAAA;IACA,GAAAM;EACA;EAEA,OAAAE,IAAA,IACA,CAAAC,OAAA,EAAAC,YAAA;IACA,MAAAC,aAAA,GAAAA,CAAAP,KAAA,EAAAF,MAAA;MACA,MAAAU,QAAA,GAAAH,OAAA,CAAAL,KAAA,EAAAF,MAAA;MAEAW,cAAA,CAAAC,KAAA;QACA;QACA,MAAAC,iBAAA,GAAAR,OAAA,CAAAN,iBAAA,CAAAC,MAAA;QACA,WAAAa,iBAAA,oBAAAA,iBAAA;UACAD,KAAA,CAAAE,aAAA;YACAC,QAAA,EAAAnB,0BAAA;YACAoB,IAAA,EAAAH,iBAAA;YACAI,IAAA,EAAApB;UACA;QACA;;QAEA;QACA,MAAAqB,gBAAA,GAAAb,OAAA,CAAAJ,gBAAA,CAAAS,QAAA;QACA,WAAAQ,gBAAA,oBAAAA,gBAAA;UACA,MAAAC,MAAA,GAAAC,aAAA,GAAAC,SAAA;UACA,MAAAhB,OAAA,GAAAc,MAAA,IAAAA,MAAA,CAAAG,UAAA;UACA,MAAAC,kBAAA,GAAAlB,OAAA,IAAAA,OAAA,CAAAmB,cAAA;;UAEA;UACA,MAAAC,eAAA;YAAAvB,KAAA;cAAAe,IAAA;cAAAS,KAAA,EAAAR;YAAA;UAAA;UACAS,wBAAA,CACAF,eAAA,EACA,2CACA;UAAA;UACAF,kBAAA;UACA;;UAEAX,KAAA,CAAAgB,UAAA,UAAAH,eAAA;QACA;UACAb,KAAA,CAAAgB,UAAA;QACA;;QAEA;QACA;UAAAC;QAAA,IAAAxB,OAAA;QACA,WAAAwB,uBAAA;UACAA,uBAAA,CAAAjB,KAAA,EAAAF,QAAA;QACA;MACA;MAEA,OAAAA,QAAA;IACA;IAEA,OAAAJ,IAAA,CAAAG,aAAA,EAAAD,YAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}