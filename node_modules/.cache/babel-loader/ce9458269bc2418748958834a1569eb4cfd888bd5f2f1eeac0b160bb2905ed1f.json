{"ast":null,"code":"import { isPlainObject, dateTimestampInSeconds, SyncPromise, logger, isThenable, arrayify, getGlobalSingleton } from '@sentry/utils';\nimport { updateSession } from './session.js';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nclass Scope {\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n\n  /** Transaction Name */\n\n  /** Span */\n\n  /** Session */\n\n  /** Request Mode Session Status */\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  static clone(scope) {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = {\n        ...scope._tags\n      };\n      newScope._extra = {\n        ...scope._extra\n      };\n      newScope._contexts = {\n        ...scope._contexts\n      };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n      newScope._attachments = [...scope._attachments];\n      newScope._sdkProcessingMetadata = {\n        ...scope._sdkProcessingMetadata\n      };\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  addScopeListener(callback) {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addEventProcessor(callback) {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setUser(user) {\n    this._user = user || {};\n    if (this._session) {\n      updateSession(this._session, {\n        user\n      });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getUser() {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getRequestSession() {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setRequestSession(requestSession) {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTags(tags) {\n    this._tags = {\n      ...this._tags,\n      ...tags\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTag(key, value) {\n    this._tags = {\n      ...this._tags,\n      [key]: value\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setExtras(extras) {\n    this._extra = {\n      ...this._extra,\n      ...extras\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setExtra(key, extra) {\n    this._extra = {\n      ...this._extra,\n      [key]: extra\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setFingerprint(fingerprint) {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setLevel(\n  // eslint-disable-next-line deprecation/deprecation\n  level) {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTransactionName(name) {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setContext(key, context) {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setSpan(span) {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSpan() {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTransaction() {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this.getSpan();\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setSession(session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSession() {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  update(captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n    if (typeof captureContext === 'function') {\n      const updatedScope = captureContext(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n    if (captureContext instanceof Scope) {\n      this._tags = {\n        ...this._tags,\n        ...captureContext._tags\n      };\n      this._extra = {\n        ...this._extra,\n        ...captureContext._extra\n      };\n      this._contexts = {\n        ...this._contexts,\n        ...captureContext._contexts\n      };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext;\n      this._tags = {\n        ...this._tags,\n        ...captureContext.tags\n      };\n      this._extra = {\n        ...this._extra,\n        ...captureContext.extra\n      };\n      this._contexts = {\n        ...this._contexts,\n        ...captureContext.contexts\n      };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clear() {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getLastBreadcrumb() {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clearBreadcrumbs() {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addAttachment(attachment) {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getAttachments() {\n    return this._attachments;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clearAttachments() {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Applies data from the scope to the event and runs all event processors on it.\n   *\n   * @param event Event\n   * @param hint Object containing additional information about the original exception, for use by the event processors.\n   * @hidden\n   */\n  applyToEvent(event) {\n    let hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = {\n        ...this._extra,\n        ...event.extra\n      };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = {\n        ...this._tags,\n        ...event.tags\n      };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = {\n        ...this._user,\n        ...event.user\n      };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = {\n        ...this._contexts,\n        ...event.contexts\n      };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (this._span) {\n      event.contexts = {\n        trace: this._span.getTraceContext(),\n        ...event.contexts\n      };\n      const transaction = this._span.transaction;\n      if (transaction) {\n        event.sdkProcessingMetadata = {\n          dynamicSamplingContext: transaction.getDynamicSamplingContext(),\n          ...event.sdkProcessingMetadata\n        };\n        const transactionName = transaction.name;\n        if (transactionName) {\n          event.tags = {\n            transaction: transactionName,\n            ...event.tags\n          };\n        }\n      }\n    }\n    this._applyFingerprint(event);\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n    event.sdkProcessingMetadata = {\n      ...event.sdkProcessingMetadata,\n      ...this._sdkProcessingMetadata\n    };\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  setSDKProcessingMetadata(newData) {\n    this._sdkProcessingMetadata = {\n      ...this._sdkProcessingMetadata,\n      ...newData\n    };\n    return this;\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  _notifyEventProcessors(processors, event, hint) {\n    let index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    return new SyncPromise((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({\n          ...event\n        }, hint);\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && processor.id && result === null && logger.log(`Event processor \"${processor.id}\" dropped event`);\n        if (isThenable(result)) {\n          void result.then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve)).then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  _notifyScopeListeners() {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  _applyFingerprint(event) {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? arrayify(event.fingerprint) : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors() {\n  return getGlobalSingleton('globalEventProcessors', () => []);\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nfunction addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}\nexport { Scope, addGlobalEventProcessor };","map":{"version":3,"names":["DEFAULT_MAX_BREADCRUMBS","Scope","constructor","_notifyingListeners","_scopeListeners","_eventProcessors","_breadcrumbs","_attachments","_user","_tags","_extra","_contexts","_sdkProcessingMetadata","clone","scope","newScope","_level","_span","_session","_transactionName","_fingerprint","_requestSession","addScopeListener","callback","push","addEventProcessor","setUser","user","updateSession","_notifyScopeListeners","getUser","getRequestSession","setRequestSession","requestSession","setTags","tags","setTag","key","value","setExtras","extras","setExtra","extra","setFingerprint","fingerprint","setLevel","level","setTransactionName","name","setContext","context","setSpan","span","getSpan","getTransaction","transaction","setSession","session","getSession","update","captureContext","updatedScope","Object","keys","length","isPlainObject","contexts","clear","undefined","addBreadcrumb","breadcrumb","maxBreadcrumbs","maxCrumbs","mergedBreadcrumb","timestamp","dateTimestampInSeconds","slice","getLastBreadcrumb","clearBreadcrumbs","addAttachment","attachment","getAttachments","clearAttachments","applyToEvent","event","hint","arguments","trace","getTraceContext","sdkProcessingMetadata","dynamicSamplingContext","getDynamicSamplingContext","transactionName","_applyFingerprint","breadcrumbs","_notifyEventProcessors","getGlobalEventProcessors","setSDKProcessingMetadata","newData","processors","index","SyncPromise","resolve","reject","processor","result","__SENTRY_DEBUG__","id","logger","log","isThenable","then","final","forEach","arrayify","concat","getGlobalSingleton","addGlobalEventProcessor"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/scope.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Attachment,\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Session,\n  Severity,\n  SeverityLevel,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport {\n  arrayify,\n  dateTimestampInSeconds,\n  getGlobalSingleton,\n  isPlainObject,\n  isThenable,\n  logger,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { updateSession } from './session';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: { [key: string]: unknown };\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n  protected _level?: Severity | SeverityLevel;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n      newScope._attachments = [...scope._attachments];\n      newScope._sdkProcessingMetadata = { ...scope._sdkProcessingMetadata };\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel,\n  ): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this.getSpan();\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getLastBreadcrumb(): Breadcrumb | undefined {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getAttachments(): Attachment[] {\n    return this._attachments;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Applies data from the scope to the event and runs all event processors on it.\n   *\n   * @param event Event\n   * @param hint Object containing additional information about the original exception, for use by the event processors.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint: EventHint = {}): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transaction = this._span.transaction;\n      if (transaction) {\n        event.sdkProcessingMetadata = {\n          dynamicSamplingContext: transaction.getDynamicSamplingContext(),\n          ...event.sdkProcessingMetadata,\n        };\n        const transactionName = transaction.name;\n        if (transactionName) {\n          event.tags = { transaction: transactionName, ...event.tags };\n        }\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    event.sdkProcessingMetadata = { ...event.sdkProcessingMetadata, ...this._sdkProcessingMetadata };\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  public setSDKProcessingMetadata(newData: { [key: string]: unknown }): this {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };\n\n    return this;\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n\n        __DEBUG_BUILD__ &&\n          processor.id &&\n          result === null &&\n          logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n        if (isThenable(result)) {\n          void result\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? arrayify(event.fingerprint) : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  return getGlobalSingleton<EventProcessor[]>('globalEventProcessors', () => []);\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}