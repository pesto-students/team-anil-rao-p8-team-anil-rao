{"ast":null,"code":"import { getGlobalSingleton, GLOBAL_OBJ } from './worldwide.js';\n\n/** Prefix for logging strings */\nvar PREFIX = 'Sentry Logger ';\nvar CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'];\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n  var originalConsole = GLOBAL_OBJ.console;\n  var wrappedLevels = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(function (level) {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    var originalWrappedFunc = originalConsole[level] && originalConsole[level].__sentry_original__;\n    if (level in originalConsole && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level];\n      originalConsole[level] = originalWrappedFunc;\n    }\n  });\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(function (level) {\n      originalConsole[level] = wrappedLevels[level];\n    });\n  }\n}\nfunction makeLogger() {\n  var enabled = false;\n  var logger = {\n    enable: function enable() {\n      enabled = true;\n    },\n    disable: function disable() {\n      enabled = false;\n    }\n  };\n  if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n    CONSOLE_LEVELS.forEach(function (name) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        if (enabled) {\n          consoleSandbox(function () {\n            var _GLOBAL_OBJ$console;\n            (_GLOBAL_OBJ$console = GLOBAL_OBJ.console)[name].apply(_GLOBAL_OBJ$console, [\"\".concat(PREFIX, \"[\").concat(name, \"]:\")].concat(args));\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(function (name) {\n      logger[name] = function () {\n        return undefined;\n      };\n    });\n  }\n  return logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nvar logger;\nif (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\nexport { CONSOLE_LEVELS, consoleSandbox, logger };","map":{"version":3,"names":["PREFIX","CONSOLE_LEVELS","consoleSandbox","callback","GLOBAL_OBJ","originalConsole","console","wrappedLevels","forEach","level","originalWrappedFunc","__sentry_original__","Object","keys","makeLogger","enabled","logger","enable","disable","__SENTRY_DEBUG__","name","_len","arguments","length","args","Array","_key","_GLOBAL_OBJ$console","apply","concat","undefined","getGlobalSingleton"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/logger.ts"],"sourcesContent":["import type { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalSingleton, GLOBAL_OBJ } from './worldwide';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'] as const;\nexport type ConsoleLevel = (typeof CONSOLE_LEVELS)[number];\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<(typeof CONSOLE_LEVELS)[number], LoggerMethod>;\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const originalConsole = GLOBAL_OBJ.console as Console & Record<string, unknown>;\n  const wrappedLevels: Partial<LoggerConsoleMethods> = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    const originalWrappedFunc =\n      originalConsole[level] && (originalConsole[level] as WrappedFunction).__sentry_original__;\n    if (level in originalConsole && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level] as LoggerConsoleMethods[typeof level];\n      originalConsole[level] = originalWrappedFunc as Console[typeof level];\n    }\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(level => {\n      originalConsole[level] = wrappedLevels[level as (typeof CONSOLE_LEVELS)[number]];\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n  };\n\n  if (__DEBUG_BUILD__) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nlet logger: Logger;\nif (__DEBUG_BUILD__) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\n\nexport { logger };\n"],"mappings":";;AAIA;AACA,IAAAA,MAAA;AAEA,IAAAC,cAAA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAC,eAAAC,QAAA;EACA,mBAAAC,UAAA;IACA,OAAAD,QAAA;EACA;EAEA,IAAAE,eAAA,GAAAD,UAAA,CAAAE,OAAA;EACA,IAAAC,aAAA;;EAEA;EACAN,cAAA,CAAAO,OAAA,WAAAC,KAAA;IACA;IACA,IAAAC,mBAAA,GACAL,eAAA,CAAAI,KAAA,KAAAJ,eAAA,CAAAI,KAAA,EAAAE,mBAAA;IACA,IAAAF,KAAA,IAAAJ,eAAA,IAAAK,mBAAA;MACAH,aAAA,CAAAE,KAAA,IAAAJ,eAAA,CAAAI,KAAA;MACAJ,eAAA,CAAAI,KAAA,IAAAC,mBAAA;IACA;EACA;EAEA;IACA,OAAAP,QAAA;EACA;IACA;IACAS,MAAA,CAAAC,IAAA,CAAAN,aAAA,EAAAC,OAAA,WAAAC,KAAA;MACAJ,eAAA,CAAAI,KAAA,IAAAF,aAAA,CAAAE,KAAA;IACA;EACA;AACA;AAEA,SAAAK,WAAA;EACA,IAAAC,OAAA;EACA,IAAAC,MAAA;IACAC,MAAA,WAAAA,OAAA;MACAF,OAAA;IACA;IACAG,OAAA,WAAAA,QAAA;MACAH,OAAA;IACA;EACA;EAEA,WAAAI,gBAAA,oBAAAA,gBAAA;IACAlB,cAAA,CAAAO,OAAA,WAAAY,IAAA;MACA;MACAJ,MAAA,CAAAI,IAAA;QAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;UAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;QAAA;QACA,IAAAX,OAAA;UACAb,cAAA;YAAA,IAAAyB,mBAAA;YACA,CAAAA,mBAAA,GAAAvB,UAAA,CAAAE,OAAA,EAAAc,IAAA,EAAAQ,KAAA,CAAAD,mBAAA,MAAAE,MAAA,CAAA7B,MAAA,OAAA6B,MAAA,CAAAT,IAAA,SAAAS,MAAA,CAAAL,IAAA;UACA;QACA;MACA;IACA;EACA;IACAvB,cAAA,CAAAO,OAAA,WAAAY,IAAA;MACAJ,MAAA,CAAAI,IAAA;QAAA,OAAAU,SAAA;MAAA;IACA;EACA;EAEA,OAAAd,MAAA;AACA;;AAEA;AACA,IAAAA,MAAA;AACA,WAAAG,gBAAA,oBAAAA,gBAAA;EACAH,MAAA,GAAAe,kBAAA,WAAAjB,UAAA;AACA;EACAE,MAAA,GAAAF,UAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}