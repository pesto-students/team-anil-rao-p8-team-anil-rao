{"ast":null,"code":"import { timestampInSeconds, uuid4, dropUndefinedKeys } from '@sentry/utils';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nfunction makeSession(context) {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n  const session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session)\n  };\n  if (context) {\n    updateSession(session, context);\n  }\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nfunction updateSession(session) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n  session.timestamp = context.timestamp || timestampInSeconds();\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nfunction closeSession(session, status) {\n  let context = {};\n  if (status) {\n    context = {\n      status\n    };\n  } else if (session.status === 'ok') {\n    context = {\n      status: 'exited'\n    };\n  }\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session) {\n  return dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent\n    }\n  });\n}\nexport { closeSession, makeSession, updateSession };","map":{"version":3,"names":["makeSession","context","startingTime","timestampInSeconds","session","sid","uuid4","init","timestamp","started","duration","status","errors","ignoreDuration","toJSON","sessionToJSON","updateSession","arguments","length","undefined","user","ipAddress","ip_address","did","id","email","username","release","environment","userAgent","closeSession","dropUndefinedKeys","Date","toISOString","attrs","user_agent"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/session.ts"],"sourcesContent":["import type { SerializedSession, Session, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}