{"ast":null,"code":"import { dropUndefinedKeys } from '@sentry/utils';\nimport { getCurrentHub } from './hub.js';\n\n/**\n * @inheritdoc\n */\nclass SessionFlusher {\n  __init() {\n    this.flushTimeout = 60;\n  }\n  __init2() {\n    this._pendingAggregates = {};\n  }\n  __init3() {\n    this._isEnabled = true;\n  }\n  constructor(client, attrs) {\n    SessionFlusher.prototype.__init.call(this);\n    SessionFlusher.prototype.__init2.call(this);\n    SessionFlusher.prototype.__init3.call(this);\n    this._client = client;\n    // Call to setInterval, so that flush is called every 60 seconds\n    this._intervalId = setInterval(() => this.flush(), this.flushTimeout * 1000);\n    this._sessionAttrs = attrs;\n  }\n\n  /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSession` */\n  flush() {\n    const sessionAggregates = this.getSessionAggregates();\n    if (sessionAggregates.aggregates.length === 0) {\n      return;\n    }\n    this._pendingAggregates = {};\n    this._client.sendSession(sessionAggregates);\n  }\n\n  /** Massages the entries in `pendingAggregates` and returns aggregated sessions */\n  getSessionAggregates() {\n    const aggregates = Object.keys(this._pendingAggregates).map(key => {\n      return this._pendingAggregates[parseInt(key)];\n    });\n    const sessionAggregates = {\n      attrs: this._sessionAttrs,\n      aggregates\n    };\n    return dropUndefinedKeys(sessionAggregates);\n  }\n\n  /** JSDoc */\n  close() {\n    clearInterval(this._intervalId);\n    this._isEnabled = false;\n    this.flush();\n  }\n\n  /**\n   * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then\n   * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to\n   * `_incrementSessionStatusCount` along with the start date\n   */\n  incrementSessionStatusCount() {\n    if (!this._isEnabled) {\n      return;\n    }\n    const scope = getCurrentHub().getScope();\n    const requestSession = scope.getRequestSession();\n    if (requestSession && requestSession.status) {\n      this._incrementSessionStatusCount(requestSession.status, new Date());\n      // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in\n      // case captureRequestSession is called more than once to prevent double count\n      scope.setRequestSession(undefined);\n      /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n    }\n  }\n\n  /**\n   * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of\n   * the session received\n   */\n  _incrementSessionStatusCount(status, date) {\n    // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys\n    const sessionStartedTrunc = new Date(date).setSeconds(0, 0);\n    this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};\n\n    // corresponds to aggregated sessions in one specific minute bucket\n    // for example, {\"started\":\"2021-03-16T08:00:00.000Z\",\"exited\":4, \"errored\": 1}\n    const aggregationCounts = this._pendingAggregates[sessionStartedTrunc];\n    if (!aggregationCounts.started) {\n      aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();\n    }\n    switch (status) {\n      case 'errored':\n        aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;\n        return aggregationCounts.errored;\n      case 'ok':\n        aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;\n        return aggregationCounts.exited;\n      default:\n        aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;\n        return aggregationCounts.crashed;\n    }\n  }\n}\nexport { SessionFlusher };","map":{"version":3,"names":["SessionFlusher","__init","flushTimeout","__init2","_pendingAggregates","__init3","_isEnabled","constructor","client","attrs","prototype","call","_client","_intervalId","setInterval","flush","_sessionAttrs","sessionAggregates","getSessionAggregates","aggregates","length","sendSession","Object","keys","map","key","parseInt","dropUndefinedKeys","close","clearInterval","incrementSessionStatusCount","scope","getCurrentHub","getScope","requestSession","getRequestSession","status","_incrementSessionStatusCount","Date","setRequestSession","undefined","date","sessionStartedTrunc","setSeconds","aggregationCounts","started","toISOString","errored","exited","crashed"],"sources":["/Users/chirag_vaid/Desktop/Pesto/team-anil-rao-p8-team-anil-rao/node_modules/@sentry/src/sessionflusher.ts"],"sourcesContent":["import type {\n  AggregationCounts,\n  Client,\n  RequestSessionStatus,\n  SessionAggregates,\n  SessionFlusherLike,\n} from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\n\nimport { getCurrentHub } from './hub';\n\ntype ReleaseHealthAttributes = {\n  environment?: string;\n  release: string;\n};\n\n/**\n * @inheritdoc\n */\nexport class SessionFlusher implements SessionFlusherLike {\n  public readonly flushTimeout: number = 60;\n  private _pendingAggregates: Record<number, AggregationCounts> = {};\n  private _sessionAttrs: ReleaseHealthAttributes;\n  private _intervalId: ReturnType<typeof setInterval>;\n  private _isEnabled: boolean = true;\n  private _client: Client;\n\n  public constructor(client: Client, attrs: ReleaseHealthAttributes) {\n    this._client = client;\n    // Call to setInterval, so that flush is called every 60 seconds\n    this._intervalId = setInterval(() => this.flush(), this.flushTimeout * 1000);\n    this._sessionAttrs = attrs;\n  }\n\n  /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSession` */\n  public flush(): void {\n    const sessionAggregates = this.getSessionAggregates();\n    if (sessionAggregates.aggregates.length === 0) {\n      return;\n    }\n    this._pendingAggregates = {};\n    this._client.sendSession(sessionAggregates);\n  }\n\n  /** Massages the entries in `pendingAggregates` and returns aggregated sessions */\n  public getSessionAggregates(): SessionAggregates {\n    const aggregates: AggregationCounts[] = Object.keys(this._pendingAggregates).map((key: string) => {\n      return this._pendingAggregates[parseInt(key)];\n    });\n\n    const sessionAggregates: SessionAggregates = {\n      attrs: this._sessionAttrs,\n      aggregates,\n    };\n    return dropUndefinedKeys(sessionAggregates);\n  }\n\n  /** JSDoc */\n  public close(): void {\n    clearInterval(this._intervalId);\n    this._isEnabled = false;\n    this.flush();\n  }\n\n  /**\n   * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then\n   * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to\n   * `_incrementSessionStatusCount` along with the start date\n   */\n  public incrementSessionStatusCount(): void {\n    if (!this._isEnabled) {\n      return;\n    }\n    const scope = getCurrentHub().getScope();\n    const requestSession = scope.getRequestSession();\n\n    if (requestSession && requestSession.status) {\n      this._incrementSessionStatusCount(requestSession.status, new Date());\n      // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in\n      // case captureRequestSession is called more than once to prevent double count\n      scope.setRequestSession(undefined);\n      /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n    }\n  }\n\n  /**\n   * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of\n   * the session received\n   */\n  private _incrementSessionStatusCount(status: RequestSessionStatus, date: Date): number {\n    // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys\n    const sessionStartedTrunc = new Date(date).setSeconds(0, 0);\n    this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};\n\n    // corresponds to aggregated sessions in one specific minute bucket\n    // for example, {\"started\":\"2021-03-16T08:00:00.000Z\",\"exited\":4, \"errored\": 1}\n    const aggregationCounts: AggregationCounts = this._pendingAggregates[sessionStartedTrunc];\n    if (!aggregationCounts.started) {\n      aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();\n    }\n\n    switch (status) {\n      case 'errored':\n        aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;\n        return aggregationCounts.errored;\n      case 'ok':\n        aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;\n        return aggregationCounts.exited;\n      default:\n        aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;\n        return aggregationCounts.crashed;\n    }\n  }\n}\n"],"mappings":";;;AAgBA;AACA;AACA;AACA,MAAAA,cAAA;EACAC,OAAA;IAAA,KAAAC,YAAA;EAAA;EACAC,QAAA;IAAA,KAAAC,kBAAA;EAAA;EAGAC,QAAA;IAAA,KAAAC,UAAA;EAAA;EAGAC,YAAAC,MAAA,EAAAC,KAAA;IAAAT,cAAA,CAAAU,SAAA,CAAAT,MAAA,CAAAU,IAAA;IAAAX,cAAA,CAAAU,SAAA,CAAAP,OAAA,CAAAQ,IAAA;IAAAX,cAAA,CAAAU,SAAA,CAAAL,OAAA,CAAAM,IAAA;IACA,KAAAC,OAAA,GAAAJ,MAAA;IACA;IACA,KAAAK,WAAA,GAAAC,WAAA,YAAAC,KAAA,SAAAb,YAAA;IACA,KAAAc,aAAA,GAAAP,KAAA;EACA;;EAEA;EACAM,MAAA;IACA,MAAAE,iBAAA,QAAAC,oBAAA;IACA,IAAAD,iBAAA,CAAAE,UAAA,CAAAC,MAAA;MACA;IACA;IACA,KAAAhB,kBAAA;IACA,KAAAQ,OAAA,CAAAS,WAAA,CAAAJ,iBAAA;EACA;;EAEA;EACAC,qBAAA;IACA,MAAAC,UAAA,GAAAG,MAAA,CAAAC,IAAA,MAAAnB,kBAAA,EAAAoB,GAAA,CAAAC,GAAA;MACA,YAAArB,kBAAA,CAAAsB,QAAA,CAAAD,GAAA;IACA;IAEA,MAAAR,iBAAA;MACAR,KAAA,OAAAO,aAAA;MACAG;IACA;IACA,OAAAQ,iBAAA,CAAAV,iBAAA;EACA;;EAEA;EACAW,MAAA;IACAC,aAAA,MAAAhB,WAAA;IACA,KAAAP,UAAA;IACA,KAAAS,KAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;EACAe,4BAAA;IACA,UAAAxB,UAAA;MACA;IACA;IACA,MAAAyB,KAAA,GAAAC,aAAA,GAAAC,QAAA;IACA,MAAAC,cAAA,GAAAH,KAAA,CAAAI,iBAAA;IAEA,IAAAD,cAAA,IAAAA,cAAA,CAAAE,MAAA;MACA,KAAAC,4BAAA,CAAAH,cAAA,CAAAE,MAAA,MAAAE,IAAA;MACA;MACA;MACAP,KAAA,CAAAQ,iBAAA,CAAAC,SAAA;MACA;IACA;EACA;;EAEA;AACA;AACA;AACA;EACAH,6BAAAD,MAAA,EAAAK,IAAA;IACA;IACA,MAAAC,mBAAA,OAAAJ,IAAA,CAAAG,IAAA,EAAAE,UAAA;IACA,KAAAvC,kBAAA,CAAAsC,mBAAA,SAAAtC,kBAAA,CAAAsC,mBAAA;;IAEA;IACA;IACA,MAAAE,iBAAA,QAAAxC,kBAAA,CAAAsC,mBAAA;IACA,KAAAE,iBAAA,CAAAC,OAAA;MACAD,iBAAA,CAAAC,OAAA,OAAAP,IAAA,CAAAI,mBAAA,EAAAI,WAAA;IACA;IAEA,QAAAV,MAAA;MACA;QACAQ,iBAAA,CAAAG,OAAA,IAAAH,iBAAA,CAAAG,OAAA;QACA,OAAAH,iBAAA,CAAAG,OAAA;MACA;QACAH,iBAAA,CAAAI,MAAA,IAAAJ,iBAAA,CAAAI,MAAA;QACA,OAAAJ,iBAAA,CAAAI,MAAA;MACA;QACAJ,iBAAA,CAAAK,OAAA,IAAAL,iBAAA,CAAAK,OAAA;QACA,OAAAL,iBAAA,CAAAK,OAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}